
blackpill final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a74  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08007c08  08007c08  00008c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c50  08007c50  0000911c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007c50  08007c50  00008c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c58  08007c58  0000911c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c58  08007c58  00008c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c5c  08007c5c  00008c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000011c  20000000  08007c60  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aac  2000011c  08007d7c  0000911c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bc8  08007d7c  00009bc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000911c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff14  00000000  00000000  0000914c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fb3  00000000  00000000  00019060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  0001c018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d2  00000000  00000000  0001cd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fb8  00000000  00000000  0001d71a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012012  00000000  00000000  000366d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092668  00000000  00000000  000486e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dad4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003508  00000000  00000000  000dad90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000de298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000011c 	.word	0x2000011c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007bf0 	.word	0x08007bf0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000120 	.word	0x20000120
 80001d0:	08007bf0 	.word	0x08007bf0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_ADC_ConvCpltCallback>:
volatile uint16_t adcVal[4] = {0};
volatile uint8_t isADCFinished = 0;


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a05      	ldr	r2, [pc, #20]	@ (8000524 <HAL_ADC_ConvCpltCallback+0x24>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d102      	bne.n	8000518 <HAL_ADC_ConvCpltCallback+0x18>
        isADCFinished = 1;
 8000512:	4b05      	ldr	r3, [pc, #20]	@ (8000528 <HAL_ADC_ConvCpltCallback+0x28>)
 8000514:	2201      	movs	r2, #1
 8000516:	701a      	strb	r2, [r3, #0]
    }
}
 8000518:	bf00      	nop
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	40012000 	.word	0x40012000
 8000528:	200001e8 	.word	0x200001e8

0800052c <get_hat_value>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t get_hat_value(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
	uint8_t up    = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
 8000532:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000536:	4832      	ldr	r0, [pc, #200]	@ (8000600 <get_hat_value+0xd4>)
 8000538:	f001 ffd8 	bl	80024ec <HAL_GPIO_ReadPin>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	bf0c      	ite	eq
 8000542:	2301      	moveq	r3, #1
 8000544:	2300      	movne	r3, #0
 8000546:	b2db      	uxtb	r3, r3
 8000548:	71fb      	strb	r3, [r7, #7]
	uint8_t down  = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 800054a:	2108      	movs	r1, #8
 800054c:	482c      	ldr	r0, [pc, #176]	@ (8000600 <get_hat_value+0xd4>)
 800054e:	f001 ffcd 	bl	80024ec <HAL_GPIO_ReadPin>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	bf0c      	ite	eq
 8000558:	2301      	moveq	r3, #1
 800055a:	2300      	movne	r3, #0
 800055c:	b2db      	uxtb	r3, r3
 800055e:	71bb      	strb	r3, [r7, #6]
	uint8_t left  = !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8000560:	2110      	movs	r1, #16
 8000562:	4827      	ldr	r0, [pc, #156]	@ (8000600 <get_hat_value+0xd4>)
 8000564:	f001 ffc2 	bl	80024ec <HAL_GPIO_ReadPin>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	bf0c      	ite	eq
 800056e:	2301      	moveq	r3, #1
 8000570:	2300      	movne	r3, #0
 8000572:	b2db      	uxtb	r3, r3
 8000574:	717b      	strb	r3, [r7, #5]
	uint8_t right = !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000576:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800057a:	4822      	ldr	r0, [pc, #136]	@ (8000604 <get_hat_value+0xd8>)
 800057c:	f001 ffb6 	bl	80024ec <HAL_GPIO_ReadPin>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	bf0c      	ite	eq
 8000586:	2301      	moveq	r3, #1
 8000588:	2300      	movne	r3, #0
 800058a:	b2db      	uxtb	r3, r3
 800058c:	713b      	strb	r3, [r7, #4]

    if (up)            return 0;  // Up
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <get_hat_value+0x6c>
 8000594:	2300      	movs	r3, #0
 8000596:	e02f      	b.n	80005f8 <get_hat_value+0xcc>
    if (up && right)   return 1;  // Up-Right
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d004      	beq.n	80005a8 <get_hat_value+0x7c>
 800059e:	793b      	ldrb	r3, [r7, #4]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <get_hat_value+0x7c>
 80005a4:	2301      	movs	r3, #1
 80005a6:	e027      	b.n	80005f8 <get_hat_value+0xcc>
    if (right)         return 2;  // Right
 80005a8:	793b      	ldrb	r3, [r7, #4]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <get_hat_value+0x86>
 80005ae:	2302      	movs	r3, #2
 80005b0:	e022      	b.n	80005f8 <get_hat_value+0xcc>
    if (right && down) return 3;  // Down-Right
 80005b2:	793b      	ldrb	r3, [r7, #4]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d004      	beq.n	80005c2 <get_hat_value+0x96>
 80005b8:	79bb      	ldrb	r3, [r7, #6]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <get_hat_value+0x96>
 80005be:	2303      	movs	r3, #3
 80005c0:	e01a      	b.n	80005f8 <get_hat_value+0xcc>
    if (down)          return 4;  // Down
 80005c2:	79bb      	ldrb	r3, [r7, #6]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <get_hat_value+0xa0>
 80005c8:	2304      	movs	r3, #4
 80005ca:	e015      	b.n	80005f8 <get_hat_value+0xcc>
    if (down && left)  return 5;  // Down-Left
 80005cc:	79bb      	ldrb	r3, [r7, #6]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d004      	beq.n	80005dc <get_hat_value+0xb0>
 80005d2:	797b      	ldrb	r3, [r7, #5]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <get_hat_value+0xb0>
 80005d8:	2305      	movs	r3, #5
 80005da:	e00d      	b.n	80005f8 <get_hat_value+0xcc>
    if (left)          return 6;  // Left
 80005dc:	797b      	ldrb	r3, [r7, #5]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <get_hat_value+0xba>
 80005e2:	2306      	movs	r3, #6
 80005e4:	e008      	b.n	80005f8 <get_hat_value+0xcc>
    if (left && up)    return 7;  // Up-Left
 80005e6:	797b      	ldrb	r3, [r7, #5]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d004      	beq.n	80005f6 <get_hat_value+0xca>
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <get_hat_value+0xca>
 80005f2:	2307      	movs	r3, #7
 80005f4:	e000      	b.n	80005f8 <get_hat_value+0xcc>

    return 0x0F;  // Neutral
 80005f6:	230f      	movs	r3, #15
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40020400 	.word	0x40020400
 8000604:	40020000 	.word	0x40020000

08000608 <send_gamepad_report>:

void send_gamepad_report(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
    joystickReport report = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	f8c3 2007 	str.w	r2, [r3, #7]

    // ---- Buttons: Read 12 GPIOs (example mapping) ----
    report.buttons |= !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) ? (1 << 2) : 0;		//X
 800061a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800061e:	487e      	ldr	r0, [pc, #504]	@ (8000818 <send_gamepad_report+0x210>)
 8000620:	f001 ff64 	bl	80024ec <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d101      	bne.n	800062e <send_gamepad_report+0x26>
 800062a:	2304      	movs	r3, #4
 800062c:	e000      	b.n	8000630 <send_gamepad_report+0x28>
 800062e:	2300      	movs	r3, #0
 8000630:	88ba      	ldrh	r2, [r7, #4]
 8000632:	b212      	sxth	r2, r2
 8000634:	b21b      	sxth	r3, r3
 8000636:	4313      	orrs	r3, r2
 8000638:	b21b      	sxth	r3, r3
 800063a:	b29b      	uxth	r3, r3
 800063c:	80bb      	strh	r3, [r7, #4]
    report.buttons |= !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) ? (1 << 3) : 0;		//Y
 800063e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000642:	4875      	ldr	r0, [pc, #468]	@ (8000818 <send_gamepad_report+0x210>)
 8000644:	f001 ff52 	bl	80024ec <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d101      	bne.n	8000652 <send_gamepad_report+0x4a>
 800064e:	2308      	movs	r3, #8
 8000650:	e000      	b.n	8000654 <send_gamepad_report+0x4c>
 8000652:	2300      	movs	r3, #0
 8000654:	88ba      	ldrh	r2, [r7, #4]
 8000656:	b212      	sxth	r2, r2
 8000658:	b21b      	sxth	r3, r3
 800065a:	4313      	orrs	r3, r2
 800065c:	b21b      	sxth	r3, r3
 800065e:	b29b      	uxth	r3, r3
 8000660:	80bb      	strh	r3, [r7, #4]
    report.buttons |= !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14) ? (1 << 0) : 0;   //A
 8000662:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000666:	486c      	ldr	r0, [pc, #432]	@ (8000818 <send_gamepad_report+0x210>)
 8000668:	f001 ff40 	bl	80024ec <HAL_GPIO_ReadPin>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	bf0c      	ite	eq
 8000672:	2301      	moveq	r3, #1
 8000674:	2300      	movne	r3, #0
 8000676:	b2db      	uxtb	r3, r3
 8000678:	4619      	mov	r1, r3
 800067a:	88bb      	ldrh	r3, [r7, #4]
 800067c:	b21a      	sxth	r2, r3
 800067e:	b20b      	sxth	r3, r1
 8000680:	4313      	orrs	r3, r2
 8000682:	b21b      	sxth	r3, r3
 8000684:	b29b      	uxth	r3, r3
 8000686:	80bb      	strh	r3, [r7, #4]
    report.buttons |= !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) ? (1 << 1) : 0;		//B
 8000688:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800068c:	4862      	ldr	r0, [pc, #392]	@ (8000818 <send_gamepad_report+0x210>)
 800068e:	f001 ff2d 	bl	80024ec <HAL_GPIO_ReadPin>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d101      	bne.n	800069c <send_gamepad_report+0x94>
 8000698:	2302      	movs	r3, #2
 800069a:	e000      	b.n	800069e <send_gamepad_report+0x96>
 800069c:	2300      	movs	r3, #0
 800069e:	88ba      	ldrh	r2, [r7, #4]
 80006a0:	b212      	sxth	r2, r2
 80006a2:	b21b      	sxth	r3, r3
 80006a4:	4313      	orrs	r3, r2
 80006a6:	b21b      	sxth	r3, r3
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	80bb      	strh	r3, [r7, #4]
    report.buttons |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)  ? (1 << 4) : 0;		// lt1
 80006ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006b0:	485a      	ldr	r0, [pc, #360]	@ (800081c <send_gamepad_report+0x214>)
 80006b2:	f001 ff1b 	bl	80024ec <HAL_GPIO_ReadPin>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d101      	bne.n	80006c0 <send_gamepad_report+0xb8>
 80006bc:	2310      	movs	r3, #16
 80006be:	e000      	b.n	80006c2 <send_gamepad_report+0xba>
 80006c0:	2300      	movs	r3, #0
 80006c2:	88ba      	ldrh	r2, [r7, #4]
 80006c4:	b212      	sxth	r2, r2
 80006c6:	b21b      	sxth	r3, r3
 80006c8:	4313      	orrs	r3, r2
 80006ca:	b21b      	sxth	r3, r3
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	80bb      	strh	r3, [r7, #4]
    report.buttons |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)  ? (1 << 6) : 0;		// lt2
 80006d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80006d4:	4851      	ldr	r0, [pc, #324]	@ (800081c <send_gamepad_report+0x214>)
 80006d6:	f001 ff09 	bl	80024ec <HAL_GPIO_ReadPin>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d101      	bne.n	80006e4 <send_gamepad_report+0xdc>
 80006e0:	2340      	movs	r3, #64	@ 0x40
 80006e2:	e000      	b.n	80006e6 <send_gamepad_report+0xde>
 80006e4:	2300      	movs	r3, #0
 80006e6:	88ba      	ldrh	r2, [r7, #4]
 80006e8:	b212      	sxth	r2, r2
 80006ea:	b21b      	sxth	r3, r3
 80006ec:	4313      	orrs	r3, r2
 80006ee:	b21b      	sxth	r3, r3
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	80bb      	strh	r3, [r7, #4]
    report.buttons |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) ? (1 << 5) : 0;		//rt1
 80006f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006f8:	4848      	ldr	r0, [pc, #288]	@ (800081c <send_gamepad_report+0x214>)
 80006fa:	f001 fef7 	bl	80024ec <HAL_GPIO_ReadPin>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d101      	bne.n	8000708 <send_gamepad_report+0x100>
 8000704:	2320      	movs	r3, #32
 8000706:	e000      	b.n	800070a <send_gamepad_report+0x102>
 8000708:	2300      	movs	r3, #0
 800070a:	88ba      	ldrh	r2, [r7, #4]
 800070c:	b212      	sxth	r2, r2
 800070e:	b21b      	sxth	r3, r3
 8000710:	4313      	orrs	r3, r2
 8000712:	b21b      	sxth	r3, r3
 8000714:	b29b      	uxth	r3, r3
 8000716:	80bb      	strh	r3, [r7, #4]
    report.buttons |= !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)  ? (1 << 8) : 0;		// Enter
 8000718:	2120      	movs	r1, #32
 800071a:	483f      	ldr	r0, [pc, #252]	@ (8000818 <send_gamepad_report+0x210>)
 800071c:	f001 fee6 	bl	80024ec <HAL_GPIO_ReadPin>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d102      	bne.n	800072c <send_gamepad_report+0x124>
 8000726:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800072a:	e000      	b.n	800072e <send_gamepad_report+0x126>
 800072c:	2300      	movs	r3, #0
 800072e:	88ba      	ldrh	r2, [r7, #4]
 8000730:	b212      	sxth	r2, r2
 8000732:	b21b      	sxth	r3, r3
 8000734:	4313      	orrs	r3, r2
 8000736:	b21b      	sxth	r3, r3
 8000738:	b29b      	uxth	r3, r3
 800073a:	80bb      	strh	r3, [r7, #4]
    report.buttons |= !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)  ? (1 << 10) : 0;	// lj / scl
 800073c:	2140      	movs	r1, #64	@ 0x40
 800073e:	4836      	ldr	r0, [pc, #216]	@ (8000818 <send_gamepad_report+0x210>)
 8000740:	f001 fed4 	bl	80024ec <HAL_GPIO_ReadPin>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d102      	bne.n	8000750 <send_gamepad_report+0x148>
 800074a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800074e:	e000      	b.n	8000752 <send_gamepad_report+0x14a>
 8000750:	2300      	movs	r3, #0
 8000752:	88ba      	ldrh	r2, [r7, #4]
 8000754:	b212      	sxth	r2, r2
 8000756:	b21b      	sxth	r3, r3
 8000758:	4313      	orrs	r3, r2
 800075a:	b21b      	sxth	r3, r3
 800075c:	b29b      	uxth	r3, r3
 800075e:	80bb      	strh	r3, [r7, #4]
    report.buttons |= !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)  ? (1 << 9) : 0;		// rj / sda
 8000760:	2180      	movs	r1, #128	@ 0x80
 8000762:	482d      	ldr	r0, [pc, #180]	@ (8000818 <send_gamepad_report+0x210>)
 8000764:	f001 fec2 	bl	80024ec <HAL_GPIO_ReadPin>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d102      	bne.n	8000774 <send_gamepad_report+0x16c>
 800076e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000772:	e000      	b.n	8000776 <send_gamepad_report+0x16e>
 8000774:	2300      	movs	r3, #0
 8000776:	88ba      	ldrh	r2, [r7, #4]
 8000778:	b212      	sxth	r2, r2
 800077a:	b21b      	sxth	r3, r3
 800077c:	4313      	orrs	r3, r2
 800077e:	b21b      	sxth	r3, r3
 8000780:	b29b      	uxth	r3, r3
 8000782:	80bb      	strh	r3, [r7, #4]
    report.buttons |= !HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)  ? (1 << 7) : 0;		// Back
 8000784:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000788:	4823      	ldr	r0, [pc, #140]	@ (8000818 <send_gamepad_report+0x210>)
 800078a:	f001 feaf 	bl	80024ec <HAL_GPIO_ReadPin>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d101      	bne.n	8000798 <send_gamepad_report+0x190>
 8000794:	2380      	movs	r3, #128	@ 0x80
 8000796:	e000      	b.n	800079a <send_gamepad_report+0x192>
 8000798:	2300      	movs	r3, #0
 800079a:	88ba      	ldrh	r2, [r7, #4]
 800079c:	b212      	sxth	r2, r2
 800079e:	b21b      	sxth	r3, r3
 80007a0:	4313      	orrs	r3, r2
 80007a2:	b21b      	sxth	r3, r3
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	80bb      	strh	r3, [r7, #4]
    report.buttons |= !HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)  ? (1 << 11) : 0;	// rt2
 80007a8:	2110      	movs	r1, #16
 80007aa:	481c      	ldr	r0, [pc, #112]	@ (800081c <send_gamepad_report+0x214>)
 80007ac:	f001 fe9e 	bl	80024ec <HAL_GPIO_ReadPin>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d102      	bne.n	80007bc <send_gamepad_report+0x1b4>
 80007b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007ba:	e000      	b.n	80007be <send_gamepad_report+0x1b6>
 80007bc:	2300      	movs	r3, #0
 80007be:	88ba      	ldrh	r2, [r7, #4]
 80007c0:	b212      	sxth	r2, r2
 80007c2:	b21b      	sxth	r3, r3
 80007c4:	4313      	orrs	r3, r2
 80007c6:	b21b      	sxth	r3, r3
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	80bb      	strh	r3, [r7, #4]

    // ---- Hat switch ----
    report.hat = get_hat_value();
 80007cc:	f7ff feae 	bl	800052c <get_hat_value>
 80007d0:	4603      	mov	r3, r0
 80007d2:	71bb      	strb	r3, [r7, #6]

    // ---- Axes: ADC static data ----
    report.x  = adcVal[0];
 80007d4:	4b12      	ldr	r3, [pc, #72]	@ (8000820 <send_gamepad_report+0x218>)
 80007d6:	881b      	ldrh	r3, [r3, #0]
 80007d8:	b29b      	uxth	r3, r3
 80007da:	b21b      	sxth	r3, r3
 80007dc:	f8a7 3007 	strh.w	r3, [r7, #7]
    report.y  = adcVal[1];
 80007e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <send_gamepad_report+0x218>)
 80007e2:	885b      	ldrh	r3, [r3, #2]
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	b21b      	sxth	r3, r3
 80007e8:	f8a7 3009 	strh.w	r3, [r7, #9]
    report.rx = adcVal[2];
 80007ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <send_gamepad_report+0x218>)
 80007ee:	889b      	ldrh	r3, [r3, #4]
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	b21b      	sxth	r3, r3
 80007f4:	f8a7 300b 	strh.w	r3, [r7, #11]
    report.ry = adcVal[3];
 80007f8:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <send_gamepad_report+0x218>)
 80007fa:	88db      	ldrh	r3, [r3, #6]
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	b21b      	sxth	r3, r3
 8000800:	f8a7 300d 	strh.w	r3, [r7, #13]

    // ---- Send 7-byte report ----
    USBD_HID_SendReport(&hUsbDeviceFS, (uint8_t*)&report, sizeof(report));
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	220b      	movs	r2, #11
 8000808:	4619      	mov	r1, r3
 800080a:	4806      	ldr	r0, [pc, #24]	@ (8000824 <send_gamepad_report+0x21c>)
 800080c:	f005 f9f4 	bl	8005bf8 <USBD_HID_SendReport>
}
 8000810:	bf00      	nop
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40020400 	.word	0x40020400
 800081c:	40020000 	.word	0x40020000
 8000820:	200001e0 	.word	0x200001e0
 8000824:	200001f4 	.word	0x200001f4

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082c:	f000 fab2 	bl	8000d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000830:	f000 f814 	bl	800085c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000834:	f000 f91c 	bl	8000a70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000838:	f000 f8fa 	bl	8000a30 <MX_DMA_Init>
  MX_ADC1_Init();
 800083c:	f000 f87c 	bl	8000938 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000840:	f006 fd7c 	bl	800733c <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcVal, 4);
 8000844:	2204      	movs	r2, #4
 8000846:	4903      	ldr	r1, [pc, #12]	@ (8000854 <main+0x2c>)
 8000848:	4803      	ldr	r0, [pc, #12]	@ (8000858 <main+0x30>)
 800084a:	f000 fc8d 	bl	8001168 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      send_gamepad_report();
 800084e:	f7ff fedb 	bl	8000608 <send_gamepad_report>
 8000852:	e7fc      	b.n	800084e <main+0x26>
 8000854:	200001e0 	.word	0x200001e0
 8000858:	20000138 	.word	0x20000138

0800085c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b094      	sub	sp, #80	@ 0x50
 8000860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000862:	f107 0320 	add.w	r3, r7, #32
 8000866:	2230      	movs	r2, #48	@ 0x30
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f007 f994 	bl	8007b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000880:	2300      	movs	r3, #0
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	4b2a      	ldr	r3, [pc, #168]	@ (8000930 <SystemClock_Config+0xd4>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000888:	4a29      	ldr	r2, [pc, #164]	@ (8000930 <SystemClock_Config+0xd4>)
 800088a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800088e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000890:	4b27      	ldr	r3, [pc, #156]	@ (8000930 <SystemClock_Config+0xd4>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800089c:	2300      	movs	r3, #0
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	4b24      	ldr	r3, [pc, #144]	@ (8000934 <SystemClock_Config+0xd8>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008a8:	4a22      	ldr	r2, [pc, #136]	@ (8000934 <SystemClock_Config+0xd8>)
 80008aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80008ae:	6013      	str	r3, [r2, #0]
 80008b0:	4b20      	ldr	r3, [pc, #128]	@ (8000934 <SystemClock_Config+0xd8>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80008bc:	2303      	movs	r3, #3
 80008be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c6:	2301      	movs	r3, #1
 80008c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ca:	2310      	movs	r3, #16
 80008cc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ce:	2302      	movs	r3, #2
 80008d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80008d8:	230f      	movs	r3, #15
 80008da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80008dc:	2390      	movs	r3, #144	@ 0x90
 80008de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80008e4:	2305      	movs	r3, #5
 80008e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e8:	f107 0320 	add.w	r3, r7, #32
 80008ec:	4618      	mov	r0, r3
 80008ee:	f003 f84f 	bl	8003990 <HAL_RCC_OscConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80008f8:	f000 f914 	bl	8000b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fc:	230f      	movs	r3, #15
 80008fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f003 fab2 	bl	8003e80 <HAL_RCC_ClockConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000922:	f000 f8ff 	bl	8000b24 <Error_Handler>
  }
}
 8000926:	bf00      	nop
 8000928:	3750      	adds	r7, #80	@ 0x50
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	40007000 	.word	0x40007000

08000938 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800093e:	463b      	mov	r3, r7
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800094a:	4b36      	ldr	r3, [pc, #216]	@ (8000a24 <MX_ADC1_Init+0xec>)
 800094c:	4a36      	ldr	r2, [pc, #216]	@ (8000a28 <MX_ADC1_Init+0xf0>)
 800094e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000950:	4b34      	ldr	r3, [pc, #208]	@ (8000a24 <MX_ADC1_Init+0xec>)
 8000952:	2200      	movs	r2, #0
 8000954:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000956:	4b33      	ldr	r3, [pc, #204]	@ (8000a24 <MX_ADC1_Init+0xec>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800095c:	4b31      	ldr	r3, [pc, #196]	@ (8000a24 <MX_ADC1_Init+0xec>)
 800095e:	2201      	movs	r2, #1
 8000960:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000962:	4b30      	ldr	r3, [pc, #192]	@ (8000a24 <MX_ADC1_Init+0xec>)
 8000964:	2201      	movs	r2, #1
 8000966:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000968:	4b2e      	ldr	r3, [pc, #184]	@ (8000a24 <MX_ADC1_Init+0xec>)
 800096a:	2200      	movs	r2, #0
 800096c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000970:	4b2c      	ldr	r3, [pc, #176]	@ (8000a24 <MX_ADC1_Init+0xec>)
 8000972:	2200      	movs	r2, #0
 8000974:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000976:	4b2b      	ldr	r3, [pc, #172]	@ (8000a24 <MX_ADC1_Init+0xec>)
 8000978:	4a2c      	ldr	r2, [pc, #176]	@ (8000a2c <MX_ADC1_Init+0xf4>)
 800097a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800097c:	4b29      	ldr	r3, [pc, #164]	@ (8000a24 <MX_ADC1_Init+0xec>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000982:	4b28      	ldr	r3, [pc, #160]	@ (8000a24 <MX_ADC1_Init+0xec>)
 8000984:	2204      	movs	r2, #4
 8000986:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000988:	4b26      	ldr	r3, [pc, #152]	@ (8000a24 <MX_ADC1_Init+0xec>)
 800098a:	2201      	movs	r2, #1
 800098c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000990:	4b24      	ldr	r3, [pc, #144]	@ (8000a24 <MX_ADC1_Init+0xec>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000996:	4823      	ldr	r0, [pc, #140]	@ (8000a24 <MX_ADC1_Init+0xec>)
 8000998:	f000 fa92 	bl	8000ec0 <HAL_ADC_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80009a2:	f000 f8bf 	bl	8000b24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009aa:	2301      	movs	r3, #1
 80009ac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80009ae:	2307      	movs	r3, #7
 80009b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b2:	463b      	mov	r3, r7
 80009b4:	4619      	mov	r1, r3
 80009b6:	481b      	ldr	r0, [pc, #108]	@ (8000a24 <MX_ADC1_Init+0xec>)
 80009b8:	f000 fce8 	bl	800138c <HAL_ADC_ConfigChannel>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80009c2:	f000 f8af 	bl	8000b24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009c6:	2301      	movs	r3, #1
 80009c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ce:	463b      	mov	r3, r7
 80009d0:	4619      	mov	r1, r3
 80009d2:	4814      	ldr	r0, [pc, #80]	@ (8000a24 <MX_ADC1_Init+0xec>)
 80009d4:	f000 fcda 	bl	800138c <HAL_ADC_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80009de:	f000 f8a1 	bl	8000b24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009e2:	2302      	movs	r3, #2
 80009e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80009e6:	2303      	movs	r3, #3
 80009e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ea:	463b      	mov	r3, r7
 80009ec:	4619      	mov	r1, r3
 80009ee:	480d      	ldr	r0, [pc, #52]	@ (8000a24 <MX_ADC1_Init+0xec>)
 80009f0:	f000 fccc 	bl	800138c <HAL_ADC_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80009fa:	f000 f893 	bl	8000b24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80009fe:	2303      	movs	r3, #3
 8000a00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000a02:	2304      	movs	r3, #4
 8000a04:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a06:	463b      	mov	r3, r7
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4806      	ldr	r0, [pc, #24]	@ (8000a24 <MX_ADC1_Init+0xec>)
 8000a0c:	f000 fcbe 	bl	800138c <HAL_ADC_ConfigChannel>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000a16:	f000 f885 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000138 	.word	0x20000138
 8000a28:	40012000 	.word	0x40012000
 8000a2c:	0f000001 	.word	0x0f000001

08000a30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <MX_DMA_Init+0x3c>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a6c <MX_DMA_Init+0x3c>)
 8000a40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a46:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <MX_DMA_Init+0x3c>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	2038      	movs	r0, #56	@ 0x38
 8000a58:	f001 f81d 	bl	8001a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a5c:	2038      	movs	r0, #56	@ 0x38
 8000a5e:	f001 f836 	bl	8001ace <HAL_NVIC_EnableIRQ>

}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	4b23      	ldr	r3, [pc, #140]	@ (8000b18 <MX_GPIO_Init+0xa8>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a22      	ldr	r2, [pc, #136]	@ (8000b18 <MX_GPIO_Init+0xa8>)
 8000a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b20      	ldr	r3, [pc, #128]	@ (8000b18 <MX_GPIO_Init+0xa8>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b18 <MX_GPIO_Init+0xa8>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a1b      	ldr	r2, [pc, #108]	@ (8000b18 <MX_GPIO_Init+0xa8>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b19      	ldr	r3, [pc, #100]	@ (8000b18 <MX_GPIO_Init+0xa8>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <MX_GPIO_Init+0xa8>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	4a14      	ldr	r2, [pc, #80]	@ (8000b18 <MX_GPIO_Init+0xa8>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ace:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <MX_GPIO_Init+0xa8>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA4 PA8 PA9 PA10
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000ada:	f248 7310 	movw	r3, #34576	@ 0x8710
 8000ade:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	4619      	mov	r1, r3
 8000aee:	480b      	ldr	r0, [pc, #44]	@ (8000b1c <MX_GPIO_Init+0xac>)
 8000af0:	f001 fb78 	bl	80021e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000af4:	f24f 33f8 	movw	r3, #62456	@ 0xf3f8
 8000af8:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b02:	f107 030c 	add.w	r3, r7, #12
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	@ (8000b20 <MX_GPIO_Init+0xb0>)
 8000b0a:	f001 fb6b 	bl	80021e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b0e:	bf00      	nop
 8000b10:	3720      	adds	r7, #32
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020000 	.word	0x40020000
 8000b20:	40020400 	.word	0x40020400

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <Error_Handler+0x8>

08000b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	4b10      	ldr	r3, [pc, #64]	@ (8000b7c <HAL_MspInit+0x4c>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b3e:	4a0f      	ldr	r2, [pc, #60]	@ (8000b7c <HAL_MspInit+0x4c>)
 8000b40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b46:	4b0d      	ldr	r3, [pc, #52]	@ (8000b7c <HAL_MspInit+0x4c>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	603b      	str	r3, [r7, #0]
 8000b56:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <HAL_MspInit+0x4c>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5a:	4a08      	ldr	r2, [pc, #32]	@ (8000b7c <HAL_MspInit+0x4c>)
 8000b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <HAL_MspInit+0x4c>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800

08000b80 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	@ 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a33      	ldr	r2, [pc, #204]	@ (8000c6c <HAL_ADC_MspInit+0xec>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d160      	bne.n	8000c64 <HAL_ADC_MspInit+0xe4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b32      	ldr	r3, [pc, #200]	@ (8000c70 <HAL_ADC_MspInit+0xf0>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000baa:	4a31      	ldr	r2, [pc, #196]	@ (8000c70 <HAL_ADC_MspInit+0xf0>)
 8000bac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bb2:	4b2f      	ldr	r3, [pc, #188]	@ (8000c70 <HAL_ADC_MspInit+0xf0>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b2b      	ldr	r3, [pc, #172]	@ (8000c70 <HAL_ADC_MspInit+0xf0>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	4a2a      	ldr	r2, [pc, #168]	@ (8000c70 <HAL_ADC_MspInit+0xf0>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bce:	4b28      	ldr	r3, [pc, #160]	@ (8000c70 <HAL_ADC_MspInit+0xf0>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000bda:	230f      	movs	r3, #15
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bde:	2303      	movs	r3, #3
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	4821      	ldr	r0, [pc, #132]	@ (8000c74 <HAL_ADC_MspInit+0xf4>)
 8000bee:	f001 faf9 	bl	80021e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000bf2:	4b21      	ldr	r3, [pc, #132]	@ (8000c78 <HAL_ADC_MspInit+0xf8>)
 8000bf4:	4a21      	ldr	r2, [pc, #132]	@ (8000c7c <HAL_ADC_MspInit+0xfc>)
 8000bf6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c78 <HAL_ADC_MspInit+0xf8>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000c78 <HAL_ADC_MspInit+0xf8>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c04:	4b1c      	ldr	r3, [pc, #112]	@ (8000c78 <HAL_ADC_MspInit+0xf8>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c78 <HAL_ADC_MspInit+0xf8>)
 8000c0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c10:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c12:	4b19      	ldr	r3, [pc, #100]	@ (8000c78 <HAL_ADC_MspInit+0xf8>)
 8000c14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c18:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c1a:	4b17      	ldr	r3, [pc, #92]	@ (8000c78 <HAL_ADC_MspInit+0xf8>)
 8000c1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c20:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c22:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <HAL_ADC_MspInit+0xf8>)
 8000c24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c28:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000c2a:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <HAL_ADC_MspInit+0xf8>)
 8000c2c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c30:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c32:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <HAL_ADC_MspInit+0xf8>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c38:	480f      	ldr	r0, [pc, #60]	@ (8000c78 <HAL_ADC_MspInit+0xf8>)
 8000c3a:	f000 ff63 	bl	8001b04 <HAL_DMA_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000c44:	f7ff ff6e 	bl	8000b24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c78 <HAL_ADC_MspInit+0xf8>)
 8000c4c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c78 <HAL_ADC_MspInit+0xf8>)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000c54:	2200      	movs	r2, #0
 8000c56:	2100      	movs	r1, #0
 8000c58:	2012      	movs	r0, #18
 8000c5a:	f000 ff1c 	bl	8001a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000c5e:	2012      	movs	r0, #18
 8000c60:	f000 ff35 	bl	8001ace <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c64:	bf00      	nop
 8000c66:	3728      	adds	r7, #40	@ 0x28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40012000 	.word	0x40012000
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020000 	.word	0x40020000
 8000c78:	20000180 	.word	0x20000180
 8000c7c:	40026410 	.word	0x40026410

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <NMI_Handler+0x4>

08000c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <MemManage_Handler+0x4>

08000c98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <BusFault_Handler+0x4>

08000ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <UsageFault_Handler+0x4>

08000ca8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd6:	f000 f8af 	bl	8000e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	@ (8000cf0 <ADC_IRQHandler+0x10>)
 8000ce6:	f000 f92e 	bl	8000f46 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000138 	.word	0x20000138

08000cf4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000cf8:	4802      	ldr	r0, [pc, #8]	@ (8000d04 <DMA2_Stream0_IRQHandler+0x10>)
 8000cfa:	f001 f809 	bl	8001d10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000180 	.word	0x20000180

08000d08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d0c:	4802      	ldr	r0, [pc, #8]	@ (8000d18 <OTG_FS_IRQHandler+0x10>)
 8000d0e:	f001 fd49 	bl	80027a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	200006d0 	.word	0x200006d0

08000d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <SystemInit+0x20>)
 8000d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d26:	4a05      	ldr	r2, [pc, #20]	@ (8000d3c <SystemInit+0x20>)
 8000d28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d44:	f7ff ffea 	bl	8000d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d48:	480c      	ldr	r0, [pc, #48]	@ (8000d7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d4a:	490d      	ldr	r1, [pc, #52]	@ (8000d80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d50:	e002      	b.n	8000d58 <LoopCopyDataInit>

08000d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d56:	3304      	adds	r3, #4

08000d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d5c:	d3f9      	bcc.n	8000d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d60:	4c0a      	ldr	r4, [pc, #40]	@ (8000d8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d64:	e001      	b.n	8000d6a <LoopFillZerobss>

08000d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d68:	3204      	adds	r2, #4

08000d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d6c:	d3fb      	bcc.n	8000d66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d6e:	f006 ff1b 	bl	8007ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d72:	f7ff fd59 	bl	8000828 <main>
  bx  lr    
 8000d76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d78:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d80:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 8000d84:	08007c60 	.word	0x08007c60
  ldr r2, =_sbss
 8000d88:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 8000d8c:	20000bc8 	.word	0x20000bc8

08000d90 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d90:	e7fe      	b.n	8000d90 <DMA1_Stream0_IRQHandler>
	...

08000d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d98:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd4 <HAL_Init+0x40>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd4 <HAL_Init+0x40>)
 8000d9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000da4:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd4 <HAL_Init+0x40>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd4 <HAL_Init+0x40>)
 8000daa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000db0:	4b08      	ldr	r3, [pc, #32]	@ (8000dd4 <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a07      	ldr	r2, [pc, #28]	@ (8000dd4 <HAL_Init+0x40>)
 8000db6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dbc:	2003      	movs	r0, #3
 8000dbe:	f000 fe5f 	bl	8001a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc2:	200f      	movs	r0, #15
 8000dc4:	f000 f808 	bl	8000dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc8:	f7ff feb2 	bl	8000b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40023c00 	.word	0x40023c00

08000dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de0:	4b12      	ldr	r3, [pc, #72]	@ (8000e2c <HAL_InitTick+0x54>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <HAL_InitTick+0x58>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4619      	mov	r1, r3
 8000dea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 fe77 	bl	8001aea <HAL_SYSTICK_Config>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00e      	b.n	8000e24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b0f      	cmp	r3, #15
 8000e0a:	d80a      	bhi.n	8000e22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295
 8000e14:	f000 fe3f 	bl	8001a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e18:	4a06      	ldr	r2, [pc, #24]	@ (8000e34 <HAL_InitTick+0x5c>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e000      	b.n	8000e24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	20000008 	.word	0x20000008
 8000e34:	20000004 	.word	0x20000004

08000e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <HAL_IncTick+0x20>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <HAL_IncTick+0x24>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	4a04      	ldr	r2, [pc, #16]	@ (8000e5c <HAL_IncTick+0x24>)
 8000e4a:	6013      	str	r3, [r2, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	200001ec 	.word	0x200001ec

08000e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b03      	ldr	r3, [pc, #12]	@ (8000e74 <HAL_GetTick+0x14>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	200001ec 	.word	0x200001ec

08000e78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e80:	f7ff ffee 	bl	8000e60 <HAL_GetTick>
 8000e84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e90:	d005      	beq.n	8000e9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e92:	4b0a      	ldr	r3, [pc, #40]	@ (8000ebc <HAL_Delay+0x44>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	461a      	mov	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e9e:	bf00      	nop
 8000ea0:	f7ff ffde 	bl	8000e60 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	68fa      	ldr	r2, [r7, #12]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d8f7      	bhi.n	8000ea0 <HAL_Delay+0x28>
  {
  }
}
 8000eb0:	bf00      	nop
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000008 	.word	0x20000008

08000ec0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d101      	bne.n	8000ed6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e033      	b.n	8000f3e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d109      	bne.n	8000ef2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff fe4e 	bl	8000b80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef6:	f003 0310 	and.w	r3, r3, #16
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d118      	bne.n	8000f30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f02:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f06:	f023 0302 	bic.w	r3, r3, #2
 8000f0a:	f043 0202 	orr.w	r2, r3, #2
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f000 fb5c 	bl	80015d0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f22:	f023 0303 	bic.w	r3, r3, #3
 8000f26:	f043 0201 	orr.w	r2, r3, #1
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f2e:	e001      	b.n	8000f34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b086      	sub	sp, #24
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	f003 0320 	and.w	r3, r3, #32
 8000f74:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d049      	beq.n	8001010 <HAL_ADC_IRQHandler+0xca>
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d046      	beq.n	8001010 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f86:	f003 0310 	and.w	r3, r3, #16
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d105      	bne.n	8000f9a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f92:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d12b      	bne.n	8001000 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d127      	bne.n	8001000 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fb6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d006      	beq.n	8000fcc <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d119      	bne.n	8001000 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f022 0220 	bic.w	r2, r2, #32
 8000fda:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d105      	bne.n	8001000 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff8:	f043 0201 	orr.w	r2, r3, #1
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff fa7d 	bl	8000500 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f06f 0212 	mvn.w	r2, #18
 800100e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f003 0304 	and.w	r3, r3, #4
 8001016:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800101e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d057      	beq.n	80010d6 <HAL_ADC_IRQHandler+0x190>
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d054      	beq.n	80010d6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001030:	f003 0310 	and.w	r3, r3, #16
 8001034:	2b00      	cmp	r3, #0
 8001036:	d105      	bne.n	8001044 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d139      	bne.n	80010c6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001058:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800105c:	2b00      	cmp	r3, #0
 800105e:	d006      	beq.n	800106e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800106a:	2b00      	cmp	r3, #0
 800106c:	d12b      	bne.n	80010c6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001078:	2b00      	cmp	r3, #0
 800107a:	d124      	bne.n	80010c6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001086:	2b00      	cmp	r3, #0
 8001088:	d11d      	bne.n	80010c6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800108e:	2b00      	cmp	r3, #0
 8001090:	d119      	bne.n	80010c6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010a0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d105      	bne.n	80010c6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010be:	f043 0201 	orr.w	r2, r3, #1
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 fc00 	bl	80018cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f06f 020c 	mvn.w	r2, #12
 80010d4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010e4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d017      	beq.n	800111c <HAL_ADC_IRQHandler+0x1d6>
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d014      	beq.n	800111c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d10d      	bne.n	800111c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001104:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f000 f929 	bl	8001364 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f06f 0201 	mvn.w	r2, #1
 800111a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f003 0320 	and.w	r3, r3, #32
 8001122:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800112a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d015      	beq.n	800115e <HAL_ADC_IRQHandler+0x218>
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d012      	beq.n	800115e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113c:	f043 0202 	orr.w	r2, r3, #2
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f06f 0220 	mvn.w	r2, #32
 800114c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 f912 	bl	8001378 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f06f 0220 	mvn.w	r2, #32
 800115c:	601a      	str	r2, [r3, #0]
  }
}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001178:	2300      	movs	r3, #0
 800117a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001182:	2b01      	cmp	r3, #1
 8001184:	d101      	bne.n	800118a <HAL_ADC_Start_DMA+0x22>
 8001186:	2302      	movs	r3, #2
 8001188:	e0d0      	b.n	800132c <HAL_ADC_Start_DMA+0x1c4>
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	2b01      	cmp	r3, #1
 800119e:	d018      	beq.n	80011d2 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689a      	ldr	r2, [r3, #8]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f042 0201 	orr.w	r2, r2, #1
 80011ae:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011b0:	4b60      	ldr	r3, [pc, #384]	@ (8001334 <HAL_ADC_Start_DMA+0x1cc>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a60      	ldr	r2, [pc, #384]	@ (8001338 <HAL_ADC_Start_DMA+0x1d0>)
 80011b6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ba:	0c9a      	lsrs	r2, r3, #18
 80011bc:	4613      	mov	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	4413      	add	r3, r2
 80011c2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80011c4:	e002      	b.n	80011cc <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f9      	bne.n	80011c6 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011e0:	d107      	bne.n	80011f2 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80011f0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	f040 8088 	bne.w	8001312 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800120a:	f023 0301 	bic.w	r3, r3, #1
 800120e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001220:	2b00      	cmp	r3, #0
 8001222:	d007      	beq.n	8001234 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001228:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800122c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001238:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800123c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001240:	d106      	bne.n	8001250 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001246:	f023 0206 	bic.w	r2, r3, #6
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	645a      	str	r2, [r3, #68]	@ 0x44
 800124e:	e002      	b.n	8001256 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2200      	movs	r2, #0
 8001254:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800125e:	4b37      	ldr	r3, [pc, #220]	@ (800133c <HAL_ADC_Start_DMA+0x1d4>)
 8001260:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001266:	4a36      	ldr	r2, [pc, #216]	@ (8001340 <HAL_ADC_Start_DMA+0x1d8>)
 8001268:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800126e:	4a35      	ldr	r2, [pc, #212]	@ (8001344 <HAL_ADC_Start_DMA+0x1dc>)
 8001270:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001276:	4a34      	ldr	r2, [pc, #208]	@ (8001348 <HAL_ADC_Start_DMA+0x1e0>)
 8001278:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001282:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001292:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80012a2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	334c      	adds	r3, #76	@ 0x4c
 80012ae:	4619      	mov	r1, r3
 80012b0:	68ba      	ldr	r2, [r7, #8]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f000 fcd4 	bl	8001c60 <HAL_DMA_Start_IT>
 80012b8:	4603      	mov	r3, r0
 80012ba:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 031f 	and.w	r3, r3, #31
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d10f      	bne.n	80012e8 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d129      	bne.n	800132a <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	e020      	b.n	800132a <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a17      	ldr	r2, [pc, #92]	@ (800134c <HAL_ADC_Start_DMA+0x1e4>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d11b      	bne.n	800132a <HAL_ADC_Start_DMA+0x1c2>
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d114      	bne.n	800132a <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	e00b      	b.n	800132a <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001316:	f043 0210 	orr.w	r2, r3, #16
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001322:	f043 0201 	orr.w	r2, r3, #1
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 800132a:	7ffb      	ldrb	r3, [r7, #31]
}
 800132c:	4618      	mov	r0, r3
 800132e:	3720      	adds	r7, #32
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000000 	.word	0x20000000
 8001338:	431bde83 	.word	0x431bde83
 800133c:	40012300 	.word	0x40012300
 8001340:	080017c9 	.word	0x080017c9
 8001344:	08001883 	.word	0x08001883
 8001348:	0800189f 	.word	0x0800189f
 800134c:	40012000 	.word	0x40012000

08001350 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d101      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x1c>
 80013a4:	2302      	movs	r3, #2
 80013a6:	e105      	b.n	80015b4 <HAL_ADC_ConfigChannel+0x228>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b09      	cmp	r3, #9
 80013b6:	d925      	bls.n	8001404 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68d9      	ldr	r1, [r3, #12]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	461a      	mov	r2, r3
 80013c6:	4613      	mov	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	3b1e      	subs	r3, #30
 80013ce:	2207      	movs	r2, #7
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43da      	mvns	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	400a      	ands	r2, r1
 80013dc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68d9      	ldr	r1, [r3, #12]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	4603      	mov	r3, r0
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4403      	add	r3, r0
 80013f6:	3b1e      	subs	r3, #30
 80013f8:	409a      	lsls	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	e022      	b.n	800144a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6919      	ldr	r1, [r3, #16]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	b29b      	uxth	r3, r3
 8001410:	461a      	mov	r2, r3
 8001412:	4613      	mov	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4413      	add	r3, r2
 8001418:	2207      	movs	r2, #7
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43da      	mvns	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	400a      	ands	r2, r1
 8001426:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6919      	ldr	r1, [r3, #16]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	b29b      	uxth	r3, r3
 8001438:	4618      	mov	r0, r3
 800143a:	4603      	mov	r3, r0
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4403      	add	r3, r0
 8001440:	409a      	lsls	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b06      	cmp	r3, #6
 8001450:	d824      	bhi.n	800149c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	3b05      	subs	r3, #5
 8001464:	221f      	movs	r2, #31
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43da      	mvns	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	400a      	ands	r2, r1
 8001472:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	b29b      	uxth	r3, r3
 8001480:	4618      	mov	r0, r3
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	3b05      	subs	r3, #5
 800148e:	fa00 f203 	lsl.w	r2, r0, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	635a      	str	r2, [r3, #52]	@ 0x34
 800149a:	e04c      	b.n	8001536 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b0c      	cmp	r3, #12
 80014a2:	d824      	bhi.n	80014ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	3b23      	subs	r3, #35	@ 0x23
 80014b6:	221f      	movs	r2, #31
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43da      	mvns	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	400a      	ands	r2, r1
 80014c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	3b23      	subs	r3, #35	@ 0x23
 80014e0:	fa00 f203 	lsl.w	r2, r0, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80014ec:	e023      	b.n	8001536 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	3b41      	subs	r3, #65	@ 0x41
 8001500:	221f      	movs	r2, #31
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43da      	mvns	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	400a      	ands	r2, r1
 800150e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	b29b      	uxth	r3, r3
 800151c:	4618      	mov	r0, r3
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	3b41      	subs	r3, #65	@ 0x41
 800152a:	fa00 f203 	lsl.w	r2, r0, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001536:	4b22      	ldr	r3, [pc, #136]	@ (80015c0 <HAL_ADC_ConfigChannel+0x234>)
 8001538:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a21      	ldr	r2, [pc, #132]	@ (80015c4 <HAL_ADC_ConfigChannel+0x238>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d109      	bne.n	8001558 <HAL_ADC_ConfigChannel+0x1cc>
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b12      	cmp	r3, #18
 800154a:	d105      	bne.n	8001558 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a19      	ldr	r2, [pc, #100]	@ (80015c4 <HAL_ADC_ConfigChannel+0x238>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d123      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x21e>
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b10      	cmp	r3, #16
 8001568:	d003      	beq.n	8001572 <HAL_ADC_ConfigChannel+0x1e6>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b11      	cmp	r3, #17
 8001570:	d11b      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b10      	cmp	r3, #16
 8001584:	d111      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001586:	4b10      	ldr	r3, [pc, #64]	@ (80015c8 <HAL_ADC_ConfigChannel+0x23c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a10      	ldr	r2, [pc, #64]	@ (80015cc <HAL_ADC_ConfigChannel+0x240>)
 800158c:	fba2 2303 	umull	r2, r3, r2, r3
 8001590:	0c9a      	lsrs	r2, r3, #18
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800159c:	e002      	b.n	80015a4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	3b01      	subs	r3, #1
 80015a2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f9      	bne.n	800159e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	40012300 	.word	0x40012300
 80015c4:	40012000 	.word	0x40012000
 80015c8:	20000000 	.word	0x20000000
 80015cc:	431bde83 	.word	0x431bde83

080015d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015d8:	4b79      	ldr	r3, [pc, #484]	@ (80017c0 <ADC_Init+0x1f0>)
 80015da:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	431a      	orrs	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001604:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6859      	ldr	r1, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	021a      	lsls	r2, r3, #8
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001628:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6859      	ldr	r1, [r3, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800164a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6899      	ldr	r1, [r3, #8]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001662:	4a58      	ldr	r2, [pc, #352]	@ (80017c4 <ADC_Init+0x1f4>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d022      	beq.n	80016ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001676:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6899      	ldr	r1, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001698:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6899      	ldr	r1, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	e00f      	b.n	80016ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80016bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80016cc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 0202 	bic.w	r2, r2, #2
 80016dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6899      	ldr	r1, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	7e1b      	ldrb	r3, [r3, #24]
 80016e8:	005a      	lsls	r2, r3, #1
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d01b      	beq.n	8001734 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800170a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800171a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6859      	ldr	r1, [r3, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001726:	3b01      	subs	r3, #1
 8001728:	035a      	lsls	r2, r3, #13
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	e007      	b.n	8001744 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001742:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001752:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	3b01      	subs	r3, #1
 8001760:	051a      	lsls	r2, r3, #20
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001778:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6899      	ldr	r1, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001786:	025a      	lsls	r2, r3, #9
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800179e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6899      	ldr	r1, [r3, #8]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	029a      	lsls	r2, r3, #10
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	609a      	str	r2, [r3, #8]
}
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	40012300 	.word	0x40012300
 80017c4:	0f000001 	.word	0x0f000001

080017c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017d4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017da:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d13c      	bne.n	800185c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d12b      	bne.n	8001854 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001800:	2b00      	cmp	r3, #0
 8001802:	d127      	bne.n	8001854 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800180e:	2b00      	cmp	r3, #0
 8001810:	d006      	beq.n	8001820 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800181c:	2b00      	cmp	r3, #0
 800181e:	d119      	bne.n	8001854 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0220 	bic.w	r2, r2, #32
 800182e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001834:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001840:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d105      	bne.n	8001854 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184c:	f043 0201 	orr.w	r2, r3, #1
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f7fe fe53 	bl	8000500 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800185a:	e00e      	b.n	800187a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001860:	f003 0310 	and.w	r3, r3, #16
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f7ff fd85 	bl	8001378 <HAL_ADC_ErrorCallback>
}
 800186e:	e004      	b.n	800187a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	4798      	blx	r3
}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b084      	sub	sp, #16
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800188e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f7ff fd5d 	bl	8001350 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b084      	sub	sp, #16
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018aa:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2240      	movs	r2, #64	@ 0x40
 80018b0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b6:	f043 0204 	orr.w	r2, r3, #4
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f7ff fd5a 	bl	8001378 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018c4:	bf00      	nop
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018fc:	4013      	ands	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001908:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800190c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001912:	4a04      	ldr	r2, [pc, #16]	@ (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	60d3      	str	r3, [r2, #12]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800192c:	4b04      	ldr	r3, [pc, #16]	@ (8001940 <__NVIC_GetPriorityGrouping+0x18>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	f003 0307 	and.w	r3, r3, #7
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	2b00      	cmp	r3, #0
 8001954:	db0b      	blt.n	800196e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	f003 021f 	and.w	r2, r3, #31
 800195c:	4907      	ldr	r1, [pc, #28]	@ (800197c <__NVIC_EnableIRQ+0x38>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	095b      	lsrs	r3, r3, #5
 8001964:	2001      	movs	r0, #1
 8001966:	fa00 f202 	lsl.w	r2, r0, r2
 800196a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000e100 	.word	0xe000e100

08001980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db0a      	blt.n	80019aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	490c      	ldr	r1, [pc, #48]	@ (80019cc <__NVIC_SetPriority+0x4c>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	440b      	add	r3, r1
 80019a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a8:	e00a      	b.n	80019c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4908      	ldr	r1, [pc, #32]	@ (80019d0 <__NVIC_SetPriority+0x50>)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	3b04      	subs	r3, #4
 80019b8:	0112      	lsls	r2, r2, #4
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	440b      	add	r3, r1
 80019be:	761a      	strb	r2, [r3, #24]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000e100 	.word	0xe000e100
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b089      	sub	sp, #36	@ 0x24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f1c3 0307 	rsb	r3, r3, #7
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	bf28      	it	cs
 80019f2:	2304      	movcs	r3, #4
 80019f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3304      	adds	r3, #4
 80019fa:	2b06      	cmp	r3, #6
 80019fc:	d902      	bls.n	8001a04 <NVIC_EncodePriority+0x30>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3b03      	subs	r3, #3
 8001a02:	e000      	b.n	8001a06 <NVIC_EncodePriority+0x32>
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43da      	mvns	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	401a      	ands	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	43d9      	mvns	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	4313      	orrs	r3, r2
         );
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3724      	adds	r7, #36	@ 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a4c:	d301      	bcc.n	8001a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00f      	b.n	8001a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a52:	4a0a      	ldr	r2, [pc, #40]	@ (8001a7c <SysTick_Config+0x40>)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a5a:	210f      	movs	r1, #15
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a60:	f7ff ff8e 	bl	8001980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a64:	4b05      	ldr	r3, [pc, #20]	@ (8001a7c <SysTick_Config+0x40>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6a:	4b04      	ldr	r3, [pc, #16]	@ (8001a7c <SysTick_Config+0x40>)
 8001a6c:	2207      	movs	r2, #7
 8001a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	e000e010 	.word	0xe000e010

08001a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ff29 	bl	80018e0 <__NVIC_SetPriorityGrouping>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b086      	sub	sp, #24
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
 8001aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa8:	f7ff ff3e 	bl	8001928 <__NVIC_GetPriorityGrouping>
 8001aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	6978      	ldr	r0, [r7, #20]
 8001ab4:	f7ff ff8e 	bl	80019d4 <NVIC_EncodePriority>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff5d 	bl	8001980 <__NVIC_SetPriority>
}
 8001ac6:	bf00      	nop
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff31 	bl	8001944 <__NVIC_EnableIRQ>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ffa2 	bl	8001a3c <SysTick_Config>
 8001af8:	4603      	mov	r3, r0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b10:	f7ff f9a6 	bl	8000e60 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e099      	b.n	8001c54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2202      	movs	r2, #2
 8001b24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0201 	bic.w	r2, r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b40:	e00f      	b.n	8001b62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b42:	f7ff f98d 	bl	8000e60 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b05      	cmp	r3, #5
 8001b4e:	d908      	bls.n	8001b62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2220      	movs	r2, #32
 8001b54:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2203      	movs	r2, #3
 8001b5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e078      	b.n	8001c54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1e8      	bne.n	8001b42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	4b38      	ldr	r3, [pc, #224]	@ (8001c5c <HAL_DMA_Init+0x158>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ba6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d107      	bne.n	8001bcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f023 0307 	bic.w	r3, r3, #7
 8001be2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d117      	bne.n	8001c26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d00e      	beq.n	8001c26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 fa6f 	bl	80020ec <DMA_CheckFifoParam>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d008      	beq.n	8001c26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2240      	movs	r2, #64	@ 0x40
 8001c18:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001c22:	2301      	movs	r3, #1
 8001c24:	e016      	b.n	8001c54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 fa26 	bl	8002080 <DMA_CalcBaseAndBitshift>
 8001c34:	4603      	mov	r3, r0
 8001c36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c3c:	223f      	movs	r2, #63	@ 0x3f
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	f010803f 	.word	0xf010803f

08001c60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d101      	bne.n	8001c86 <HAL_DMA_Start_IT+0x26>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e040      	b.n	8001d08 <HAL_DMA_Start_IT+0xa8>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d12f      	bne.n	8001cfa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 f9b8 	bl	8002024 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb8:	223f      	movs	r2, #63	@ 0x3f
 8001cba:	409a      	lsls	r2, r3
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f042 0216 	orr.w	r2, r2, #22
 8001cce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d007      	beq.n	8001ce8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0208 	orr.w	r2, r2, #8
 8001ce6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0201 	orr.w	r2, r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	e005      	b.n	8001d06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d02:	2302      	movs	r3, #2
 8001d04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d1c:	4b8e      	ldr	r3, [pc, #568]	@ (8001f58 <HAL_DMA_IRQHandler+0x248>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a8e      	ldr	r2, [pc, #568]	@ (8001f5c <HAL_DMA_IRQHandler+0x24c>)
 8001d22:	fba2 2303 	umull	r2, r3, r2, r3
 8001d26:	0a9b      	lsrs	r3, r3, #10
 8001d28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d3a:	2208      	movs	r2, #8
 8001d3c:	409a      	lsls	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4013      	ands	r3, r2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d01a      	beq.n	8001d7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d013      	beq.n	8001d7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0204 	bic.w	r2, r2, #4
 8001d62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d68:	2208      	movs	r2, #8
 8001d6a:	409a      	lsls	r2, r3
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d74:	f043 0201 	orr.w	r2, r3, #1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d80:	2201      	movs	r2, #1
 8001d82:	409a      	lsls	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d012      	beq.n	8001db2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00b      	beq.n	8001db2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d9e:	2201      	movs	r2, #1
 8001da0:	409a      	lsls	r2, r3
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001daa:	f043 0202 	orr.w	r2, r3, #2
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001db6:	2204      	movs	r2, #4
 8001db8:	409a      	lsls	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d012      	beq.n	8001de8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00b      	beq.n	8001de8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd4:	2204      	movs	r2, #4
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de0:	f043 0204 	orr.w	r2, r3, #4
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dec:	2210      	movs	r2, #16
 8001dee:	409a      	lsls	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d043      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d03c      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e0a:	2210      	movs	r2, #16
 8001e0c:	409a      	lsls	r2, r3
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d018      	beq.n	8001e52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d108      	bne.n	8001e40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d024      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	4798      	blx	r3
 8001e3e:	e01f      	b.n	8001e80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d01b      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	4798      	blx	r3
 8001e50:	e016      	b.n	8001e80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d107      	bne.n	8001e70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0208 	bic.w	r2, r2, #8
 8001e6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e84:	2220      	movs	r2, #32
 8001e86:	409a      	lsls	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 808f 	beq.w	8001fb0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0310 	and.w	r3, r3, #16
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 8087 	beq.w	8001fb0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b05      	cmp	r3, #5
 8001eb8:	d136      	bne.n	8001f28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0216 	bic.w	r2, r2, #22
 8001ec8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	695a      	ldr	r2, [r3, #20]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ed8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d103      	bne.n	8001eea <HAL_DMA_IRQHandler+0x1da>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d007      	beq.n	8001efa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0208 	bic.w	r2, r2, #8
 8001ef8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001efe:	223f      	movs	r2, #63	@ 0x3f
 8001f00:	409a      	lsls	r2, r3
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d07e      	beq.n	800201c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	4798      	blx	r3
        }
        return;
 8001f26:	e079      	b.n	800201c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d01d      	beq.n	8001f72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10d      	bne.n	8001f60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d031      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	4798      	blx	r3
 8001f54:	e02c      	b.n	8001fb0 <HAL_DMA_IRQHandler+0x2a0>
 8001f56:	bf00      	nop
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d023      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	4798      	blx	r3
 8001f70:	e01e      	b.n	8001fb0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10f      	bne.n	8001fa0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0210 	bic.w	r2, r2, #16
 8001f8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d032      	beq.n	800201e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d022      	beq.n	800200a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2205      	movs	r2, #5
 8001fc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0201 	bic.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d307      	bcc.n	8001ff8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f2      	bne.n	8001fdc <HAL_DMA_IRQHandler+0x2cc>
 8001ff6:	e000      	b.n	8001ffa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ff8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800200e:	2b00      	cmp	r3, #0
 8002010:	d005      	beq.n	800201e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	4798      	blx	r3
 800201a:	e000      	b.n	800201e <HAL_DMA_IRQHandler+0x30e>
        return;
 800201c:	bf00      	nop
    }
  }
}
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
 8002030:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002040:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b40      	cmp	r3, #64	@ 0x40
 8002050:	d108      	bne.n	8002064 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002062:	e007      	b.n	8002074 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	68ba      	ldr	r2, [r7, #8]
 800206a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	60da      	str	r2, [r3, #12]
}
 8002074:	bf00      	nop
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	3b10      	subs	r3, #16
 8002090:	4a14      	ldr	r2, [pc, #80]	@ (80020e4 <DMA_CalcBaseAndBitshift+0x64>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	091b      	lsrs	r3, r3, #4
 8002098:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800209a:	4a13      	ldr	r2, [pc, #76]	@ (80020e8 <DMA_CalcBaseAndBitshift+0x68>)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4413      	add	r3, r2
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d909      	bls.n	80020c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020b6:	f023 0303 	bic.w	r3, r3, #3
 80020ba:	1d1a      	adds	r2, r3, #4
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	659a      	str	r2, [r3, #88]	@ 0x58
 80020c0:	e007      	b.n	80020d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80020ca:	f023 0303 	bic.w	r3, r3, #3
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	aaaaaaab 	.word	0xaaaaaaab
 80020e8:	08007c48 	.word	0x08007c48

080020ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020f4:	2300      	movs	r3, #0
 80020f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d11f      	bne.n	8002146 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	2b03      	cmp	r3, #3
 800210a:	d856      	bhi.n	80021ba <DMA_CheckFifoParam+0xce>
 800210c:	a201      	add	r2, pc, #4	@ (adr r2, 8002114 <DMA_CheckFifoParam+0x28>)
 800210e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002112:	bf00      	nop
 8002114:	08002125 	.word	0x08002125
 8002118:	08002137 	.word	0x08002137
 800211c:	08002125 	.word	0x08002125
 8002120:	080021bb 	.word	0x080021bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002128:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d046      	beq.n	80021be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002134:	e043      	b.n	80021be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800213a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800213e:	d140      	bne.n	80021c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002144:	e03d      	b.n	80021c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800214e:	d121      	bne.n	8002194 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2b03      	cmp	r3, #3
 8002154:	d837      	bhi.n	80021c6 <DMA_CheckFifoParam+0xda>
 8002156:	a201      	add	r2, pc, #4	@ (adr r2, 800215c <DMA_CheckFifoParam+0x70>)
 8002158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215c:	0800216d 	.word	0x0800216d
 8002160:	08002173 	.word	0x08002173
 8002164:	0800216d 	.word	0x0800216d
 8002168:	08002185 	.word	0x08002185
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
      break;
 8002170:	e030      	b.n	80021d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002176:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d025      	beq.n	80021ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002182:	e022      	b.n	80021ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002188:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800218c:	d11f      	bne.n	80021ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002192:	e01c      	b.n	80021ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d903      	bls.n	80021a2 <DMA_CheckFifoParam+0xb6>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	2b03      	cmp	r3, #3
 800219e:	d003      	beq.n	80021a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80021a0:	e018      	b.n	80021d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	73fb      	strb	r3, [r7, #15]
      break;
 80021a6:	e015      	b.n	80021d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00e      	beq.n	80021d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	73fb      	strb	r3, [r7, #15]
      break;
 80021b8:	e00b      	b.n	80021d2 <DMA_CheckFifoParam+0xe6>
      break;
 80021ba:	bf00      	nop
 80021bc:	e00a      	b.n	80021d4 <DMA_CheckFifoParam+0xe8>
      break;
 80021be:	bf00      	nop
 80021c0:	e008      	b.n	80021d4 <DMA_CheckFifoParam+0xe8>
      break;
 80021c2:	bf00      	nop
 80021c4:	e006      	b.n	80021d4 <DMA_CheckFifoParam+0xe8>
      break;
 80021c6:	bf00      	nop
 80021c8:	e004      	b.n	80021d4 <DMA_CheckFifoParam+0xe8>
      break;
 80021ca:	bf00      	nop
 80021cc:	e002      	b.n	80021d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80021ce:	bf00      	nop
 80021d0:	e000      	b.n	80021d4 <DMA_CheckFifoParam+0xe8>
      break;
 80021d2:	bf00      	nop
    }
  } 
  
  return status; 
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop

080021e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b089      	sub	sp, #36	@ 0x24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021f6:	2300      	movs	r3, #0
 80021f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
 80021fe:	e159      	b.n	80024b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002200:	2201      	movs	r2, #1
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	697a      	ldr	r2, [r7, #20]
 8002210:	4013      	ands	r3, r2
 8002212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	429a      	cmp	r2, r3
 800221a:	f040 8148 	bne.w	80024ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	2b01      	cmp	r3, #1
 8002228:	d005      	beq.n	8002236 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002232:	2b02      	cmp	r3, #2
 8002234:	d130      	bne.n	8002298 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	2203      	movs	r2, #3
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4313      	orrs	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800226c:	2201      	movs	r2, #1
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	091b      	lsrs	r3, r3, #4
 8002282:	f003 0201 	and.w	r2, r3, #1
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d017      	beq.n	80022d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	2203      	movs	r2, #3
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d123      	bne.n	8002328 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	08da      	lsrs	r2, r3, #3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3208      	adds	r2, #8
 80022e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	f003 0307 	and.w	r3, r3, #7
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	220f      	movs	r2, #15
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	08da      	lsrs	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	3208      	adds	r2, #8
 8002322:	69b9      	ldr	r1, [r7, #24]
 8002324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	2203      	movs	r2, #3
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 0203 	and.w	r2, r3, #3
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 80a2 	beq.w	80024ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	4b57      	ldr	r3, [pc, #348]	@ (80024cc <HAL_GPIO_Init+0x2e8>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002372:	4a56      	ldr	r2, [pc, #344]	@ (80024cc <HAL_GPIO_Init+0x2e8>)
 8002374:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002378:	6453      	str	r3, [r2, #68]	@ 0x44
 800237a:	4b54      	ldr	r3, [pc, #336]	@ (80024cc <HAL_GPIO_Init+0x2e8>)
 800237c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002386:	4a52      	ldr	r2, [pc, #328]	@ (80024d0 <HAL_GPIO_Init+0x2ec>)
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	089b      	lsrs	r3, r3, #2
 800238c:	3302      	adds	r3, #2
 800238e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	220f      	movs	r2, #15
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4013      	ands	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a49      	ldr	r2, [pc, #292]	@ (80024d4 <HAL_GPIO_Init+0x2f0>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d019      	beq.n	80023e6 <HAL_GPIO_Init+0x202>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a48      	ldr	r2, [pc, #288]	@ (80024d8 <HAL_GPIO_Init+0x2f4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d013      	beq.n	80023e2 <HAL_GPIO_Init+0x1fe>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a47      	ldr	r2, [pc, #284]	@ (80024dc <HAL_GPIO_Init+0x2f8>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00d      	beq.n	80023de <HAL_GPIO_Init+0x1fa>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a46      	ldr	r2, [pc, #280]	@ (80024e0 <HAL_GPIO_Init+0x2fc>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d007      	beq.n	80023da <HAL_GPIO_Init+0x1f6>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a45      	ldr	r2, [pc, #276]	@ (80024e4 <HAL_GPIO_Init+0x300>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d101      	bne.n	80023d6 <HAL_GPIO_Init+0x1f2>
 80023d2:	2304      	movs	r3, #4
 80023d4:	e008      	b.n	80023e8 <HAL_GPIO_Init+0x204>
 80023d6:	2307      	movs	r3, #7
 80023d8:	e006      	b.n	80023e8 <HAL_GPIO_Init+0x204>
 80023da:	2303      	movs	r3, #3
 80023dc:	e004      	b.n	80023e8 <HAL_GPIO_Init+0x204>
 80023de:	2302      	movs	r3, #2
 80023e0:	e002      	b.n	80023e8 <HAL_GPIO_Init+0x204>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <HAL_GPIO_Init+0x204>
 80023e6:	2300      	movs	r3, #0
 80023e8:	69fa      	ldr	r2, [r7, #28]
 80023ea:	f002 0203 	and.w	r2, r2, #3
 80023ee:	0092      	lsls	r2, r2, #2
 80023f0:	4093      	lsls	r3, r2
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023f8:	4935      	ldr	r1, [pc, #212]	@ (80024d0 <HAL_GPIO_Init+0x2ec>)
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	089b      	lsrs	r3, r3, #2
 80023fe:	3302      	adds	r3, #2
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002406:	4b38      	ldr	r3, [pc, #224]	@ (80024e8 <HAL_GPIO_Init+0x304>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800242a:	4a2f      	ldr	r2, [pc, #188]	@ (80024e8 <HAL_GPIO_Init+0x304>)
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002430:	4b2d      	ldr	r3, [pc, #180]	@ (80024e8 <HAL_GPIO_Init+0x304>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002454:	4a24      	ldr	r2, [pc, #144]	@ (80024e8 <HAL_GPIO_Init+0x304>)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800245a:	4b23      	ldr	r3, [pc, #140]	@ (80024e8 <HAL_GPIO_Init+0x304>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800247e:	4a1a      	ldr	r2, [pc, #104]	@ (80024e8 <HAL_GPIO_Init+0x304>)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002484:	4b18      	ldr	r3, [pc, #96]	@ (80024e8 <HAL_GPIO_Init+0x304>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024a8:	4a0f      	ldr	r2, [pc, #60]	@ (80024e8 <HAL_GPIO_Init+0x304>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3301      	adds	r3, #1
 80024b2:	61fb      	str	r3, [r7, #28]
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	2b0f      	cmp	r3, #15
 80024b8:	f67f aea2 	bls.w	8002200 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	3724      	adds	r7, #36	@ 0x24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40013800 	.word	0x40013800
 80024d4:	40020000 	.word	0x40020000
 80024d8:	40020400 	.word	0x40020400
 80024dc:	40020800 	.word	0x40020800
 80024e0:	40020c00 	.word	0x40020c00
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40013c00 	.word	0x40013c00

080024ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691a      	ldr	r2, [r3, #16]
 80024fc:	887b      	ldrh	r3, [r7, #2]
 80024fe:	4013      	ands	r3, r2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002504:	2301      	movs	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
 8002508:	e001      	b.n	800250e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800250e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af02      	add	r7, sp, #8
 8002522:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e101      	b.n	8002732 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d106      	bne.n	800254e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f005 f82d 	bl	80075a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2203      	movs	r2, #3
 8002552:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800255c:	d102      	bne.n	8002564 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f001 ff58 	bl	800441e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6818      	ldr	r0, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	7c1a      	ldrb	r2, [r3, #16]
 8002576:	f88d 2000 	strb.w	r2, [sp]
 800257a:	3304      	adds	r3, #4
 800257c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800257e:	f001 fe37 	bl	80041f0 <USB_CoreInit>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0ce      	b.n	8002732 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2100      	movs	r1, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f001 ff50 	bl	8004440 <USB_SetCurrentMode>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d005      	beq.n	80025b2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2202      	movs	r2, #2
 80025aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e0bf      	b.n	8002732 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025b2:	2300      	movs	r3, #0
 80025b4:	73fb      	strb	r3, [r7, #15]
 80025b6:	e04a      	b.n	800264e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025b8:	7bfa      	ldrb	r2, [r7, #15]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	4413      	add	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	3315      	adds	r3, #21
 80025c8:	2201      	movs	r2, #1
 80025ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025cc:	7bfa      	ldrb	r2, [r7, #15]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4413      	add	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	3314      	adds	r3, #20
 80025dc:	7bfa      	ldrb	r2, [r7, #15]
 80025de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025e0:	7bfa      	ldrb	r2, [r7, #15]
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	b298      	uxth	r0, r3
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	4413      	add	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	332e      	adds	r3, #46	@ 0x2e
 80025f4:	4602      	mov	r2, r0
 80025f6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025f8:	7bfa      	ldrb	r2, [r7, #15]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	3318      	adds	r3, #24
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800260c:	7bfa      	ldrb	r2, [r7, #15]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	4413      	add	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	331c      	adds	r3, #28
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002620:	7bfa      	ldrb	r2, [r7, #15]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4413      	add	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	3320      	adds	r3, #32
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002634:	7bfa      	ldrb	r2, [r7, #15]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4413      	add	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	3324      	adds	r3, #36	@ 0x24
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	3301      	adds	r3, #1
 800264c:	73fb      	strb	r3, [r7, #15]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	791b      	ldrb	r3, [r3, #4]
 8002652:	7bfa      	ldrb	r2, [r7, #15]
 8002654:	429a      	cmp	r2, r3
 8002656:	d3af      	bcc.n	80025b8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002658:	2300      	movs	r3, #0
 800265a:	73fb      	strb	r3, [r7, #15]
 800265c:	e044      	b.n	80026e8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800265e:	7bfa      	ldrb	r2, [r7, #15]
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4413      	add	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	440b      	add	r3, r1
 800266c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002674:	7bfa      	ldrb	r2, [r7, #15]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4413      	add	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002686:	7bfa      	ldrb	r2, [r7, #15]
 8002688:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800268a:	7bfa      	ldrb	r2, [r7, #15]
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	4413      	add	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026a0:	7bfa      	ldrb	r2, [r7, #15]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	4413      	add	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026b6:	7bfa      	ldrb	r2, [r7, #15]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	00db      	lsls	r3, r3, #3
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026cc:	7bfa      	ldrb	r2, [r7, #15]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	4413      	add	r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
 80026e4:	3301      	adds	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	791b      	ldrb	r3, [r3, #4]
 80026ec:	7bfa      	ldrb	r2, [r7, #15]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d3b5      	bcc.n	800265e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6818      	ldr	r0, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	7c1a      	ldrb	r2, [r3, #16]
 80026fa:	f88d 2000 	strb.w	r2, [sp]
 80026fe:	3304      	adds	r3, #4
 8002700:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002702:	f001 fee9 	bl	80044d8 <USB_DevInit>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e00c      	b.n	8002732 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f002 ff33 	bl	8005596 <USB_DevDisconnect>

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b084      	sub	sp, #16
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_PCD_Start+0x1c>
 8002752:	2302      	movs	r3, #2
 8002754:	e022      	b.n	800279c <HAL_PCD_Start+0x62>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800276e:	2b01      	cmp	r3, #1
 8002770:	d105      	bne.n	800277e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002776:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f001 fe3a 	bl	80043fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f002 fee1 	bl	8005554 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027a4:	b590      	push	{r4, r7, lr}
 80027a6:	b08d      	sub	sp, #52	@ 0x34
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f002 ff9f 	bl	80056fe <USB_GetMode>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f040 848c 	bne.w	80030e0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f002 ff03 	bl	80055d8 <USB_ReadInterrupts>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 8482 	beq.w	80030de <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	0a1b      	lsrs	r3, r3, #8
 80027e4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4618      	mov	r0, r3
 80027f4:	f002 fef0 	bl	80055d8 <USB_ReadInterrupts>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d107      	bne.n	8002812 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695a      	ldr	r2, [r3, #20]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f002 0202 	and.w	r2, r2, #2
 8002810:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f002 fede 	bl	80055d8 <USB_ReadInterrupts>
 800281c:	4603      	mov	r3, r0
 800281e:	f003 0310 	and.w	r3, r3, #16
 8002822:	2b10      	cmp	r3, #16
 8002824:	d161      	bne.n	80028ea <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699a      	ldr	r2, [r3, #24]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0210 	bic.w	r2, r2, #16
 8002834:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	f003 020f 	and.w	r2, r3, #15
 8002842:	4613      	mov	r3, r2
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	4413      	add	r3, r2
 8002852:	3304      	adds	r3, #4
 8002854:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800285c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002860:	d124      	bne.n	80028ac <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002868:	4013      	ands	r3, r2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d035      	beq.n	80028da <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002878:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800287c:	b29b      	uxth	r3, r3
 800287e:	461a      	mov	r2, r3
 8002880:	6a38      	ldr	r0, [r7, #32]
 8002882:	f002 fd15 	bl	80052b0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	091b      	lsrs	r3, r3, #4
 800288e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002892:	441a      	add	r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	091b      	lsrs	r3, r3, #4
 80028a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028a4:	441a      	add	r2, r3
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	615a      	str	r2, [r3, #20]
 80028aa:	e016      	b.n	80028da <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80028b2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80028b6:	d110      	bne.n	80028da <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80028be:	2208      	movs	r2, #8
 80028c0:	4619      	mov	r1, r3
 80028c2:	6a38      	ldr	r0, [r7, #32]
 80028c4:	f002 fcf4 	bl	80052b0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	695a      	ldr	r2, [r3, #20]
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	091b      	lsrs	r3, r3, #4
 80028d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028d4:	441a      	add	r2, r3
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699a      	ldr	r2, [r3, #24]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0210 	orr.w	r2, r2, #16
 80028e8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f002 fe72 	bl	80055d8 <USB_ReadInterrupts>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028fa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80028fe:	f040 80a7 	bne.w	8002a50 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002902:	2300      	movs	r3, #0
 8002904:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4618      	mov	r0, r3
 800290c:	f002 fe77 	bl	80055fe <USB_ReadDevAllOutEpInterrupt>
 8002910:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002912:	e099      	b.n	8002a48 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 808e 	beq.w	8002a3c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f002 fe9b 	bl	8005666 <USB_ReadDevOutEPInterrupt>
 8002930:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00c      	beq.n	8002956 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800293c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	4413      	add	r3, r2
 8002944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002948:	461a      	mov	r2, r3
 800294a:	2301      	movs	r3, #1
 800294c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800294e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 fe8b 	bl	800366c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	f003 0308 	and.w	r3, r3, #8
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00c      	beq.n	800297a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002962:	015a      	lsls	r2, r3, #5
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	4413      	add	r3, r2
 8002968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800296c:	461a      	mov	r2, r3
 800296e:	2308      	movs	r3, #8
 8002970:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002972:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 ff61 	bl	800383c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	4413      	add	r3, r2
 800298c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002990:	461a      	mov	r2, r3
 8002992:	2310      	movs	r3, #16
 8002994:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d030      	beq.n	8002a02 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029a8:	2b80      	cmp	r3, #128	@ 0x80
 80029aa:	d109      	bne.n	80029c0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	69fa      	ldr	r2, [r7, #28]
 80029b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029be:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80029c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	4413      	add	r3, r2
 80029d2:	3304      	adds	r3, #4
 80029d4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	78db      	ldrb	r3, [r3, #3]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d108      	bne.n	80029f0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2200      	movs	r2, #0
 80029e2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80029e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	4619      	mov	r1, r3
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f004 fed8 	bl	80077a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029fc:	461a      	mov	r2, r3
 80029fe:	2302      	movs	r3, #2
 8002a00:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	f003 0320 	and.w	r3, r3, #32
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2320      	movs	r3, #32
 8002a1c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d009      	beq.n	8002a3c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2a:	015a      	lsls	r2, r3, #5
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	4413      	add	r3, r2
 8002a30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a34:	461a      	mov	r2, r3
 8002a36:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a3a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3e:	3301      	adds	r3, #1
 8002a40:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a44:	085b      	lsrs	r3, r3, #1
 8002a46:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002a48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f47f af62 	bne.w	8002914 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f002 fdbf 	bl	80055d8 <USB_ReadInterrupts>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a60:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a64:	f040 80db 	bne.w	8002c1e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f002 fde0 	bl	8005632 <USB_ReadDevAllInEpInterrupt>
 8002a72:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002a78:	e0cd      	b.n	8002c16 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80c2 	beq.w	8002c0a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f002 fe06 	bl	80056a2 <USB_ReadDevInEPInterrupt>
 8002a96:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d057      	beq.n	8002b52 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ab6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	43db      	mvns	r3, r3
 8002abc:	69f9      	ldr	r1, [r7, #28]
 8002abe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac8:	015a      	lsls	r2, r3, #5
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	799b      	ldrb	r3, [r3, #6]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d132      	bne.n	8002b46 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4413      	add	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	3320      	adds	r3, #32
 8002af0:	6819      	ldr	r1, [r3, #0]
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002af6:	4613      	mov	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	4413      	add	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4403      	add	r3, r0
 8002b00:	331c      	adds	r3, #28
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4419      	add	r1, r3
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	4413      	add	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4403      	add	r3, r0
 8002b14:	3320      	adds	r3, #32
 8002b16:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d113      	bne.n	8002b46 <HAL_PCD_IRQHandler+0x3a2>
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b22:	4613      	mov	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	3324      	adds	r3, #36	@ 0x24
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d108      	bne.n	8002b46 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6818      	ldr	r0, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b3e:	461a      	mov	r2, r3
 8002b40:	2101      	movs	r1, #1
 8002b42:	f002 fe0d 	bl	8005760 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f004 fdac 	bl	80076aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f003 0308 	and.w	r3, r3, #8
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d008      	beq.n	8002b6e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b68:	461a      	mov	r2, r3
 8002b6a:	2308      	movs	r3, #8
 8002b6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d008      	beq.n	8002b8a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7a:	015a      	lsls	r2, r3, #5
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b84:	461a      	mov	r2, r3
 8002b86:	2310      	movs	r3, #16
 8002b88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d008      	beq.n	8002ba6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	2340      	movs	r3, #64	@ 0x40
 8002ba4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d023      	beq.n	8002bf8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002bb0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bb2:	6a38      	ldr	r0, [r7, #32]
 8002bb4:	f001 fdf4 	bl	80047a0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002bb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	3310      	adds	r3, #16
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3304      	adds	r3, #4
 8002bca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	78db      	ldrb	r3, [r3, #3]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d108      	bne.n	8002be6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	4619      	mov	r1, r3
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f004 fdef 	bl	80077c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 fca5 	bl	8003554 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c12:	085b      	lsrs	r3, r3, #1
 8002c14:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f47f af2e 	bne.w	8002a7a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f002 fcd8 	bl	80055d8 <USB_ReadInterrupts>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c32:	d122      	bne.n	8002c7a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	69fa      	ldr	r2, [r7, #28]
 8002c3e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c42:	f023 0301 	bic.w	r3, r3, #1
 8002c46:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d108      	bne.n	8002c64 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 fe8b 	bl	8003978 <HAL_PCDEx_LPM_Callback>
 8002c62:	e002      	b.n	8002c6a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f004 fd8d 	bl	8007784 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695a      	ldr	r2, [r3, #20]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002c78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f002 fcaa 	bl	80055d8 <USB_ReadInterrupts>
 8002c84:	4603      	mov	r3, r0
 8002c86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c8e:	d112      	bne.n	8002cb6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d102      	bne.n	8002ca6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f004 fd49 	bl	8007738 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	695a      	ldr	r2, [r3, #20]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002cb4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f002 fc8c 	bl	80055d8 <USB_ReadInterrupts>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cca:	f040 80b7 	bne.w	8002e3c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cdc:	f023 0301 	bic.w	r3, r3, #1
 8002ce0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2110      	movs	r1, #16
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f001 fd59 	bl	80047a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cee:	2300      	movs	r3, #0
 8002cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cf2:	e046      	b.n	8002d82 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cf6:	015a      	lsls	r2, r3, #5
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d00:	461a      	mov	r2, r3
 8002d02:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d06:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d18:	0151      	lsls	r1, r2, #5
 8002d1a:	69fa      	ldr	r2, [r7, #28]
 8002d1c:	440a      	add	r2, r1
 8002d1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002d22:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d26:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d2a:	015a      	lsls	r2, r3, #5
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d34:	461a      	mov	r2, r3
 8002d36:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d3a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d4c:	0151      	lsls	r1, r2, #5
 8002d4e:	69fa      	ldr	r2, [r7, #28]
 8002d50:	440a      	add	r2, r1
 8002d52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002d56:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d5a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d5e:	015a      	lsls	r2, r3, #5
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d6c:	0151      	lsls	r1, r2, #5
 8002d6e:	69fa      	ldr	r2, [r7, #28]
 8002d70:	440a      	add	r2, r1
 8002d72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002d76:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002d7a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d7e:	3301      	adds	r3, #1
 8002d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	791b      	ldrb	r3, [r3, #4]
 8002d86:	461a      	mov	r2, r3
 8002d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d3b2      	bcc.n	8002cf4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	69fa      	ldr	r2, [r7, #28]
 8002d98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d9c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002da0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	7bdb      	ldrb	r3, [r3, #15]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d016      	beq.n	8002dd8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002db4:	69fa      	ldr	r2, [r7, #28]
 8002db6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dba:	f043 030b 	orr.w	r3, r3, #11
 8002dbe:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dca:	69fa      	ldr	r2, [r7, #28]
 8002dcc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dd0:	f043 030b 	orr.w	r3, r3, #11
 8002dd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dd6:	e015      	b.n	8002e04 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	69fa      	ldr	r2, [r7, #28]
 8002de2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002de6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002dea:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002dee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	69fa      	ldr	r2, [r7, #28]
 8002dfa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dfe:	f043 030b 	orr.w	r3, r3, #11
 8002e02:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	69fa      	ldr	r2, [r7, #28]
 8002e0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e12:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002e16:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6818      	ldr	r0, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e26:	461a      	mov	r2, r3
 8002e28:	f002 fc9a 	bl	8005760 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	695a      	ldr	r2, [r3, #20]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002e3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f002 fbc9 	bl	80055d8 <USB_ReadInterrupts>
 8002e46:	4603      	mov	r3, r0
 8002e48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e50:	d123      	bne.n	8002e9a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f002 fc5f 	bl	800571a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f001 fd16 	bl	8004892 <USB_GetDevSpeed>
 8002e66:	4603      	mov	r3, r0
 8002e68:	461a      	mov	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681c      	ldr	r4, [r3, #0]
 8002e72:	f001 f9b1 	bl	80041d8 <HAL_RCC_GetHCLKFreq>
 8002e76:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4620      	mov	r0, r4
 8002e80:	f001 fa1a 	bl	80042b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f004 fc38 	bl	80076fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695a      	ldr	r2, [r3, #20]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002e98:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f002 fb9a 	bl	80055d8 <USB_ReadInterrupts>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d10a      	bne.n	8002ec4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f004 fc15 	bl	80076de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695a      	ldr	r2, [r3, #20]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f002 0208 	and.w	r2, r2, #8
 8002ec2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f002 fb85 	bl	80055d8 <USB_ReadInterrupts>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ed4:	2b80      	cmp	r3, #128	@ 0x80
 8002ed6:	d123      	bne.n	8002f20 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ee8:	e014      	b.n	8002f14 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eee:	4613      	mov	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d105      	bne.n	8002f0e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	4619      	mov	r1, r3
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 faf2 	bl	80034f2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	3301      	adds	r3, #1
 8002f12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	791b      	ldrb	r3, [r3, #4]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d3e4      	bcc.n	8002eea <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f002 fb57 	bl	80055d8 <USB_ReadInterrupts>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f34:	d13c      	bne.n	8002fb0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f36:	2301      	movs	r3, #1
 8002f38:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f3a:	e02b      	b.n	8002f94 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	440b      	add	r3, r1
 8002f5a:	3318      	adds	r3, #24
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d115      	bne.n	8002f8e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002f62:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	da12      	bge.n	8002f8e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	3317      	adds	r3, #23
 8002f78:	2201      	movs	r2, #1
 8002f7a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	4619      	mov	r1, r3
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 fab2 	bl	80034f2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f90:	3301      	adds	r3, #1
 8002f92:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	791b      	ldrb	r3, [r3, #4]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d3cd      	bcc.n	8002f3c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695a      	ldr	r2, [r3, #20]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002fae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f002 fb0f 	bl	80055d8 <USB_ReadInterrupts>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fc0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fc4:	d156      	bne.n	8003074 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fca:	e045      	b.n	8003058 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d12e      	bne.n	8003052 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ff4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	da2b      	bge.n	8003052 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	0c1a      	lsrs	r2, r3, #16
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003004:	4053      	eors	r3, r2
 8003006:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800300a:	2b00      	cmp	r3, #0
 800300c:	d121      	bne.n	8003052 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003012:	4613      	mov	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	4413      	add	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	440b      	add	r3, r1
 800301c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003020:	2201      	movs	r2, #1
 8003022:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10a      	bne.n	8003052 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	69fa      	ldr	r2, [r7, #28]
 8003046:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800304a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800304e:	6053      	str	r3, [r2, #4]
            break;
 8003050:	e008      	b.n	8003064 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003054:	3301      	adds	r3, #1
 8003056:	627b      	str	r3, [r7, #36]	@ 0x24
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	791b      	ldrb	r3, [r3, #4]
 800305c:	461a      	mov	r2, r3
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	4293      	cmp	r3, r2
 8003062:	d3b3      	bcc.n	8002fcc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695a      	ldr	r2, [r3, #20]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003072:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f002 faad 	bl	80055d8 <USB_ReadInterrupts>
 800307e:	4603      	mov	r3, r0
 8003080:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003088:	d10a      	bne.n	80030a0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f004 fbac 	bl	80077e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695a      	ldr	r2, [r3, #20]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800309e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f002 fa97 	bl	80055d8 <USB_ReadInterrupts>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d115      	bne.n	80030e0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d002      	beq.n	80030cc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f004 fb9c 	bl	8007804 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6859      	ldr	r1, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	430a      	orrs	r2, r1
 80030da:	605a      	str	r2, [r3, #4]
 80030dc:	e000      	b.n	80030e0 <HAL_PCD_IRQHandler+0x93c>
      return;
 80030de:	bf00      	nop
    }
  }
}
 80030e0:	3734      	adds	r7, #52	@ 0x34
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd90      	pop	{r4, r7, pc}

080030e6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	460b      	mov	r3, r1
 80030f0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_PCD_SetAddress+0x1a>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e012      	b.n	8003126 <HAL_PCD_SetAddress+0x40>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	4611      	mov	r1, r2
 8003116:	4618      	mov	r0, r3
 8003118:	f002 f9f6 	bl	8005508 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b084      	sub	sp, #16
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
 8003136:	4608      	mov	r0, r1
 8003138:	4611      	mov	r1, r2
 800313a:	461a      	mov	r2, r3
 800313c:	4603      	mov	r3, r0
 800313e:	70fb      	strb	r3, [r7, #3]
 8003140:	460b      	mov	r3, r1
 8003142:	803b      	strh	r3, [r7, #0]
 8003144:	4613      	mov	r3, r2
 8003146:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003148:	2300      	movs	r3, #0
 800314a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800314c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003150:	2b00      	cmp	r3, #0
 8003152:	da0f      	bge.n	8003174 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003154:	78fb      	ldrb	r3, [r7, #3]
 8003156:	f003 020f 	and.w	r2, r3, #15
 800315a:	4613      	mov	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4413      	add	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	3310      	adds	r3, #16
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	4413      	add	r3, r2
 8003168:	3304      	adds	r3, #4
 800316a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2201      	movs	r2, #1
 8003170:	705a      	strb	r2, [r3, #1]
 8003172:	e00f      	b.n	8003194 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003174:	78fb      	ldrb	r3, [r7, #3]
 8003176:	f003 020f 	and.w	r2, r3, #15
 800317a:	4613      	mov	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	4413      	add	r3, r2
 800318a:	3304      	adds	r3, #4
 800318c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	b2da      	uxtb	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80031a0:	883b      	ldrh	r3, [r7, #0]
 80031a2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	78ba      	ldrb	r2, [r7, #2]
 80031ae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	785b      	ldrb	r3, [r3, #1]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d004      	beq.n	80031c2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	461a      	mov	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031c2:	78bb      	ldrb	r3, [r7, #2]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d102      	bne.n	80031ce <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_PCD_EP_Open+0xae>
 80031d8:	2302      	movs	r3, #2
 80031da:	e00e      	b.n	80031fa <HAL_PCD_EP_Open+0xcc>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68f9      	ldr	r1, [r7, #12]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f001 fb76 	bl	80048dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80031f8:	7afb      	ldrb	r3, [r7, #11]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b084      	sub	sp, #16
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	460b      	mov	r3, r1
 800320c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800320e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003212:	2b00      	cmp	r3, #0
 8003214:	da0f      	bge.n	8003236 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003216:	78fb      	ldrb	r3, [r7, #3]
 8003218:	f003 020f 	and.w	r2, r3, #15
 800321c:	4613      	mov	r3, r2
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	4413      	add	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	3310      	adds	r3, #16
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	4413      	add	r3, r2
 800322a:	3304      	adds	r3, #4
 800322c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2201      	movs	r2, #1
 8003232:	705a      	strb	r2, [r3, #1]
 8003234:	e00f      	b.n	8003256 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003236:	78fb      	ldrb	r3, [r7, #3]
 8003238:	f003 020f 	and.w	r2, r3, #15
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	4413      	add	r3, r2
 800324c:	3304      	adds	r3, #4
 800324e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003256:	78fb      	ldrb	r3, [r7, #3]
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	b2da      	uxtb	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_PCD_EP_Close+0x6e>
 800326c:	2302      	movs	r3, #2
 800326e:	e00e      	b.n	800328e <HAL_PCD_EP_Close+0x8c>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68f9      	ldr	r1, [r7, #12]
 800327e:	4618      	mov	r0, r3
 8003280:	f001 fbb4 	bl	80049ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3710      	adds	r7, #16
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b086      	sub	sp, #24
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	603b      	str	r3, [r7, #0]
 80032a2:	460b      	mov	r3, r1
 80032a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032a6:	7afb      	ldrb	r3, [r7, #11]
 80032a8:	f003 020f 	and.w	r2, r3, #15
 80032ac:	4613      	mov	r3, r2
 80032ae:	00db      	lsls	r3, r3, #3
 80032b0:	4413      	add	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4413      	add	r3, r2
 80032bc:	3304      	adds	r3, #4
 80032be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2200      	movs	r2, #0
 80032d0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2200      	movs	r2, #0
 80032d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032d8:	7afb      	ldrb	r3, [r7, #11]
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	799b      	ldrb	r3, [r3, #6]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d102      	bne.n	80032f2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6818      	ldr	r0, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	799b      	ldrb	r3, [r3, #6]
 80032fa:	461a      	mov	r2, r3
 80032fc:	6979      	ldr	r1, [r7, #20]
 80032fe:	f001 fc51 	bl	8004ba4 <USB_EPStartXfer>

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	607a      	str	r2, [r7, #4]
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	460b      	mov	r3, r1
 800331a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800331c:	7afb      	ldrb	r3, [r7, #11]
 800331e:	f003 020f 	and.w	r2, r3, #15
 8003322:	4613      	mov	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	4413      	add	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	3310      	adds	r3, #16
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	4413      	add	r3, r2
 8003330:	3304      	adds	r3, #4
 8003332:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	2200      	movs	r2, #0
 8003344:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2201      	movs	r2, #1
 800334a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800334c:	7afb      	ldrb	r3, [r7, #11]
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	b2da      	uxtb	r2, r3
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	799b      	ldrb	r3, [r3, #6]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d102      	bne.n	8003366 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6818      	ldr	r0, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	799b      	ldrb	r3, [r3, #6]
 800336e:	461a      	mov	r2, r3
 8003370:	6979      	ldr	r1, [r7, #20]
 8003372:	f001 fc17 	bl	8004ba4 <USB_EPStartXfer>

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800338c:	78fb      	ldrb	r3, [r7, #3]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	7912      	ldrb	r2, [r2, #4]
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e04f      	b.n	800343e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800339e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	da0f      	bge.n	80033c6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	f003 020f 	and.w	r2, r3, #15
 80033ac:	4613      	mov	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	3310      	adds	r3, #16
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	4413      	add	r3, r2
 80033ba:	3304      	adds	r3, #4
 80033bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2201      	movs	r2, #1
 80033c2:	705a      	strb	r2, [r3, #1]
 80033c4:	e00d      	b.n	80033e2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	4613      	mov	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	4413      	add	r3, r2
 80033d8:	3304      	adds	r3, #4
 80033da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2201      	movs	r2, #1
 80033e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	f003 030f 	and.w	r3, r3, #15
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_PCD_EP_SetStall+0x82>
 80033fe:	2302      	movs	r3, #2
 8003400:	e01d      	b.n	800343e <HAL_PCD_EP_SetStall+0xbe>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68f9      	ldr	r1, [r7, #12]
 8003410:	4618      	mov	r0, r3
 8003412:	f001 ffa5 	bl	8005360 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003416:	78fb      	ldrb	r3, [r7, #3]
 8003418:	f003 030f 	and.w	r3, r3, #15
 800341c:	2b00      	cmp	r3, #0
 800341e:	d109      	bne.n	8003434 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6818      	ldr	r0, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	7999      	ldrb	r1, [r3, #6]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800342e:	461a      	mov	r2, r3
 8003430:	f002 f996 	bl	8005760 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}

08003446 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
 800344e:	460b      	mov	r3, r1
 8003450:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003452:	78fb      	ldrb	r3, [r7, #3]
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	7912      	ldrb	r2, [r2, #4]
 800345c:	4293      	cmp	r3, r2
 800345e:	d901      	bls.n	8003464 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e042      	b.n	80034ea <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003464:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003468:	2b00      	cmp	r3, #0
 800346a:	da0f      	bge.n	800348c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	f003 020f 	and.w	r2, r3, #15
 8003472:	4613      	mov	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	4413      	add	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	3310      	adds	r3, #16
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	4413      	add	r3, r2
 8003480:	3304      	adds	r3, #4
 8003482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2201      	movs	r2, #1
 8003488:	705a      	strb	r2, [r3, #1]
 800348a:	e00f      	b.n	80034ac <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800348c:	78fb      	ldrb	r3, [r7, #3]
 800348e:	f003 020f 	and.w	r2, r3, #15
 8003492:	4613      	mov	r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	4413      	add	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	4413      	add	r3, r2
 80034a2:	3304      	adds	r3, #4
 80034a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034b2:	78fb      	ldrb	r3, [r7, #3]
 80034b4:	f003 030f 	and.w	r3, r3, #15
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d101      	bne.n	80034cc <HAL_PCD_EP_ClrStall+0x86>
 80034c8:	2302      	movs	r3, #2
 80034ca:	e00e      	b.n	80034ea <HAL_PCD_EP_ClrStall+0xa4>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68f9      	ldr	r1, [r7, #12]
 80034da:	4618      	mov	r0, r3
 80034dc:	f001 ffae 	bl	800543c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
 80034fa:	460b      	mov	r3, r1
 80034fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80034fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003502:	2b00      	cmp	r3, #0
 8003504:	da0c      	bge.n	8003520 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003506:	78fb      	ldrb	r3, [r7, #3]
 8003508:	f003 020f 	and.w	r2, r3, #15
 800350c:	4613      	mov	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	3310      	adds	r3, #16
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	4413      	add	r3, r2
 800351a:	3304      	adds	r3, #4
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	e00c      	b.n	800353a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003520:	78fb      	ldrb	r3, [r7, #3]
 8003522:	f003 020f 	and.w	r2, r3, #15
 8003526:	4613      	mov	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4413      	add	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	4413      	add	r3, r2
 8003536:	3304      	adds	r3, #4
 8003538:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68f9      	ldr	r1, [r7, #12]
 8003540:	4618      	mov	r0, r3
 8003542:	f001 fdcd 	bl	80050e0 <USB_EPStopXfer>
 8003546:	4603      	mov	r3, r0
 8003548:	72fb      	strb	r3, [r7, #11]

  return ret;
 800354a:	7afb      	ldrb	r3, [r7, #11]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08a      	sub	sp, #40	@ 0x28
 8003558:	af02      	add	r7, sp, #8
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	4613      	mov	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	3310      	adds	r3, #16
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	4413      	add	r3, r2
 8003578:	3304      	adds	r3, #4
 800357a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	695a      	ldr	r2, [r3, #20]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	429a      	cmp	r2, r3
 8003586:	d901      	bls.n	800358c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e06b      	b.n	8003664 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	69fa      	ldr	r2, [r7, #28]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d902      	bls.n	80035a8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	3303      	adds	r3, #3
 80035ac:	089b      	lsrs	r3, r3, #2
 80035ae:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035b0:	e02a      	b.n	8003608 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	69fa      	ldr	r2, [r7, #28]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d902      	bls.n	80035ce <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3303      	adds	r3, #3
 80035d2:	089b      	lsrs	r3, r3, #2
 80035d4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	68d9      	ldr	r1, [r3, #12]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	4603      	mov	r3, r0
 80035ea:	6978      	ldr	r0, [r7, #20]
 80035ec:	f001 fe22 	bl	8005234 <USB_WritePacket>

    ep->xfer_buff  += len;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	441a      	add	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	695a      	ldr	r2, [r3, #20]
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	441a      	add	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	4413      	add	r3, r2
 8003610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	429a      	cmp	r2, r3
 800361c:	d809      	bhi.n	8003632 <PCD_WriteEmptyTxFifo+0xde>
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	695a      	ldr	r2, [r3, #20]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003626:	429a      	cmp	r2, r3
 8003628:	d203      	bcs.n	8003632 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1bf      	bne.n	80035b2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	691a      	ldr	r2, [r3, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	429a      	cmp	r2, r3
 800363c:	d811      	bhi.n	8003662 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	2201      	movs	r2, #1
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003652:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	43db      	mvns	r3, r3
 8003658:	6939      	ldr	r1, [r7, #16]
 800365a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800365e:	4013      	ands	r3, r2
 8003660:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3720      	adds	r7, #32
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	333c      	adds	r3, #60	@ 0x3c
 8003684:	3304      	adds	r3, #4
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	4413      	add	r3, r2
 8003692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	799b      	ldrb	r3, [r3, #6]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d17b      	bne.n	800379a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f003 0308 	and.w	r3, r3, #8
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d015      	beq.n	80036d8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	4a61      	ldr	r2, [pc, #388]	@ (8003834 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	f240 80b9 	bls.w	8003828 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 80b3 	beq.w	8003828 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	015a      	lsls	r2, r3, #5
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036ce:	461a      	mov	r2, r3
 80036d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036d4:	6093      	str	r3, [r2, #8]
 80036d6:	e0a7      	b.n	8003828 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d009      	beq.n	80036f6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	015a      	lsls	r2, r3, #5
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036ee:	461a      	mov	r2, r3
 80036f0:	2320      	movs	r3, #32
 80036f2:	6093      	str	r3, [r2, #8]
 80036f4:	e098      	b.n	8003828 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f040 8093 	bne.w	8003828 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	4a4b      	ldr	r2, [pc, #300]	@ (8003834 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d90f      	bls.n	800372a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00a      	beq.n	800372a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	4413      	add	r3, r2
 800371c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003720:	461a      	mov	r2, r3
 8003722:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003726:	6093      	str	r3, [r2, #8]
 8003728:	e07e      	b.n	8003828 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	4613      	mov	r3, r2
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	4413      	add	r3, r2
 800373c:	3304      	adds	r3, #4
 800373e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a1a      	ldr	r2, [r3, #32]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	0159      	lsls	r1, r3, #5
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	440b      	add	r3, r1
 800374c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003756:	1ad2      	subs	r2, r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d114      	bne.n	800378c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d109      	bne.n	800377e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003774:	461a      	mov	r2, r3
 8003776:	2101      	movs	r1, #1
 8003778:	f001 fff2 	bl	8005760 <USB_EP0_OutStart>
 800377c:	e006      	b.n	800378c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	441a      	add	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	4619      	mov	r1, r3
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f003 ff6e 	bl	8007674 <HAL_PCD_DataOutStageCallback>
 8003798:	e046      	b.n	8003828 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	4a26      	ldr	r2, [pc, #152]	@ (8003838 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d124      	bne.n	80037ec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00a      	beq.n	80037c2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	015a      	lsls	r2, r3, #5
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037b8:	461a      	mov	r2, r3
 80037ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037be:	6093      	str	r3, [r2, #8]
 80037c0:	e032      	b.n	8003828 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d008      	beq.n	80037de <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037d8:	461a      	mov	r2, r3
 80037da:	2320      	movs	r3, #32
 80037dc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	4619      	mov	r1, r3
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f003 ff45 	bl	8007674 <HAL_PCD_DataOutStageCallback>
 80037ea:	e01d      	b.n	8003828 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d114      	bne.n	800381c <PCD_EP_OutXfrComplete_int+0x1b0>
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	4613      	mov	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d108      	bne.n	800381c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6818      	ldr	r0, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003814:	461a      	mov	r2, r3
 8003816:	2100      	movs	r1, #0
 8003818:	f001 ffa2 	bl	8005760 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	b2db      	uxtb	r3, r3
 8003820:	4619      	mov	r1, r3
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f003 ff26 	bl	8007674 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3720      	adds	r7, #32
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	4f54300a 	.word	0x4f54300a
 8003838:	4f54310a 	.word	0x4f54310a

0800383c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	333c      	adds	r3, #60	@ 0x3c
 8003854:	3304      	adds	r3, #4
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	015a      	lsls	r2, r3, #5
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	4413      	add	r3, r2
 8003862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4a15      	ldr	r2, [pc, #84]	@ (80038c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d90e      	bls.n	8003890 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003878:	2b00      	cmp	r3, #0
 800387a:	d009      	beq.n	8003890 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	015a      	lsls	r2, r3, #5
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	4413      	add	r3, r2
 8003884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003888:	461a      	mov	r2, r3
 800388a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800388e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f003 fedd 	bl	8007650 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4a0a      	ldr	r2, [pc, #40]	@ (80038c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d90c      	bls.n	80038b8 <PCD_EP_OutSetupPacket_int+0x7c>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	799b      	ldrb	r3, [r3, #6]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d108      	bne.n	80038b8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038b0:	461a      	mov	r2, r3
 80038b2:	2101      	movs	r1, #1
 80038b4:	f001 ff54 	bl	8005760 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	4f54300a 	.word	0x4f54300a

080038c8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	460b      	mov	r3, r1
 80038d2:	70fb      	strb	r3, [r7, #3]
 80038d4:	4613      	mov	r3, r2
 80038d6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038de:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80038e0:	78fb      	ldrb	r3, [r7, #3]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d107      	bne.n	80038f6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80038e6:	883b      	ldrh	r3, [r7, #0]
 80038e8:	0419      	lsls	r1, r3, #16
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80038f4:	e028      	b.n	8003948 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fc:	0c1b      	lsrs	r3, r3, #16
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	4413      	add	r3, r2
 8003902:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003904:	2300      	movs	r3, #0
 8003906:	73fb      	strb	r3, [r7, #15]
 8003908:	e00d      	b.n	8003926 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	3340      	adds	r3, #64	@ 0x40
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	4413      	add	r3, r2
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	0c1b      	lsrs	r3, r3, #16
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	4413      	add	r3, r2
 800391e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003920:	7bfb      	ldrb	r3, [r7, #15]
 8003922:	3301      	adds	r3, #1
 8003924:	73fb      	strb	r3, [r7, #15]
 8003926:	7bfa      	ldrb	r2, [r7, #15]
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	3b01      	subs	r3, #1
 800392c:	429a      	cmp	r2, r3
 800392e:	d3ec      	bcc.n	800390a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003930:	883b      	ldrh	r3, [r7, #0]
 8003932:	0418      	lsls	r0, r3, #16
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6819      	ldr	r1, [r3, #0]
 8003938:	78fb      	ldrb	r3, [r7, #3]
 800393a:	3b01      	subs	r3, #1
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	4302      	orrs	r2, r0
 8003940:	3340      	adds	r3, #64	@ 0x40
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	460b      	mov	r3, r1
 8003960:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	887a      	ldrh	r2, [r7, #2]
 8003968:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b086      	sub	sp, #24
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e267      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d075      	beq.n	8003a9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039ae:	4b88      	ldr	r3, [pc, #544]	@ (8003bd0 <HAL_RCC_OscConfig+0x240>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d00c      	beq.n	80039d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ba:	4b85      	ldr	r3, [pc, #532]	@ (8003bd0 <HAL_RCC_OscConfig+0x240>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d112      	bne.n	80039ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039c6:	4b82      	ldr	r3, [pc, #520]	@ (8003bd0 <HAL_RCC_OscConfig+0x240>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039d2:	d10b      	bne.n	80039ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d4:	4b7e      	ldr	r3, [pc, #504]	@ (8003bd0 <HAL_RCC_OscConfig+0x240>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d05b      	beq.n	8003a98 <HAL_RCC_OscConfig+0x108>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d157      	bne.n	8003a98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e242      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039f4:	d106      	bne.n	8003a04 <HAL_RCC_OscConfig+0x74>
 80039f6:	4b76      	ldr	r3, [pc, #472]	@ (8003bd0 <HAL_RCC_OscConfig+0x240>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a75      	ldr	r2, [pc, #468]	@ (8003bd0 <HAL_RCC_OscConfig+0x240>)
 80039fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	e01d      	b.n	8003a40 <HAL_RCC_OscConfig+0xb0>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a0c:	d10c      	bne.n	8003a28 <HAL_RCC_OscConfig+0x98>
 8003a0e:	4b70      	ldr	r3, [pc, #448]	@ (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a6f      	ldr	r2, [pc, #444]	@ (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	4b6d      	ldr	r3, [pc, #436]	@ (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a6c      	ldr	r2, [pc, #432]	@ (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	e00b      	b.n	8003a40 <HAL_RCC_OscConfig+0xb0>
 8003a28:	4b69      	ldr	r3, [pc, #420]	@ (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a68      	ldr	r2, [pc, #416]	@ (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a32:	6013      	str	r3, [r2, #0]
 8003a34:	4b66      	ldr	r3, [pc, #408]	@ (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a65      	ldr	r2, [pc, #404]	@ (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d013      	beq.n	8003a70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a48:	f7fd fa0a 	bl	8000e60 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a50:	f7fd fa06 	bl	8000e60 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b64      	cmp	r3, #100	@ 0x64
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e207      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a62:	4b5b      	ldr	r3, [pc, #364]	@ (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0f0      	beq.n	8003a50 <HAL_RCC_OscConfig+0xc0>
 8003a6e:	e014      	b.n	8003a9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a70:	f7fd f9f6 	bl	8000e60 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a78:	f7fd f9f2 	bl	8000e60 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b64      	cmp	r3, #100	@ 0x64
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e1f3      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a8a:	4b51      	ldr	r3, [pc, #324]	@ (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f0      	bne.n	8003a78 <HAL_RCC_OscConfig+0xe8>
 8003a96:	e000      	b.n	8003a9a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d063      	beq.n	8003b6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003aa6:	4b4a      	ldr	r3, [pc, #296]	@ (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 030c 	and.w	r3, r3, #12
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00b      	beq.n	8003aca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ab2:	4b47      	ldr	r3, [pc, #284]	@ (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d11c      	bne.n	8003af8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003abe:	4b44      	ldr	r3, [pc, #272]	@ (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d116      	bne.n	8003af8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aca:	4b41      	ldr	r3, [pc, #260]	@ (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d005      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x152>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d001      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e1c7      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ae2:	4b3b      	ldr	r3, [pc, #236]	@ (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	4937      	ldr	r1, [pc, #220]	@ (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003af6:	e03a      	b.n	8003b6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d020      	beq.n	8003b42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b00:	4b34      	ldr	r3, [pc, #208]	@ (8003bd4 <HAL_RCC_OscConfig+0x244>)
 8003b02:	2201      	movs	r2, #1
 8003b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b06:	f7fd f9ab 	bl	8000e60 <HAL_GetTick>
 8003b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b0c:	e008      	b.n	8003b20 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b0e:	f7fd f9a7 	bl	8000e60 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e1a8      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b20:	4b2b      	ldr	r3, [pc, #172]	@ (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0f0      	beq.n	8003b0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2c:	4b28      	ldr	r3, [pc, #160]	@ (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	4925      	ldr	r1, [pc, #148]	@ (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	600b      	str	r3, [r1, #0]
 8003b40:	e015      	b.n	8003b6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b42:	4b24      	ldr	r3, [pc, #144]	@ (8003bd4 <HAL_RCC_OscConfig+0x244>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b48:	f7fd f98a 	bl	8000e60 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b50:	f7fd f986 	bl	8000e60 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e187      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b62:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f0      	bne.n	8003b50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0308 	and.w	r3, r3, #8
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d036      	beq.n	8003be8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d016      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b82:	4b15      	ldr	r3, [pc, #84]	@ (8003bd8 <HAL_RCC_OscConfig+0x248>)
 8003b84:	2201      	movs	r2, #1
 8003b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b88:	f7fd f96a 	bl	8000e60 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b90:	f7fd f966 	bl	8000e60 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e167      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd0 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0f0      	beq.n	8003b90 <HAL_RCC_OscConfig+0x200>
 8003bae:	e01b      	b.n	8003be8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bb0:	4b09      	ldr	r3, [pc, #36]	@ (8003bd8 <HAL_RCC_OscConfig+0x248>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb6:	f7fd f953 	bl	8000e60 <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bbc:	e00e      	b.n	8003bdc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bbe:	f7fd f94f 	bl	8000e60 <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d907      	bls.n	8003bdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e150      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	42470000 	.word	0x42470000
 8003bd8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bdc:	4b88      	ldr	r3, [pc, #544]	@ (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003bde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1ea      	bne.n	8003bbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 8097 	beq.w	8003d24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bfa:	4b81      	ldr	r3, [pc, #516]	@ (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10f      	bne.n	8003c26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c06:	2300      	movs	r3, #0
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	4b7d      	ldr	r3, [pc, #500]	@ (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0e:	4a7c      	ldr	r2, [pc, #496]	@ (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c16:	4b7a      	ldr	r3, [pc, #488]	@ (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c1e:	60bb      	str	r3, [r7, #8]
 8003c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c22:	2301      	movs	r3, #1
 8003c24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c26:	4b77      	ldr	r3, [pc, #476]	@ (8003e04 <HAL_RCC_OscConfig+0x474>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d118      	bne.n	8003c64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c32:	4b74      	ldr	r3, [pc, #464]	@ (8003e04 <HAL_RCC_OscConfig+0x474>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a73      	ldr	r2, [pc, #460]	@ (8003e04 <HAL_RCC_OscConfig+0x474>)
 8003c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c3e:	f7fd f90f 	bl	8000e60 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c46:	f7fd f90b 	bl	8000e60 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e10c      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c58:	4b6a      	ldr	r3, [pc, #424]	@ (8003e04 <HAL_RCC_OscConfig+0x474>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0f0      	beq.n	8003c46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d106      	bne.n	8003c7a <HAL_RCC_OscConfig+0x2ea>
 8003c6c:	4b64      	ldr	r3, [pc, #400]	@ (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c70:	4a63      	ldr	r2, [pc, #396]	@ (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c72:	f043 0301 	orr.w	r3, r3, #1
 8003c76:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c78:	e01c      	b.n	8003cb4 <HAL_RCC_OscConfig+0x324>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2b05      	cmp	r3, #5
 8003c80:	d10c      	bne.n	8003c9c <HAL_RCC_OscConfig+0x30c>
 8003c82:	4b5f      	ldr	r3, [pc, #380]	@ (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c86:	4a5e      	ldr	r2, [pc, #376]	@ (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c88:	f043 0304 	orr.w	r3, r3, #4
 8003c8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c8e:	4b5c      	ldr	r3, [pc, #368]	@ (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c92:	4a5b      	ldr	r2, [pc, #364]	@ (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c94:	f043 0301 	orr.w	r3, r3, #1
 8003c98:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c9a:	e00b      	b.n	8003cb4 <HAL_RCC_OscConfig+0x324>
 8003c9c:	4b58      	ldr	r3, [pc, #352]	@ (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca0:	4a57      	ldr	r2, [pc, #348]	@ (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003ca2:	f023 0301 	bic.w	r3, r3, #1
 8003ca6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ca8:	4b55      	ldr	r3, [pc, #340]	@ (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cac:	4a54      	ldr	r2, [pc, #336]	@ (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003cae:	f023 0304 	bic.w	r3, r3, #4
 8003cb2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d015      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cbc:	f7fd f8d0 	bl	8000e60 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc2:	e00a      	b.n	8003cda <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc4:	f7fd f8cc 	bl	8000e60 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e0cb      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cda:	4b49      	ldr	r3, [pc, #292]	@ (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0ee      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x334>
 8003ce6:	e014      	b.n	8003d12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce8:	f7fd f8ba 	bl	8000e60 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cee:	e00a      	b.n	8003d06 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf0:	f7fd f8b6 	bl	8000e60 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e0b5      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d06:	4b3e      	ldr	r3, [pc, #248]	@ (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1ee      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d12:	7dfb      	ldrb	r3, [r7, #23]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d105      	bne.n	8003d24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d18:	4b39      	ldr	r3, [pc, #228]	@ (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1c:	4a38      	ldr	r2, [pc, #224]	@ (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003d1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d22:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 80a1 	beq.w	8003e70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d2e:	4b34      	ldr	r3, [pc, #208]	@ (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 030c 	and.w	r3, r3, #12
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d05c      	beq.n	8003df4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d141      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d42:	4b31      	ldr	r3, [pc, #196]	@ (8003e08 <HAL_RCC_OscConfig+0x478>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d48:	f7fd f88a 	bl	8000e60 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d50:	f7fd f886 	bl	8000e60 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e087      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d62:	4b27      	ldr	r3, [pc, #156]	@ (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69da      	ldr	r2, [r3, #28]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	019b      	lsls	r3, r3, #6
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d84:	085b      	lsrs	r3, r3, #1
 8003d86:	3b01      	subs	r3, #1
 8003d88:	041b      	lsls	r3, r3, #16
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d90:	061b      	lsls	r3, r3, #24
 8003d92:	491b      	ldr	r1, [pc, #108]	@ (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d98:	4b1b      	ldr	r3, [pc, #108]	@ (8003e08 <HAL_RCC_OscConfig+0x478>)
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9e:	f7fd f85f 	bl	8000e60 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da6:	f7fd f85b 	bl	8000e60 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e05c      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db8:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0f0      	beq.n	8003da6 <HAL_RCC_OscConfig+0x416>
 8003dc4:	e054      	b.n	8003e70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dc6:	4b10      	ldr	r3, [pc, #64]	@ (8003e08 <HAL_RCC_OscConfig+0x478>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dcc:	f7fd f848 	bl	8000e60 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd4:	f7fd f844 	bl	8000e60 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e045      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de6:	4b06      	ldr	r3, [pc, #24]	@ (8003e00 <HAL_RCC_OscConfig+0x470>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1f0      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x444>
 8003df2:	e03d      	b.n	8003e70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d107      	bne.n	8003e0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e038      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
 8003e00:	40023800 	.word	0x40023800
 8003e04:	40007000 	.word	0x40007000
 8003e08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8003e7c <HAL_RCC_OscConfig+0x4ec>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d028      	beq.n	8003e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d121      	bne.n	8003e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d11a      	bne.n	8003e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d111      	bne.n	8003e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e52:	085b      	lsrs	r3, r3, #1
 8003e54:	3b01      	subs	r3, #1
 8003e56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d107      	bne.n	8003e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d001      	beq.n	8003e70 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e000      	b.n	8003e72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	40023800 	.word	0x40023800

08003e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0cc      	b.n	800402e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e94:	4b68      	ldr	r3, [pc, #416]	@ (8004038 <HAL_RCC_ClockConfig+0x1b8>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d90c      	bls.n	8003ebc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea2:	4b65      	ldr	r3, [pc, #404]	@ (8004038 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	b2d2      	uxtb	r2, r2
 8003ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eaa:	4b63      	ldr	r3, [pc, #396]	@ (8004038 <HAL_RCC_ClockConfig+0x1b8>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d001      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e0b8      	b.n	800402e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d020      	beq.n	8003f0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ed4:	4b59      	ldr	r3, [pc, #356]	@ (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	4a58      	ldr	r2, [pc, #352]	@ (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003ede:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0308 	and.w	r3, r3, #8
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d005      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eec:	4b53      	ldr	r3, [pc, #332]	@ (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	4a52      	ldr	r2, [pc, #328]	@ (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ef6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef8:	4b50      	ldr	r3, [pc, #320]	@ (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	494d      	ldr	r1, [pc, #308]	@ (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d044      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d107      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f1e:	4b47      	ldr	r3, [pc, #284]	@ (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d119      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e07f      	b.n	800402e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d003      	beq.n	8003f3e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f3a:	2b03      	cmp	r3, #3
 8003f3c:	d107      	bne.n	8003f4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f3e:	4b3f      	ldr	r3, [pc, #252]	@ (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d109      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e06f      	b.n	800402e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f4e:	4b3b      	ldr	r3, [pc, #236]	@ (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e067      	b.n	800402e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f5e:	4b37      	ldr	r3, [pc, #220]	@ (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f023 0203 	bic.w	r2, r3, #3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	4934      	ldr	r1, [pc, #208]	@ (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f70:	f7fc ff76 	bl	8000e60 <HAL_GetTick>
 8003f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f76:	e00a      	b.n	8003f8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f78:	f7fc ff72 	bl	8000e60 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e04f      	b.n	800402e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f003 020c 	and.w	r2, r3, #12
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d1eb      	bne.n	8003f78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fa0:	4b25      	ldr	r3, [pc, #148]	@ (8004038 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d20c      	bcs.n	8003fc8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fae:	4b22      	ldr	r3, [pc, #136]	@ (8004038 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb6:	4b20      	ldr	r3, [pc, #128]	@ (8004038 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d001      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e032      	b.n	800402e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d008      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fd4:	4b19      	ldr	r3, [pc, #100]	@ (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	4916      	ldr	r1, [pc, #88]	@ (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0308 	and.w	r3, r3, #8
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d009      	beq.n	8004006 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ff2:	4b12      	ldr	r3, [pc, #72]	@ (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	490e      	ldr	r1, [pc, #56]	@ (800403c <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	4313      	orrs	r3, r2
 8004004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004006:	f000 f821 	bl	800404c <HAL_RCC_GetSysClockFreq>
 800400a:	4602      	mov	r2, r0
 800400c:	4b0b      	ldr	r3, [pc, #44]	@ (800403c <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	091b      	lsrs	r3, r3, #4
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	490a      	ldr	r1, [pc, #40]	@ (8004040 <HAL_RCC_ClockConfig+0x1c0>)
 8004018:	5ccb      	ldrb	r3, [r1, r3]
 800401a:	fa22 f303 	lsr.w	r3, r2, r3
 800401e:	4a09      	ldr	r2, [pc, #36]	@ (8004044 <HAL_RCC_ClockConfig+0x1c4>)
 8004020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004022:	4b09      	ldr	r3, [pc, #36]	@ (8004048 <HAL_RCC_ClockConfig+0x1c8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f7fc fed6 	bl	8000dd8 <HAL_InitTick>

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40023c00 	.word	0x40023c00
 800403c:	40023800 	.word	0x40023800
 8004040:	08007c38 	.word	0x08007c38
 8004044:	20000000 	.word	0x20000000
 8004048:	20000004 	.word	0x20000004

0800404c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800404c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004050:	b090      	sub	sp, #64	@ 0x40
 8004052:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800405c:	2300      	movs	r3, #0
 800405e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004064:	4b59      	ldr	r3, [pc, #356]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x180>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 030c 	and.w	r3, r3, #12
 800406c:	2b08      	cmp	r3, #8
 800406e:	d00d      	beq.n	800408c <HAL_RCC_GetSysClockFreq+0x40>
 8004070:	2b08      	cmp	r3, #8
 8004072:	f200 80a1 	bhi.w	80041b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004076:	2b00      	cmp	r3, #0
 8004078:	d002      	beq.n	8004080 <HAL_RCC_GetSysClockFreq+0x34>
 800407a:	2b04      	cmp	r3, #4
 800407c:	d003      	beq.n	8004086 <HAL_RCC_GetSysClockFreq+0x3a>
 800407e:	e09b      	b.n	80041b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004080:	4b53      	ldr	r3, [pc, #332]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004082:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004084:	e09b      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004086:	4b53      	ldr	r3, [pc, #332]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004088:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800408a:	e098      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800408c:	4b4f      	ldr	r3, [pc, #316]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x180>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004094:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004096:	4b4d      	ldr	r3, [pc, #308]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x180>)
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d028      	beq.n	80040f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a2:	4b4a      	ldr	r3, [pc, #296]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x180>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	099b      	lsrs	r3, r3, #6
 80040a8:	2200      	movs	r2, #0
 80040aa:	623b      	str	r3, [r7, #32]
 80040ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040b4:	2100      	movs	r1, #0
 80040b6:	4b47      	ldr	r3, [pc, #284]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80040b8:	fb03 f201 	mul.w	r2, r3, r1
 80040bc:	2300      	movs	r3, #0
 80040be:	fb00 f303 	mul.w	r3, r0, r3
 80040c2:	4413      	add	r3, r2
 80040c4:	4a43      	ldr	r2, [pc, #268]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80040c6:	fba0 1202 	umull	r1, r2, r0, r2
 80040ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040cc:	460a      	mov	r2, r1
 80040ce:	62ba      	str	r2, [r7, #40]	@ 0x28
 80040d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040d2:	4413      	add	r3, r2
 80040d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d8:	2200      	movs	r2, #0
 80040da:	61bb      	str	r3, [r7, #24]
 80040dc:	61fa      	str	r2, [r7, #28]
 80040de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80040e6:	f7fc f875 	bl	80001d4 <__aeabi_uldivmod>
 80040ea:	4602      	mov	r2, r0
 80040ec:	460b      	mov	r3, r1
 80040ee:	4613      	mov	r3, r2
 80040f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040f2:	e053      	b.n	800419c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040f4:	4b35      	ldr	r3, [pc, #212]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x180>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	099b      	lsrs	r3, r3, #6
 80040fa:	2200      	movs	r2, #0
 80040fc:	613b      	str	r3, [r7, #16]
 80040fe:	617a      	str	r2, [r7, #20]
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004106:	f04f 0b00 	mov.w	fp, #0
 800410a:	4652      	mov	r2, sl
 800410c:	465b      	mov	r3, fp
 800410e:	f04f 0000 	mov.w	r0, #0
 8004112:	f04f 0100 	mov.w	r1, #0
 8004116:	0159      	lsls	r1, r3, #5
 8004118:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800411c:	0150      	lsls	r0, r2, #5
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	ebb2 080a 	subs.w	r8, r2, sl
 8004126:	eb63 090b 	sbc.w	r9, r3, fp
 800412a:	f04f 0200 	mov.w	r2, #0
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004136:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800413a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800413e:	ebb2 0408 	subs.w	r4, r2, r8
 8004142:	eb63 0509 	sbc.w	r5, r3, r9
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	f04f 0300 	mov.w	r3, #0
 800414e:	00eb      	lsls	r3, r5, #3
 8004150:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004154:	00e2      	lsls	r2, r4, #3
 8004156:	4614      	mov	r4, r2
 8004158:	461d      	mov	r5, r3
 800415a:	eb14 030a 	adds.w	r3, r4, sl
 800415e:	603b      	str	r3, [r7, #0]
 8004160:	eb45 030b 	adc.w	r3, r5, fp
 8004164:	607b      	str	r3, [r7, #4]
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004172:	4629      	mov	r1, r5
 8004174:	028b      	lsls	r3, r1, #10
 8004176:	4621      	mov	r1, r4
 8004178:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800417c:	4621      	mov	r1, r4
 800417e:	028a      	lsls	r2, r1, #10
 8004180:	4610      	mov	r0, r2
 8004182:	4619      	mov	r1, r3
 8004184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004186:	2200      	movs	r2, #0
 8004188:	60bb      	str	r3, [r7, #8]
 800418a:	60fa      	str	r2, [r7, #12]
 800418c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004190:	f7fc f820 	bl	80001d4 <__aeabi_uldivmod>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4613      	mov	r3, r2
 800419a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800419c:	4b0b      	ldr	r3, [pc, #44]	@ (80041cc <HAL_RCC_GetSysClockFreq+0x180>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	0c1b      	lsrs	r3, r3, #16
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	3301      	adds	r3, #1
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80041ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041b6:	e002      	b.n	80041be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041b8:	4b05      	ldr	r3, [pc, #20]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80041ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3740      	adds	r7, #64	@ 0x40
 80041c4:	46bd      	mov	sp, r7
 80041c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041ca:	bf00      	nop
 80041cc:	40023800 	.word	0x40023800
 80041d0:	00f42400 	.word	0x00f42400
 80041d4:	017d7840 	.word	0x017d7840

080041d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041dc:	4b03      	ldr	r3, [pc, #12]	@ (80041ec <HAL_RCC_GetHCLKFreq+0x14>)
 80041de:	681b      	ldr	r3, [r3, #0]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	20000000 	.word	0x20000000

080041f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041f0:	b084      	sub	sp, #16
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b084      	sub	sp, #16
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
 80041fa:	f107 001c 	add.w	r0, r7, #28
 80041fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004202:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004206:	2b01      	cmp	r3, #1
 8004208:	d123      	bne.n	8004252 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800421e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004232:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004236:	2b01      	cmp	r3, #1
 8004238:	d105      	bne.n	8004246 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f001 fae8 	bl	800581c <USB_CoreReset>
 800424c:	4603      	mov	r3, r0
 800424e:	73fb      	strb	r3, [r7, #15]
 8004250:	e01b      	b.n	800428a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f001 fadc 	bl	800581c <USB_CoreReset>
 8004264:	4603      	mov	r3, r0
 8004266:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004268:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800426c:	2b00      	cmp	r3, #0
 800426e:	d106      	bne.n	800427e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004274:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	639a      	str	r2, [r3, #56]	@ 0x38
 800427c:	e005      	b.n	800428a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004282:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800428a:	7fbb      	ldrb	r3, [r7, #30]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d10b      	bne.n	80042a8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f043 0206 	orr.w	r2, r3, #6
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f043 0220 	orr.w	r2, r3, #32
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042b4:	b004      	add	sp, #16
 80042b6:	4770      	bx	lr

080042b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b087      	sub	sp, #28
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	4613      	mov	r3, r2
 80042c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80042c6:	79fb      	ldrb	r3, [r7, #7]
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d165      	bne.n	8004398 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	4a41      	ldr	r2, [pc, #260]	@ (80043d4 <USB_SetTurnaroundTime+0x11c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d906      	bls.n	80042e2 <USB_SetTurnaroundTime+0x2a>
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	4a40      	ldr	r2, [pc, #256]	@ (80043d8 <USB_SetTurnaroundTime+0x120>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d202      	bcs.n	80042e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80042dc:	230f      	movs	r3, #15
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	e062      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	4a3c      	ldr	r2, [pc, #240]	@ (80043d8 <USB_SetTurnaroundTime+0x120>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d306      	bcc.n	80042f8 <USB_SetTurnaroundTime+0x40>
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	4a3b      	ldr	r2, [pc, #236]	@ (80043dc <USB_SetTurnaroundTime+0x124>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d202      	bcs.n	80042f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80042f2:	230e      	movs	r3, #14
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	e057      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	4a38      	ldr	r2, [pc, #224]	@ (80043dc <USB_SetTurnaroundTime+0x124>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d306      	bcc.n	800430e <USB_SetTurnaroundTime+0x56>
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	4a37      	ldr	r2, [pc, #220]	@ (80043e0 <USB_SetTurnaroundTime+0x128>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d202      	bcs.n	800430e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004308:	230d      	movs	r3, #13
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	e04c      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	4a33      	ldr	r2, [pc, #204]	@ (80043e0 <USB_SetTurnaroundTime+0x128>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d306      	bcc.n	8004324 <USB_SetTurnaroundTime+0x6c>
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	4a32      	ldr	r2, [pc, #200]	@ (80043e4 <USB_SetTurnaroundTime+0x12c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d802      	bhi.n	8004324 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800431e:	230c      	movs	r3, #12
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	e041      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4a2f      	ldr	r2, [pc, #188]	@ (80043e4 <USB_SetTurnaroundTime+0x12c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d906      	bls.n	800433a <USB_SetTurnaroundTime+0x82>
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4a2e      	ldr	r2, [pc, #184]	@ (80043e8 <USB_SetTurnaroundTime+0x130>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d802      	bhi.n	800433a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004334:	230b      	movs	r3, #11
 8004336:	617b      	str	r3, [r7, #20]
 8004338:	e036      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	4a2a      	ldr	r2, [pc, #168]	@ (80043e8 <USB_SetTurnaroundTime+0x130>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d906      	bls.n	8004350 <USB_SetTurnaroundTime+0x98>
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	4a29      	ldr	r2, [pc, #164]	@ (80043ec <USB_SetTurnaroundTime+0x134>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d802      	bhi.n	8004350 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800434a:	230a      	movs	r3, #10
 800434c:	617b      	str	r3, [r7, #20]
 800434e:	e02b      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	4a26      	ldr	r2, [pc, #152]	@ (80043ec <USB_SetTurnaroundTime+0x134>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d906      	bls.n	8004366 <USB_SetTurnaroundTime+0xae>
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	4a25      	ldr	r2, [pc, #148]	@ (80043f0 <USB_SetTurnaroundTime+0x138>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d202      	bcs.n	8004366 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004360:	2309      	movs	r3, #9
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	e020      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	4a21      	ldr	r2, [pc, #132]	@ (80043f0 <USB_SetTurnaroundTime+0x138>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d306      	bcc.n	800437c <USB_SetTurnaroundTime+0xc4>
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	4a20      	ldr	r2, [pc, #128]	@ (80043f4 <USB_SetTurnaroundTime+0x13c>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d802      	bhi.n	800437c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004376:	2308      	movs	r3, #8
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	e015      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4a1d      	ldr	r2, [pc, #116]	@ (80043f4 <USB_SetTurnaroundTime+0x13c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d906      	bls.n	8004392 <USB_SetTurnaroundTime+0xda>
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	4a1c      	ldr	r2, [pc, #112]	@ (80043f8 <USB_SetTurnaroundTime+0x140>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d202      	bcs.n	8004392 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800438c:	2307      	movs	r3, #7
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	e00a      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004392:	2306      	movs	r3, #6
 8004394:	617b      	str	r3, [r7, #20]
 8004396:	e007      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004398:	79fb      	ldrb	r3, [r7, #7]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d102      	bne.n	80043a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800439e:	2309      	movs	r3, #9
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	e001      	b.n	80043a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80043a4:	2309      	movs	r3, #9
 80043a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	68da      	ldr	r2, [r3, #12]
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	029b      	lsls	r3, r3, #10
 80043bc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80043c0:	431a      	orrs	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	371c      	adds	r7, #28
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	00d8acbf 	.word	0x00d8acbf
 80043d8:	00e4e1c0 	.word	0x00e4e1c0
 80043dc:	00f42400 	.word	0x00f42400
 80043e0:	01067380 	.word	0x01067380
 80043e4:	011a499f 	.word	0x011a499f
 80043e8:	01312cff 	.word	0x01312cff
 80043ec:	014ca43f 	.word	0x014ca43f
 80043f0:	016e3600 	.word	0x016e3600
 80043f4:	01a6ab1f 	.word	0x01a6ab1f
 80043f8:	01e84800 	.word	0x01e84800

080043fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f043 0201 	orr.w	r2, r3, #1
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f023 0201 	bic.w	r2, r3, #1
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	460b      	mov	r3, r1
 800444a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800444c:	2300      	movs	r3, #0
 800444e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d115      	bne.n	800448e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800446e:	200a      	movs	r0, #10
 8004470:	f7fc fd02 	bl	8000e78 <HAL_Delay>
      ms += 10U;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	330a      	adds	r3, #10
 8004478:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f001 f93f 	bl	80056fe <USB_GetMode>
 8004480:	4603      	mov	r3, r0
 8004482:	2b01      	cmp	r3, #1
 8004484:	d01e      	beq.n	80044c4 <USB_SetCurrentMode+0x84>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2bc7      	cmp	r3, #199	@ 0xc7
 800448a:	d9f0      	bls.n	800446e <USB_SetCurrentMode+0x2e>
 800448c:	e01a      	b.n	80044c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800448e:	78fb      	ldrb	r3, [r7, #3]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d115      	bne.n	80044c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80044a0:	200a      	movs	r0, #10
 80044a2:	f7fc fce9 	bl	8000e78 <HAL_Delay>
      ms += 10U;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	330a      	adds	r3, #10
 80044aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f001 f926 	bl	80056fe <USB_GetMode>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <USB_SetCurrentMode+0x84>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2bc7      	cmp	r3, #199	@ 0xc7
 80044bc:	d9f0      	bls.n	80044a0 <USB_SetCurrentMode+0x60>
 80044be:	e001      	b.n	80044c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e005      	b.n	80044d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2bc8      	cmp	r3, #200	@ 0xc8
 80044c8:	d101      	bne.n	80044ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e000      	b.n	80044d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044d8:	b084      	sub	sp, #16
 80044da:	b580      	push	{r7, lr}
 80044dc:	b086      	sub	sp, #24
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80044e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80044ea:	2300      	movs	r3, #0
 80044ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80044f2:	2300      	movs	r3, #0
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	e009      	b.n	800450c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	3340      	adds	r3, #64	@ 0x40
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	2200      	movs	r2, #0
 8004504:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	3301      	adds	r3, #1
 800450a:	613b      	str	r3, [r7, #16]
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	2b0e      	cmp	r3, #14
 8004510:	d9f2      	bls.n	80044f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004512:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004516:	2b00      	cmp	r3, #0
 8004518:	d11c      	bne.n	8004554 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004528:	f043 0302 	orr.w	r3, r3, #2
 800452c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004532:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800454a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	639a      	str	r2, [r3, #56]	@ 0x38
 8004552:	e00b      	b.n	800456c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004558:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004564:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004572:	461a      	mov	r2, r3
 8004574:	2300      	movs	r3, #0
 8004576:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004578:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800457c:	2b01      	cmp	r3, #1
 800457e:	d10d      	bne.n	800459c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004580:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004584:	2b00      	cmp	r3, #0
 8004586:	d104      	bne.n	8004592 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004588:	2100      	movs	r1, #0
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f968 	bl	8004860 <USB_SetDevSpeed>
 8004590:	e008      	b.n	80045a4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004592:	2101      	movs	r1, #1
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f963 	bl	8004860 <USB_SetDevSpeed>
 800459a:	e003      	b.n	80045a4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800459c:	2103      	movs	r1, #3
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f95e 	bl	8004860 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80045a4:	2110      	movs	r1, #16
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f8fa 	bl	80047a0 <USB_FlushTxFifo>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f924 	bl	8004804 <USB_FlushRxFifo>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045cc:	461a      	mov	r2, r3
 80045ce:	2300      	movs	r3, #0
 80045d0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045d8:	461a      	mov	r2, r3
 80045da:	2300      	movs	r3, #0
 80045dc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045e4:	461a      	mov	r2, r3
 80045e6:	2300      	movs	r3, #0
 80045e8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045ea:	2300      	movs	r3, #0
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	e043      	b.n	8004678 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004602:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004606:	d118      	bne.n	800463a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10a      	bne.n	8004624 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800461a:	461a      	mov	r2, r3
 800461c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	e013      	b.n	800464c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004630:	461a      	mov	r2, r3
 8004632:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004636:	6013      	str	r3, [r2, #0]
 8004638:	e008      	b.n	800464c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004646:	461a      	mov	r2, r3
 8004648:	2300      	movs	r3, #0
 800464a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4413      	add	r3, r2
 8004654:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004658:	461a      	mov	r2, r3
 800465a:	2300      	movs	r3, #0
 800465c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800466a:	461a      	mov	r2, r3
 800466c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004670:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	3301      	adds	r3, #1
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800467c:	461a      	mov	r2, r3
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	4293      	cmp	r3, r2
 8004682:	d3b5      	bcc.n	80045f0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004684:	2300      	movs	r3, #0
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	e043      	b.n	8004712 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800469c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046a0:	d118      	bne.n	80046d4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10a      	bne.n	80046be <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046b4:	461a      	mov	r2, r3
 80046b6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	e013      	b.n	80046e6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ca:	461a      	mov	r2, r3
 80046cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	e008      	b.n	80046e6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046e0:	461a      	mov	r2, r3
 80046e2:	2300      	movs	r3, #0
 80046e4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046f2:	461a      	mov	r2, r3
 80046f4:	2300      	movs	r3, #0
 80046f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004704:	461a      	mov	r2, r3
 8004706:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800470a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	3301      	adds	r3, #1
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004716:	461a      	mov	r2, r3
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	4293      	cmp	r3, r2
 800471c:	d3b5      	bcc.n	800468a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800472c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004730:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800473e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004740:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004744:	2b00      	cmp	r3, #0
 8004746:	d105      	bne.n	8004754 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	f043 0210 	orr.w	r2, r3, #16
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	699a      	ldr	r2, [r3, #24]
 8004758:	4b10      	ldr	r3, [pc, #64]	@ (800479c <USB_DevInit+0x2c4>)
 800475a:	4313      	orrs	r3, r2
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004760:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004764:	2b00      	cmp	r3, #0
 8004766:	d005      	beq.n	8004774 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	f043 0208 	orr.w	r2, r3, #8
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004774:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004778:	2b01      	cmp	r3, #1
 800477a:	d107      	bne.n	800478c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004784:	f043 0304 	orr.w	r3, r3, #4
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800478c:	7dfb      	ldrb	r3, [r7, #23]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3718      	adds	r7, #24
 8004792:	46bd      	mov	sp, r7
 8004794:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004798:	b004      	add	sp, #16
 800479a:	4770      	bx	lr
 800479c:	803c3800 	.word	0x803c3800

080047a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	3301      	adds	r3, #1
 80047b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047ba:	d901      	bls.n	80047c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e01b      	b.n	80047f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	daf2      	bge.n	80047ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	019b      	lsls	r3, r3, #6
 80047d0:	f043 0220 	orr.w	r2, r3, #32
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3301      	adds	r3, #1
 80047dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047e4:	d901      	bls.n	80047ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e006      	b.n	80047f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	2b20      	cmp	r3, #32
 80047f4:	d0f0      	beq.n	80047d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	3301      	adds	r3, #1
 8004814:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800481c:	d901      	bls.n	8004822 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e018      	b.n	8004854 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	2b00      	cmp	r3, #0
 8004828:	daf2      	bge.n	8004810 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2210      	movs	r2, #16
 8004832:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	3301      	adds	r3, #1
 8004838:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004840:	d901      	bls.n	8004846 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e006      	b.n	8004854 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f003 0310 	and.w	r3, r3, #16
 800484e:	2b10      	cmp	r3, #16
 8004850:	d0f0      	beq.n	8004834 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	460b      	mov	r3, r1
 800486a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	68f9      	ldr	r1, [r7, #12]
 800487c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004880:	4313      	orrs	r3, r2
 8004882:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004892:	b480      	push	{r7}
 8004894:	b087      	sub	sp, #28
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 0306 	and.w	r3, r3, #6
 80048aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d102      	bne.n	80048b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80048b2:	2300      	movs	r3, #0
 80048b4:	75fb      	strb	r3, [r7, #23]
 80048b6:	e00a      	b.n	80048ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d002      	beq.n	80048c4 <USB_GetDevSpeed+0x32>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2b06      	cmp	r3, #6
 80048c2:	d102      	bne.n	80048ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80048c4:	2302      	movs	r3, #2
 80048c6:	75fb      	strb	r3, [r7, #23]
 80048c8:	e001      	b.n	80048ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80048ca:	230f      	movs	r3, #15
 80048cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80048ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	371c      	adds	r7, #28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	785b      	ldrb	r3, [r3, #1]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d13a      	bne.n	800496e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048fe:	69da      	ldr	r2, [r3, #28]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	f003 030f 	and.w	r3, r3, #15
 8004908:	2101      	movs	r1, #1
 800490a:	fa01 f303 	lsl.w	r3, r1, r3
 800490e:	b29b      	uxth	r3, r3
 8004910:	68f9      	ldr	r1, [r7, #12]
 8004912:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004916:	4313      	orrs	r3, r2
 8004918:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4413      	add	r3, r2
 8004922:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d155      	bne.n	80049dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4413      	add	r3, r2
 8004938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	791b      	ldrb	r3, [r3, #4]
 800494a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800494c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	059b      	lsls	r3, r3, #22
 8004952:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004954:	4313      	orrs	r3, r2
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	0151      	lsls	r1, r2, #5
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	440a      	add	r2, r1
 800495e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004962:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004966:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800496a:	6013      	str	r3, [r2, #0]
 800496c:	e036      	b.n	80049dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004974:	69da      	ldr	r2, [r3, #28]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	2101      	movs	r1, #1
 8004980:	fa01 f303 	lsl.w	r3, r1, r3
 8004984:	041b      	lsls	r3, r3, #16
 8004986:	68f9      	ldr	r1, [r7, #12]
 8004988:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800498c:	4313      	orrs	r3, r2
 800498e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	4413      	add	r3, r2
 8004998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d11a      	bne.n	80049dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	791b      	ldrb	r3, [r3, #4]
 80049c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80049c2:	430b      	orrs	r3, r1
 80049c4:	4313      	orrs	r3, r2
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	0151      	lsls	r1, r2, #5
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	440a      	add	r2, r1
 80049ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
	...

080049ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	785b      	ldrb	r3, [r3, #1]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d161      	bne.n	8004acc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	015a      	lsls	r2, r3, #5
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a1e:	d11f      	bne.n	8004a60 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	015a      	lsls	r2, r3, #5
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	0151      	lsls	r1, r2, #5
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	440a      	add	r2, r1
 8004a36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a3a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a3e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	0151      	lsls	r1, r2, #5
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	440a      	add	r2, r1
 8004a56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a5a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	f003 030f 	and.w	r3, r3, #15
 8004a70:	2101      	movs	r1, #1
 8004a72:	fa01 f303 	lsl.w	r3, r1, r3
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	43db      	mvns	r3, r3
 8004a7a:	68f9      	ldr	r1, [r7, #12]
 8004a7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a80:	4013      	ands	r3, r2
 8004a82:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a8a:	69da      	ldr	r2, [r3, #28]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	f003 030f 	and.w	r3, r3, #15
 8004a94:	2101      	movs	r1, #1
 8004a96:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	68f9      	ldr	r1, [r7, #12]
 8004aa0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	0159      	lsls	r1, r3, #5
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	440b      	add	r3, r1
 8004abe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	4b35      	ldr	r3, [pc, #212]	@ (8004b9c <USB_DeactivateEndpoint+0x1b0>)
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	600b      	str	r3, [r1, #0]
 8004aca:	e060      	b.n	8004b8e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ade:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ae2:	d11f      	bne.n	8004b24 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	0151      	lsls	r1, r2, #5
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	440a      	add	r2, r1
 8004afa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004afe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004b02:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	0151      	lsls	r1, r2, #5
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	440a      	add	r2, r1
 8004b1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	f003 030f 	and.w	r3, r3, #15
 8004b34:	2101      	movs	r1, #1
 8004b36:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3a:	041b      	lsls	r3, r3, #16
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	68f9      	ldr	r1, [r7, #12]
 8004b40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b44:	4013      	ands	r3, r2
 8004b46:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b4e:	69da      	ldr	r2, [r3, #28]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	f003 030f 	and.w	r3, r3, #15
 8004b58:	2101      	movs	r1, #1
 8004b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b5e:	041b      	lsls	r3, r3, #16
 8004b60:	43db      	mvns	r3, r3
 8004b62:	68f9      	ldr	r1, [r7, #12]
 8004b64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b68:	4013      	ands	r3, r2
 8004b6a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	0159      	lsls	r1, r3, #5
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	440b      	add	r3, r1
 8004b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b86:	4619      	mov	r1, r3
 8004b88:	4b05      	ldr	r3, [pc, #20]	@ (8004ba0 <USB_DeactivateEndpoint+0x1b4>)
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	ec337800 	.word	0xec337800
 8004ba0:	eff37800 	.word	0xeff37800

08004ba4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b08a      	sub	sp, #40	@ 0x28
 8004ba8:	af02      	add	r7, sp, #8
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	785b      	ldrb	r3, [r3, #1]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	f040 817f 	bne.w	8004ec4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d132      	bne.n	8004c34 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	015a      	lsls	r2, r3, #5
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	0151      	lsls	r1, r2, #5
 8004be0:	69fa      	ldr	r2, [r7, #28]
 8004be2:	440a      	add	r2, r1
 8004be4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004be8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004bec:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004bf0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	015a      	lsls	r2, r3, #5
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	0151      	lsls	r1, r2, #5
 8004c04:	69fa      	ldr	r2, [r7, #28]
 8004c06:	440a      	add	r2, r1
 8004c08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	0151      	lsls	r1, r2, #5
 8004c24:	69fa      	ldr	r2, [r7, #28]
 8004c26:	440a      	add	r2, r1
 8004c28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c2c:	0cdb      	lsrs	r3, r3, #19
 8004c2e:	04db      	lsls	r3, r3, #19
 8004c30:	6113      	str	r3, [r2, #16]
 8004c32:	e097      	b.n	8004d64 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	0151      	lsls	r1, r2, #5
 8004c46:	69fa      	ldr	r2, [r7, #28]
 8004c48:	440a      	add	r2, r1
 8004c4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c4e:	0cdb      	lsrs	r3, r3, #19
 8004c50:	04db      	lsls	r3, r3, #19
 8004c52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	0151      	lsls	r1, r2, #5
 8004c66:	69fa      	ldr	r2, [r7, #28]
 8004c68:	440a      	add	r2, r1
 8004c6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c6e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004c72:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004c76:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d11a      	bne.n	8004cb4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	691a      	ldr	r2, [r3, #16]
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d903      	bls.n	8004c92 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	0151      	lsls	r1, r2, #5
 8004ca4:	69fa      	ldr	r2, [r7, #28]
 8004ca6:	440a      	add	r2, r1
 8004ca8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004cb0:	6113      	str	r3, [r2, #16]
 8004cb2:	e044      	b.n	8004d3e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	691a      	ldr	r2, [r3, #16]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	1e5a      	subs	r2, r3, #1
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cd6:	691a      	ldr	r2, [r3, #16]
 8004cd8:	8afb      	ldrh	r3, [r7, #22]
 8004cda:	04d9      	lsls	r1, r3, #19
 8004cdc:	4ba4      	ldr	r3, [pc, #656]	@ (8004f70 <USB_EPStartXfer+0x3cc>)
 8004cde:	400b      	ands	r3, r1
 8004ce0:	69b9      	ldr	r1, [r7, #24]
 8004ce2:	0148      	lsls	r0, r1, #5
 8004ce4:	69f9      	ldr	r1, [r7, #28]
 8004ce6:	4401      	add	r1, r0
 8004ce8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004cec:	4313      	orrs	r3, r2
 8004cee:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	791b      	ldrb	r3, [r3, #4]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d122      	bne.n	8004d3e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	0151      	lsls	r1, r2, #5
 8004d0a:	69fa      	ldr	r2, [r7, #28]
 8004d0c:	440a      	add	r2, r1
 8004d0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d12:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004d16:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d24:	691a      	ldr	r2, [r3, #16]
 8004d26:	8afb      	ldrh	r3, [r7, #22]
 8004d28:	075b      	lsls	r3, r3, #29
 8004d2a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004d2e:	69b9      	ldr	r1, [r7, #24]
 8004d30:	0148      	lsls	r0, r1, #5
 8004d32:	69f9      	ldr	r1, [r7, #28]
 8004d34:	4401      	add	r1, r0
 8004d36:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d4a:	691a      	ldr	r2, [r3, #16]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d54:	69b9      	ldr	r1, [r7, #24]
 8004d56:	0148      	lsls	r0, r1, #5
 8004d58:	69f9      	ldr	r1, [r7, #28]
 8004d5a:	4401      	add	r1, r0
 8004d5c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004d60:	4313      	orrs	r3, r2
 8004d62:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d64:	79fb      	ldrb	r3, [r7, #7]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d14b      	bne.n	8004e02 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d009      	beq.n	8004d86 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d7e:	461a      	mov	r2, r3
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	791b      	ldrb	r3, [r3, #4]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d128      	bne.n	8004de0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d110      	bne.n	8004dc0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	0151      	lsls	r1, r2, #5
 8004db0:	69fa      	ldr	r2, [r7, #28]
 8004db2:	440a      	add	r2, r1
 8004db4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004db8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	e00f      	b.n	8004de0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	0151      	lsls	r1, r2, #5
 8004dd2:	69fa      	ldr	r2, [r7, #28]
 8004dd4:	440a      	add	r2, r1
 8004dd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dde:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	0151      	lsls	r1, r2, #5
 8004df2:	69fa      	ldr	r2, [r7, #28]
 8004df4:	440a      	add	r2, r1
 8004df6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dfa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004dfe:	6013      	str	r3, [r2, #0]
 8004e00:	e166      	b.n	80050d0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	0151      	lsls	r1, r2, #5
 8004e14:	69fa      	ldr	r2, [r7, #28]
 8004e16:	440a      	add	r2, r1
 8004e18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e1c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004e20:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	791b      	ldrb	r3, [r3, #4]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d015      	beq.n	8004e56 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 814e 	beq.w	80050d0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	f003 030f 	and.w	r3, r3, #15
 8004e44:	2101      	movs	r1, #1
 8004e46:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4a:	69f9      	ldr	r1, [r7, #28]
 8004e4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e50:	4313      	orrs	r3, r2
 8004e52:	634b      	str	r3, [r1, #52]	@ 0x34
 8004e54:	e13c      	b.n	80050d0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d110      	bne.n	8004e88 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	0151      	lsls	r1, r2, #5
 8004e78:	69fa      	ldr	r2, [r7, #28]
 8004e7a:	440a      	add	r2, r1
 8004e7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004e84:	6013      	str	r3, [r2, #0]
 8004e86:	e00f      	b.n	8004ea8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	0151      	lsls	r1, r2, #5
 8004e9a:	69fa      	ldr	r2, [r7, #28]
 8004e9c:	440a      	add	r2, r1
 8004e9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ea2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ea6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	68d9      	ldr	r1, [r3, #12]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	781a      	ldrb	r2, [r3, #0]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	b298      	uxth	r0, r3
 8004eb6:	79fb      	ldrb	r3, [r7, #7]
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	4603      	mov	r3, r0
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f000 f9b9 	bl	8005234 <USB_WritePacket>
 8004ec2:	e105      	b.n	80050d0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	0151      	lsls	r1, r2, #5
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	440a      	add	r2, r1
 8004eda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ede:	0cdb      	lsrs	r3, r3, #19
 8004ee0:	04db      	lsls	r3, r3, #19
 8004ee2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	0151      	lsls	r1, r2, #5
 8004ef6:	69fa      	ldr	r2, [r7, #28]
 8004ef8:	440a      	add	r2, r1
 8004efa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004efe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004f02:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004f06:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d132      	bne.n	8004f74 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	689a      	ldr	r2, [r3, #8]
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	689a      	ldr	r2, [r3, #8]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f32:	691a      	ldr	r2, [r3, #16]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f3c:	69b9      	ldr	r1, [r7, #24]
 8004f3e:	0148      	lsls	r0, r1, #5
 8004f40:	69f9      	ldr	r1, [r7, #28]
 8004f42:	4401      	add	r1, r0
 8004f44:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	0151      	lsls	r1, r2, #5
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	440a      	add	r2, r1
 8004f62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f66:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f6a:	6113      	str	r3, [r2, #16]
 8004f6c:	e062      	b.n	8005034 <USB_EPStartXfer+0x490>
 8004f6e:	bf00      	nop
 8004f70:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d123      	bne.n	8004fc4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f88:	691a      	ldr	r2, [r3, #16]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f92:	69b9      	ldr	r1, [r7, #24]
 8004f94:	0148      	lsls	r0, r1, #5
 8004f96:	69f9      	ldr	r1, [r7, #28]
 8004f98:	4401      	add	r1, r0
 8004f9a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	0151      	lsls	r1, r2, #5
 8004fb4:	69fa      	ldr	r2, [r7, #28]
 8004fb6:	440a      	add	r2, r1
 8004fb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004fbc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004fc0:	6113      	str	r3, [r2, #16]
 8004fc2:	e037      	b.n	8005034 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	691a      	ldr	r2, [r3, #16]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	4413      	add	r3, r2
 8004fce:	1e5a      	subs	r2, r3, #1
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	8afa      	ldrh	r2, [r7, #22]
 8004fe0:	fb03 f202 	mul.w	r2, r3, r2
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ff4:	691a      	ldr	r2, [r3, #16]
 8004ff6:	8afb      	ldrh	r3, [r7, #22]
 8004ff8:	04d9      	lsls	r1, r3, #19
 8004ffa:	4b38      	ldr	r3, [pc, #224]	@ (80050dc <USB_EPStartXfer+0x538>)
 8004ffc:	400b      	ands	r3, r1
 8004ffe:	69b9      	ldr	r1, [r7, #24]
 8005000:	0148      	lsls	r0, r1, #5
 8005002:	69f9      	ldr	r1, [r7, #28]
 8005004:	4401      	add	r1, r0
 8005006:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800500a:	4313      	orrs	r3, r2
 800500c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	4413      	add	r3, r2
 8005016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005024:	69b9      	ldr	r1, [r7, #24]
 8005026:	0148      	lsls	r0, r1, #5
 8005028:	69f9      	ldr	r1, [r7, #28]
 800502a:	4401      	add	r1, r0
 800502c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005030:	4313      	orrs	r3, r2
 8005032:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005034:	79fb      	ldrb	r3, [r7, #7]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d10d      	bne.n	8005056 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d009      	beq.n	8005056 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	68d9      	ldr	r1, [r3, #12]
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	4413      	add	r3, r2
 800504e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005052:	460a      	mov	r2, r1
 8005054:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	791b      	ldrb	r3, [r3, #4]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d128      	bne.n	80050b0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800506a:	2b00      	cmp	r3, #0
 800506c:	d110      	bne.n	8005090 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	0151      	lsls	r1, r2, #5
 8005080:	69fa      	ldr	r2, [r7, #28]
 8005082:	440a      	add	r2, r1
 8005084:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005088:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	e00f      	b.n	80050b0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	0151      	lsls	r1, r2, #5
 80050a2:	69fa      	ldr	r2, [r7, #28]
 80050a4:	440a      	add	r2, r1
 80050a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	0151      	lsls	r1, r2, #5
 80050c2:	69fa      	ldr	r2, [r7, #28]
 80050c4:	440a      	add	r2, r1
 80050c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050ca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80050ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3720      	adds	r7, #32
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	1ff80000 	.word	0x1ff80000

080050e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	785b      	ldrb	r3, [r3, #1]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d14a      	bne.n	8005194 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005112:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005116:	f040 8086 	bne.w	8005226 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	7812      	ldrb	r2, [r2, #0]
 800512e:	0151      	lsls	r1, r2, #5
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	440a      	add	r2, r1
 8005134:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005138:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800513c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	4413      	add	r3, r2
 8005148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	7812      	ldrb	r2, [r2, #0]
 8005152:	0151      	lsls	r1, r2, #5
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	440a      	add	r2, r1
 8005158:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800515c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005160:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	3301      	adds	r3, #1
 8005166:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800516e:	4293      	cmp	r3, r2
 8005170:	d902      	bls.n	8005178 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	75fb      	strb	r3, [r7, #23]
          break;
 8005176:	e056      	b.n	8005226 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	4413      	add	r3, r2
 8005182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800518c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005190:	d0e7      	beq.n	8005162 <USB_EPStopXfer+0x82>
 8005192:	e048      	b.n	8005226 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	4413      	add	r3, r2
 800519e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051ac:	d13b      	bne.n	8005226 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	7812      	ldrb	r2, [r2, #0]
 80051c2:	0151      	lsls	r1, r2, #5
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	440a      	add	r2, r1
 80051c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80051d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	7812      	ldrb	r2, [r2, #0]
 80051e6:	0151      	lsls	r1, r2, #5
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	440a      	add	r2, r1
 80051ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80051f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3301      	adds	r3, #1
 80051fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005202:	4293      	cmp	r3, r2
 8005204:	d902      	bls.n	800520c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	75fb      	strb	r3, [r7, #23]
          break;
 800520a:	e00c      	b.n	8005226 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005220:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005224:	d0e7      	beq.n	80051f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005226:	7dfb      	ldrb	r3, [r7, #23]
}
 8005228:	4618      	mov	r0, r3
 800522a:	371c      	adds	r7, #28
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005234:	b480      	push	{r7}
 8005236:	b089      	sub	sp, #36	@ 0x24
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	4611      	mov	r1, r2
 8005240:	461a      	mov	r2, r3
 8005242:	460b      	mov	r3, r1
 8005244:	71fb      	strb	r3, [r7, #7]
 8005246:	4613      	mov	r3, r2
 8005248:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005252:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005256:	2b00      	cmp	r3, #0
 8005258:	d123      	bne.n	80052a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800525a:	88bb      	ldrh	r3, [r7, #4]
 800525c:	3303      	adds	r3, #3
 800525e:	089b      	lsrs	r3, r3, #2
 8005260:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005262:	2300      	movs	r3, #0
 8005264:	61bb      	str	r3, [r7, #24]
 8005266:	e018      	b.n	800529a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005268:	79fb      	ldrb	r3, [r7, #7]
 800526a:	031a      	lsls	r2, r3, #12
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	4413      	add	r3, r2
 8005270:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005274:	461a      	mov	r2, r3
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	3301      	adds	r3, #1
 8005280:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	3301      	adds	r3, #1
 8005286:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	3301      	adds	r3, #1
 800528c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	3301      	adds	r3, #1
 8005292:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	3301      	adds	r3, #1
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d3e2      	bcc.n	8005268 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3724      	adds	r7, #36	@ 0x24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b08b      	sub	sp, #44	@ 0x2c
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	4613      	mov	r3, r2
 80052bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80052c6:	88fb      	ldrh	r3, [r7, #6]
 80052c8:	089b      	lsrs	r3, r3, #2
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80052ce:	88fb      	ldrh	r3, [r7, #6]
 80052d0:	f003 0303 	and.w	r3, r3, #3
 80052d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80052d6:	2300      	movs	r3, #0
 80052d8:	623b      	str	r3, [r7, #32]
 80052da:	e014      	b.n	8005306 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80052e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ea:	3301      	adds	r3, #1
 80052ec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80052ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f0:	3301      	adds	r3, #1
 80052f2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80052f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f6:	3301      	adds	r3, #1
 80052f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	3301      	adds	r3, #1
 80052fe:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	3301      	adds	r3, #1
 8005304:	623b      	str	r3, [r7, #32]
 8005306:	6a3a      	ldr	r2, [r7, #32]
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	429a      	cmp	r2, r3
 800530c:	d3e6      	bcc.n	80052dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800530e:	8bfb      	ldrh	r3, [r7, #30]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d01e      	beq.n	8005352 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800531e:	461a      	mov	r2, r3
 8005320:	f107 0310 	add.w	r3, r7, #16
 8005324:	6812      	ldr	r2, [r2, #0]
 8005326:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	b2db      	uxtb	r3, r3
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	fa22 f303 	lsr.w	r3, r2, r3
 8005334:	b2da      	uxtb	r2, r3
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	701a      	strb	r2, [r3, #0]
      i++;
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	3301      	adds	r3, #1
 800533e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005342:	3301      	adds	r3, #1
 8005344:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005346:	8bfb      	ldrh	r3, [r7, #30]
 8005348:	3b01      	subs	r3, #1
 800534a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800534c:	8bfb      	ldrh	r3, [r7, #30]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1ea      	bne.n	8005328 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005354:	4618      	mov	r0, r3
 8005356:	372c      	adds	r7, #44	@ 0x2c
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	785b      	ldrb	r3, [r3, #1]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d12c      	bne.n	80053d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	db12      	blt.n	80053b4 <USB_EPSetStall+0x54>
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00f      	beq.n	80053b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	0151      	lsls	r1, r2, #5
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	440a      	add	r2, r1
 80053aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80053b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	015a      	lsls	r2, r3, #5
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4413      	add	r3, r2
 80053bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	0151      	lsls	r1, r2, #5
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	440a      	add	r2, r1
 80053ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	e02b      	b.n	800542e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	db12      	blt.n	800540e <USB_EPSetStall+0xae>
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00f      	beq.n	800540e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	0151      	lsls	r1, r2, #5
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	440a      	add	r2, r1
 8005404:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005408:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800540c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	015a      	lsls	r2, r3, #5
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	4413      	add	r3, r2
 8005416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	0151      	lsls	r1, r2, #5
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	440a      	add	r2, r1
 8005424:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005428:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800542c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	785b      	ldrb	r3, [r3, #1]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d128      	bne.n	80054aa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	0151      	lsls	r1, r2, #5
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	440a      	add	r2, r1
 800546e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005472:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005476:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	791b      	ldrb	r3, [r3, #4]
 800547c:	2b03      	cmp	r3, #3
 800547e:	d003      	beq.n	8005488 <USB_EPClearStall+0x4c>
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	791b      	ldrb	r3, [r3, #4]
 8005484:	2b02      	cmp	r3, #2
 8005486:	d138      	bne.n	80054fa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	0151      	lsls	r1, r2, #5
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	440a      	add	r2, r1
 800549e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054a6:	6013      	str	r3, [r2, #0]
 80054a8:	e027      	b.n	80054fa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	0151      	lsls	r1, r2, #5
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	440a      	add	r2, r1
 80054c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054c4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80054c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	791b      	ldrb	r3, [r3, #4]
 80054ce:	2b03      	cmp	r3, #3
 80054d0:	d003      	beq.n	80054da <USB_EPClearStall+0x9e>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	791b      	ldrb	r3, [r3, #4]
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d10f      	bne.n	80054fa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	0151      	lsls	r1, r2, #5
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	440a      	add	r2, r1
 80054f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054f8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	460b      	mov	r3, r1
 8005512:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005526:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800552a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	78fb      	ldrb	r3, [r7, #3]
 8005536:	011b      	lsls	r3, r3, #4
 8005538:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800553c:	68f9      	ldr	r1, [r7, #12]
 800553e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005542:	4313      	orrs	r3, r2
 8005544:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800556e:	f023 0303 	bic.w	r3, r3, #3
 8005572:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005582:	f023 0302 	bic.w	r3, r3, #2
 8005586:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005596:	b480      	push	{r7}
 8005598:	b085      	sub	sp, #20
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80055b0:	f023 0303 	bic.w	r3, r3, #3
 80055b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055c4:	f043 0302 	orr.w	r3, r3, #2
 80055c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	68fa      	ldr	r2, [r7, #12]
 80055ec:	4013      	ands	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80055f0:	68fb      	ldr	r3, [r7, #12]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80055fe:	b480      	push	{r7}
 8005600:	b085      	sub	sp, #20
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800561a:	69db      	ldr	r3, [r3, #28]
 800561c:	68ba      	ldr	r2, [r7, #8]
 800561e:	4013      	ands	r3, r2
 8005620:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	0c1b      	lsrs	r3, r3, #16
}
 8005626:	4618      	mov	r0, r3
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005632:	b480      	push	{r7}
 8005634:	b085      	sub	sp, #20
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	4013      	ands	r3, r2
 8005654:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	b29b      	uxth	r3, r3
}
 800565a:	4618      	mov	r0, r3
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005666:	b480      	push	{r7}
 8005668:	b085      	sub	sp, #20
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	460b      	mov	r3, r1
 8005670:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005676:	78fb      	ldrb	r3, [r7, #3]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	4013      	ands	r3, r2
 8005692:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005694:	68bb      	ldr	r3, [r7, #8]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b087      	sub	sp, #28
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	460b      	mov	r3, r1
 80056ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056c4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80056c6:	78fb      	ldrb	r3, [r7, #3]
 80056c8:	f003 030f 	and.w	r3, r3, #15
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	fa22 f303 	lsr.w	r3, r2, r3
 80056d2:	01db      	lsls	r3, r3, #7
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	4313      	orrs	r3, r2
 80056da:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80056dc:	78fb      	ldrb	r3, [r7, #3]
 80056de:	015a      	lsls	r2, r3, #5
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	4413      	add	r3, r2
 80056e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	4013      	ands	r3, r2
 80056ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80056f0:	68bb      	ldr	r3, [r7, #8]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	371c      	adds	r7, #28
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80056fe:	b480      	push	{r7}
 8005700:	b083      	sub	sp, #12
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	f003 0301 	and.w	r3, r3, #1
}
 800570e:	4618      	mov	r0, r3
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr

0800571a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800571a:	b480      	push	{r7}
 800571c:	b085      	sub	sp, #20
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005734:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005738:	f023 0307 	bic.w	r3, r3, #7
 800573c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800574c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005750:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	460b      	mov	r3, r1
 800576a:	607a      	str	r2, [r7, #4]
 800576c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	333c      	adds	r3, #60	@ 0x3c
 8005776:	3304      	adds	r3, #4
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	4a26      	ldr	r2, [pc, #152]	@ (8005818 <USB_EP0_OutStart+0xb8>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d90a      	bls.n	800579a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005790:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005794:	d101      	bne.n	800579a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	e037      	b.n	800580a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057a0:	461a      	mov	r2, r3
 80057a2:	2300      	movs	r3, #0
 80057a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80057b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057c8:	f043 0318 	orr.w	r3, r3, #24
 80057cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057dc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80057e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80057e2:	7afb      	ldrb	r3, [r7, #11]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d10f      	bne.n	8005808 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ee:	461a      	mov	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005802:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005806:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	371c      	adds	r7, #28
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	4f54300a 	.word	0x4f54300a

0800581c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	3301      	adds	r3, #1
 800582c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005834:	d901      	bls.n	800583a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e022      	b.n	8005880 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	2b00      	cmp	r3, #0
 8005840:	daf2      	bge.n	8005828 <USB_CoreReset+0xc>

  count = 10U;
 8005842:	230a      	movs	r3, #10
 8005844:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005846:	e002      	b.n	800584e <USB_CoreReset+0x32>
  {
    count--;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	3b01      	subs	r3, #1
 800584c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1f9      	bne.n	8005848 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	f043 0201 	orr.w	r2, r3, #1
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3301      	adds	r3, #1
 8005864:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800586c:	d901      	bls.n	8005872 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e006      	b.n	8005880 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b01      	cmp	r3, #1
 800587c:	d0f0      	beq.n	8005860 <USB_CoreReset+0x44>

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	460b      	mov	r3, r1
 8005896:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005898:	2010      	movs	r0, #16
 800589a:	f002 f939 	bl	8007b10 <USBD_static_malloc>
 800589e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d109      	bne.n	80058ba <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	32b0      	adds	r2, #176	@ 0xb0
 80058b0:	2100      	movs	r1, #0
 80058b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80058b6:	2302      	movs	r3, #2
 80058b8:	e048      	b.n	800594c <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	32b0      	adds	r2, #176	@ 0xb0
 80058c4:	68f9      	ldr	r1, [r7, #12]
 80058c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	32b0      	adds	r2, #176	@ 0xb0
 80058d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	7c1b      	ldrb	r3, [r3, #16]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10d      	bne.n	8005902 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80058e6:	4b1b      	ldr	r3, [pc, #108]	@ (8005954 <USBD_HID_Init+0xc8>)
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	f003 020f 	and.w	r2, r3, #15
 80058ee:	6879      	ldr	r1, [r7, #4]
 80058f0:	4613      	mov	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4413      	add	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	440b      	add	r3, r1
 80058fa:	331c      	adds	r3, #28
 80058fc:	2207      	movs	r2, #7
 80058fe:	601a      	str	r2, [r3, #0]
 8005900:	e00c      	b.n	800591c <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005902:	4b14      	ldr	r3, [pc, #80]	@ (8005954 <USBD_HID_Init+0xc8>)
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	f003 020f 	and.w	r2, r3, #15
 800590a:	6879      	ldr	r1, [r7, #4]
 800590c:	4613      	mov	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	440b      	add	r3, r1
 8005916:	331c      	adds	r3, #28
 8005918:	220a      	movs	r2, #10
 800591a:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800591c:	4b0d      	ldr	r3, [pc, #52]	@ (8005954 <USBD_HID_Init+0xc8>)
 800591e:	7819      	ldrb	r1, [r3, #0]
 8005920:	230b      	movs	r3, #11
 8005922:	2203      	movs	r2, #3
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f001 ffe2 	bl	80078ee <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800592a:	4b0a      	ldr	r3, [pc, #40]	@ (8005954 <USBD_HID_Init+0xc8>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	f003 020f 	and.w	r2, r3, #15
 8005932:	6879      	ldr	r1, [r7, #4]
 8005934:	4613      	mov	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	440b      	add	r3, r1
 800593e:	3323      	adds	r3, #35	@ 0x23
 8005940:	2201      	movs	r2, #1
 8005942:	701a      	strb	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	200000c8 	.word	0x200000c8

08005958 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	460b      	mov	r3, r1
 8005962:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8005964:	4b1f      	ldr	r3, [pc, #124]	@ (80059e4 <USBD_HID_DeInit+0x8c>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	4619      	mov	r1, r3
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f001 ffe5 	bl	800793a <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005970:	4b1c      	ldr	r3, [pc, #112]	@ (80059e4 <USBD_HID_DeInit+0x8c>)
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	f003 020f 	and.w	r2, r3, #15
 8005978:	6879      	ldr	r1, [r7, #4]
 800597a:	4613      	mov	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	440b      	add	r3, r1
 8005984:	3323      	adds	r3, #35	@ 0x23
 8005986:	2200      	movs	r2, #0
 8005988:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800598a:	4b16      	ldr	r3, [pc, #88]	@ (80059e4 <USBD_HID_DeInit+0x8c>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	f003 020f 	and.w	r2, r3, #15
 8005992:	6879      	ldr	r1, [r7, #4]
 8005994:	4613      	mov	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	440b      	add	r3, r1
 800599e:	331c      	adds	r3, #28
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	32b0      	adds	r2, #176	@ 0xb0
 80059ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d011      	beq.n	80059da <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	32b0      	adds	r2, #176	@ 0xb0
 80059c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f002 f8b1 	bl	8007b2c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	32b0      	adds	r2, #176	@ 0xb0
 80059d4:	2100      	movs	r1, #0
 80059d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	200000c8 	.word	0x200000c8

080059e8 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	32b0      	adds	r2, #176	@ 0xb0
 80059fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a00:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a02:	2300      	movs	r3, #0
 8005a04:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005a06:	2300      	movs	r3, #0
 8005a08:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d101      	bne.n	8005a14 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e0e8      	b.n	8005be6 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d046      	beq.n	8005aae <USBD_HID_Setup+0xc6>
 8005a20:	2b20      	cmp	r3, #32
 8005a22:	f040 80d8 	bne.w	8005bd6 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	785b      	ldrb	r3, [r3, #1]
 8005a2a:	3b02      	subs	r3, #2
 8005a2c:	2b09      	cmp	r3, #9
 8005a2e:	d836      	bhi.n	8005a9e <USBD_HID_Setup+0xb6>
 8005a30:	a201      	add	r2, pc, #4	@ (adr r2, 8005a38 <USBD_HID_Setup+0x50>)
 8005a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a36:	bf00      	nop
 8005a38:	08005a8f 	.word	0x08005a8f
 8005a3c:	08005a6f 	.word	0x08005a6f
 8005a40:	08005a9f 	.word	0x08005a9f
 8005a44:	08005a9f 	.word	0x08005a9f
 8005a48:	08005a9f 	.word	0x08005a9f
 8005a4c:	08005a9f 	.word	0x08005a9f
 8005a50:	08005a9f 	.word	0x08005a9f
 8005a54:	08005a9f 	.word	0x08005a9f
 8005a58:	08005a7d 	.word	0x08005a7d
 8005a5c:	08005a61 	.word	0x08005a61
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	885b      	ldrh	r3, [r3, #2]
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	461a      	mov	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	601a      	str	r2, [r3, #0]
          break;
 8005a6c:	e01e      	b.n	8005aac <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2201      	movs	r2, #1
 8005a72:	4619      	mov	r1, r3
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f001 fbfb 	bl	8007270 <USBD_CtlSendData>
          break;
 8005a7a:	e017      	b.n	8005aac <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	885b      	ldrh	r3, [r3, #2]
 8005a80:	0a1b      	lsrs	r3, r3, #8
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	461a      	mov	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	605a      	str	r2, [r3, #4]
          break;
 8005a8c:	e00e      	b.n	8005aac <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	3304      	adds	r3, #4
 8005a92:	2201      	movs	r2, #1
 8005a94:	4619      	mov	r1, r3
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f001 fbea 	bl	8007270 <USBD_CtlSendData>
          break;
 8005a9c:	e006      	b.n	8005aac <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005a9e:	6839      	ldr	r1, [r7, #0]
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f001 fb68 	bl	8007176 <USBD_CtlError>
          ret = USBD_FAIL;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	75fb      	strb	r3, [r7, #23]
          break;
 8005aaa:	bf00      	nop
      }
      break;
 8005aac:	e09a      	b.n	8005be4 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	785b      	ldrb	r3, [r3, #1]
 8005ab2:	2b0b      	cmp	r3, #11
 8005ab4:	f200 8086 	bhi.w	8005bc4 <USBD_HID_Setup+0x1dc>
 8005ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac0 <USBD_HID_Setup+0xd8>)
 8005aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005abe:	bf00      	nop
 8005ac0:	08005af1 	.word	0x08005af1
 8005ac4:	08005bd3 	.word	0x08005bd3
 8005ac8:	08005bc5 	.word	0x08005bc5
 8005acc:	08005bc5 	.word	0x08005bc5
 8005ad0:	08005bc5 	.word	0x08005bc5
 8005ad4:	08005bc5 	.word	0x08005bc5
 8005ad8:	08005b1b 	.word	0x08005b1b
 8005adc:	08005bc5 	.word	0x08005bc5
 8005ae0:	08005bc5 	.word	0x08005bc5
 8005ae4:	08005bc5 	.word	0x08005bc5
 8005ae8:	08005b73 	.word	0x08005b73
 8005aec:	08005b9d 	.word	0x08005b9d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	d107      	bne.n	8005b0c <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005afc:	f107 030a 	add.w	r3, r7, #10
 8005b00:	2202      	movs	r2, #2
 8005b02:	4619      	mov	r1, r3
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f001 fbb3 	bl	8007270 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b0a:	e063      	b.n	8005bd4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005b0c:	6839      	ldr	r1, [r7, #0]
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f001 fb31 	bl	8007176 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b14:	2303      	movs	r3, #3
 8005b16:	75fb      	strb	r3, [r7, #23]
          break;
 8005b18:	e05c      	b.n	8005bd4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	885b      	ldrh	r3, [r3, #2]
 8005b1e:	0a1b      	lsrs	r3, r3, #8
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	2b22      	cmp	r3, #34	@ 0x22
 8005b24:	d108      	bne.n	8005b38 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	88db      	ldrh	r3, [r3, #6]
 8005b2a:	2b48      	cmp	r3, #72	@ 0x48
 8005b2c:	bf28      	it	cs
 8005b2e:	2348      	movcs	r3, #72	@ 0x48
 8005b30:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8005b32:	4b2f      	ldr	r3, [pc, #188]	@ (8005bf0 <USBD_HID_Setup+0x208>)
 8005b34:	613b      	str	r3, [r7, #16]
 8005b36:	e015      	b.n	8005b64 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	885b      	ldrh	r3, [r3, #2]
 8005b3c:	0a1b      	lsrs	r3, r3, #8
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	2b21      	cmp	r3, #33	@ 0x21
 8005b42:	d108      	bne.n	8005b56 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005b44:	4b2b      	ldr	r3, [pc, #172]	@ (8005bf4 <USBD_HID_Setup+0x20c>)
 8005b46:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	88db      	ldrh	r3, [r3, #6]
 8005b4c:	2b09      	cmp	r3, #9
 8005b4e:	bf28      	it	cs
 8005b50:	2309      	movcs	r3, #9
 8005b52:	82bb      	strh	r3, [r7, #20]
 8005b54:	e006      	b.n	8005b64 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005b56:	6839      	ldr	r1, [r7, #0]
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f001 fb0c 	bl	8007176 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	75fb      	strb	r3, [r7, #23]
            break;
 8005b62:	e037      	b.n	8005bd4 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005b64:	8abb      	ldrh	r3, [r7, #20]
 8005b66:	461a      	mov	r2, r3
 8005b68:	6939      	ldr	r1, [r7, #16]
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f001 fb80 	bl	8007270 <USBD_CtlSendData>
          break;
 8005b70:	e030      	b.n	8005bd4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b03      	cmp	r3, #3
 8005b7c:	d107      	bne.n	8005b8e <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	3308      	adds	r3, #8
 8005b82:	2201      	movs	r2, #1
 8005b84:	4619      	mov	r1, r3
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f001 fb72 	bl	8007270 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b8c:	e022      	b.n	8005bd4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005b8e:	6839      	ldr	r1, [r7, #0]
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f001 faf0 	bl	8007176 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b96:	2303      	movs	r3, #3
 8005b98:	75fb      	strb	r3, [r7, #23]
          break;
 8005b9a:	e01b      	b.n	8005bd4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b03      	cmp	r3, #3
 8005ba6:	d106      	bne.n	8005bb6 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	885b      	ldrh	r3, [r3, #2]
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	461a      	mov	r2, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bb4:	e00e      	b.n	8005bd4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005bb6:	6839      	ldr	r1, [r7, #0]
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f001 fadc 	bl	8007176 <USBD_CtlError>
            ret = USBD_FAIL;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	75fb      	strb	r3, [r7, #23]
          break;
 8005bc2:	e007      	b.n	8005bd4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005bc4:	6839      	ldr	r1, [r7, #0]
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f001 fad5 	bl	8007176 <USBD_CtlError>
          ret = USBD_FAIL;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	75fb      	strb	r3, [r7, #23]
          break;
 8005bd0:	e000      	b.n	8005bd4 <USBD_HID_Setup+0x1ec>
          break;
 8005bd2:	bf00      	nop
      }
      break;
 8005bd4:	e006      	b.n	8005be4 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8005bd6:	6839      	ldr	r1, [r7, #0]
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f001 facc 	bl	8007176 <USBD_CtlError>
      ret = USBD_FAIL;
 8005bde:	2303      	movs	r3, #3
 8005be0:	75fb      	strb	r3, [r7, #23]
      break;
 8005be2:	bf00      	nop
  }

  return (uint8_t)ret;
 8005be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3718      	adds	r7, #24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	20000080 	.word	0x20000080
 8005bf4:	20000068 	.word	0x20000068

08005bf8 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	4613      	mov	r3, r2
 8005c04:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	32b0      	adds	r2, #176	@ 0xb0
 8005c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c14:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d101      	bne.n	8005c20 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	e014      	b.n	8005c4a <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	2b03      	cmp	r3, #3
 8005c2a:	d10d      	bne.n	8005c48 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	7b1b      	ldrb	r3, [r3, #12]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d109      	bne.n	8005c48 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	2201      	movs	r2, #1
 8005c38:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8005c3a:	4b06      	ldr	r3, [pc, #24]	@ (8005c54 <USBD_HID_SendReport+0x5c>)
 8005c3c:	7819      	ldrb	r1, [r3, #0]
 8005c3e:	88fb      	ldrh	r3, [r7, #6]
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f001 ff21 	bl	8007a8a <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3718      	adds	r7, #24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	200000c8 	.word	0x200000c8

08005c58 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005c60:	2181      	movs	r1, #129	@ 0x81
 8005c62:	4809      	ldr	r0, [pc, #36]	@ (8005c88 <USBD_HID_GetFSCfgDesc+0x30>)
 8005c64:	f000 fc4e 	bl	8006504 <USBD_GetEpDesc>
 8005c68:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d002      	beq.n	8005c76 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	220a      	movs	r2, #10
 8005c74:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2222      	movs	r2, #34	@ 0x22
 8005c7a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005c7c:	4b02      	ldr	r3, [pc, #8]	@ (8005c88 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	20000044 	.word	0x20000044

08005c8c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005c94:	2181      	movs	r1, #129	@ 0x81
 8005c96:	4809      	ldr	r0, [pc, #36]	@ (8005cbc <USBD_HID_GetHSCfgDesc+0x30>)
 8005c98:	f000 fc34 	bl	8006504 <USBD_GetEpDesc>
 8005c9c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2207      	movs	r2, #7
 8005ca8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2222      	movs	r2, #34	@ 0x22
 8005cae:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005cb0:	4b02      	ldr	r3, [pc, #8]	@ (8005cbc <USBD_HID_GetHSCfgDesc+0x30>)
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	20000044 	.word	0x20000044

08005cc0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005cc8:	2181      	movs	r1, #129	@ 0x81
 8005cca:	4809      	ldr	r0, [pc, #36]	@ (8005cf0 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005ccc:	f000 fc1a 	bl	8006504 <USBD_GetEpDesc>
 8005cd0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d002      	beq.n	8005cde <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	220a      	movs	r2, #10
 8005cdc:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2222      	movs	r2, #34	@ 0x22
 8005ce2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005ce4:	4b02      	ldr	r3, [pc, #8]	@ (8005cf0 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	20000044 	.word	0x20000044

08005cf4 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	32b0      	adds	r2, #176	@ 0xb0
 8005d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	220a      	movs	r2, #10
 8005d2c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005d2e:	4b03      	ldr	r3, [pc, #12]	@ (8005d3c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr
 8005d3c:	20000074 	.word	0x20000074

08005d40 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d101      	bne.n	8005d58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e01f      	b.n	8005d98 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	79fa      	ldrb	r2, [r7, #7]
 8005d8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f001 fd47 	bl	8007820 <USBD_LL_Init>
 8005d92:	4603      	mov	r3, r0
 8005d94:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005daa:	2300      	movs	r3, #0
 8005dac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005db4:	2303      	movs	r3, #3
 8005db6:	e025      	b.n	8005e04 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	32ae      	adds	r2, #174	@ 0xae
 8005dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00f      	beq.n	8005df4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	32ae      	adds	r2, #174	@ 0xae
 8005dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de4:	f107 020e 	add.w	r2, r7, #14
 8005de8:	4610      	mov	r0, r2
 8005dea:	4798      	blx	r3
 8005dec:	4602      	mov	r2, r0
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f001 fd4f 	bl	80078b8 <USBD_LL_Start>
 8005e1a:	4603      	mov	r3, r0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3708      	adds	r7, #8
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e2c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b084      	sub	sp, #16
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	460b      	mov	r3, r1
 8005e44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d009      	beq.n	8005e68 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	78fa      	ldrb	r2, [r7, #3]
 8005e5e:	4611      	mov	r1, r2
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	4798      	blx	r3
 8005e64:	4603      	mov	r3, r0
 8005e66:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b084      	sub	sp, #16
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	78fa      	ldrb	r2, [r7, #3]
 8005e8c:	4611      	mov	r1, r2
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	4798      	blx	r3
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d001      	beq.n	8005e9c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b084      	sub	sp, #16
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005eb6:	6839      	ldr	r1, [r7, #0]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f001 f922 	bl	8007102 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005ecc:	461a      	mov	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005eda:	f003 031f 	and.w	r3, r3, #31
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d01a      	beq.n	8005f18 <USBD_LL_SetupStage+0x72>
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d822      	bhi.n	8005f2c <USBD_LL_SetupStage+0x86>
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <USBD_LL_SetupStage+0x4a>
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d00a      	beq.n	8005f04 <USBD_LL_SetupStage+0x5e>
 8005eee:	e01d      	b.n	8005f2c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fb77 	bl	80065ec <USBD_StdDevReq>
 8005efe:	4603      	mov	r3, r0
 8005f00:	73fb      	strb	r3, [r7, #15]
      break;
 8005f02:	e020      	b.n	8005f46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fbdf 	bl	80066d0 <USBD_StdItfReq>
 8005f12:	4603      	mov	r3, r0
 8005f14:	73fb      	strb	r3, [r7, #15]
      break;
 8005f16:	e016      	b.n	8005f46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005f1e:	4619      	mov	r1, r3
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 fc41 	bl	80067a8 <USBD_StdEPReq>
 8005f26:	4603      	mov	r3, r0
 8005f28:	73fb      	strb	r3, [r7, #15]
      break;
 8005f2a:	e00c      	b.n	8005f46 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005f32:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	4619      	mov	r1, r3
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f001 fd1c 	bl	8007978 <USBD_LL_StallEP>
 8005f40:	4603      	mov	r3, r0
 8005f42:	73fb      	strb	r3, [r7, #15]
      break;
 8005f44:	bf00      	nop
  }

  return ret;
 8005f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3710      	adds	r7, #16
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	460b      	mov	r3, r1
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8005f62:	7afb      	ldrb	r3, [r7, #11]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d177      	bne.n	8006058 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005f6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005f76:	2b03      	cmp	r3, #3
 8005f78:	f040 80a1 	bne.w	80060be <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	8992      	ldrh	r2, [r2, #12]
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d91c      	bls.n	8005fc2 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	8992      	ldrh	r2, [r2, #12]
 8005f90:	1a9a      	subs	r2, r3, r2
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	8992      	ldrh	r2, [r2, #12]
 8005f9e:	441a      	add	r2, r3
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	6919      	ldr	r1, [r3, #16]
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	899b      	ldrh	r3, [r3, #12]
 8005fac:	461a      	mov	r2, r3
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	bf38      	it	cc
 8005fb6:	4613      	movcc	r3, r2
 8005fb8:	461a      	mov	r2, r3
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f001 f987 	bl	80072ce <USBD_CtlContinueRx>
 8005fc0:	e07d      	b.n	80060be <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005fc8:	f003 031f 	and.w	r3, r3, #31
 8005fcc:	2b02      	cmp	r3, #2
 8005fce:	d014      	beq.n	8005ffa <USBD_LL_DataOutStage+0xaa>
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d81d      	bhi.n	8006010 <USBD_LL_DataOutStage+0xc0>
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <USBD_LL_DataOutStage+0x8e>
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d003      	beq.n	8005fe4 <USBD_LL_DataOutStage+0x94>
 8005fdc:	e018      	b.n	8006010 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	75bb      	strb	r3, [r7, #22]
            break;
 8005fe2:	e018      	b.n	8006016 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	4619      	mov	r1, r3
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 fa6e 	bl	80064d0 <USBD_CoreFindIF>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	75bb      	strb	r3, [r7, #22]
            break;
 8005ff8:	e00d      	b.n	8006016 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006000:	b2db      	uxtb	r3, r3
 8006002:	4619      	mov	r1, r3
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 fa70 	bl	80064ea <USBD_CoreFindEP>
 800600a:	4603      	mov	r3, r0
 800600c:	75bb      	strb	r3, [r7, #22]
            break;
 800600e:	e002      	b.n	8006016 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	75bb      	strb	r3, [r7, #22]
            break;
 8006014:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006016:	7dbb      	ldrb	r3, [r7, #22]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d119      	bne.n	8006050 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b03      	cmp	r3, #3
 8006026:	d113      	bne.n	8006050 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006028:	7dba      	ldrb	r2, [r7, #22]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	32ae      	adds	r2, #174	@ 0xae
 800602e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00b      	beq.n	8006050 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8006038:	7dba      	ldrb	r2, [r7, #22]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006040:	7dba      	ldrb	r2, [r7, #22]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	32ae      	adds	r2, #174	@ 0xae
 8006046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f001 f94d 	bl	80072f0 <USBD_CtlSendStatus>
 8006056:	e032      	b.n	80060be <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006058:	7afb      	ldrb	r3, [r7, #11]
 800605a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800605e:	b2db      	uxtb	r3, r3
 8006060:	4619      	mov	r1, r3
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 fa41 	bl	80064ea <USBD_CoreFindEP>
 8006068:	4603      	mov	r3, r0
 800606a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800606c:	7dbb      	ldrb	r3, [r7, #22]
 800606e:	2bff      	cmp	r3, #255	@ 0xff
 8006070:	d025      	beq.n	80060be <USBD_LL_DataOutStage+0x16e>
 8006072:	7dbb      	ldrb	r3, [r7, #22]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d122      	bne.n	80060be <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b03      	cmp	r3, #3
 8006082:	d117      	bne.n	80060b4 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006084:	7dba      	ldrb	r2, [r7, #22]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	32ae      	adds	r2, #174	@ 0xae
 800608a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d00f      	beq.n	80060b4 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8006094:	7dba      	ldrb	r2, [r7, #22]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800609c:	7dba      	ldrb	r2, [r7, #22]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	32ae      	adds	r2, #174	@ 0xae
 80060a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	7afa      	ldrb	r2, [r7, #11]
 80060aa:	4611      	mov	r1, r2
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	4798      	blx	r3
 80060b0:	4603      	mov	r3, r0
 80060b2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80060b4:	7dfb      	ldrb	r3, [r7, #23]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80060ba:	7dfb      	ldrb	r3, [r7, #23]
 80060bc:	e000      	b.n	80060c0 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	460b      	mov	r3, r1
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80060d6:	7afb      	ldrb	r3, [r7, #11]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d178      	bne.n	80061ce <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	3314      	adds	r3, #20
 80060e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d163      	bne.n	80061b4 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	8992      	ldrh	r2, [r2, #12]
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d91c      	bls.n	8006132 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	8992      	ldrh	r2, [r2, #12]
 8006100:	1a9a      	subs	r2, r3, r2
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	8992      	ldrh	r2, [r2, #12]
 800610e:	441a      	add	r2, r3
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	6919      	ldr	r1, [r3, #16]
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	461a      	mov	r2, r3
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f001 f8c4 	bl	80072ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006124:	2300      	movs	r3, #0
 8006126:	2200      	movs	r2, #0
 8006128:	2100      	movs	r1, #0
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f001 fcce 	bl	8007acc <USBD_LL_PrepareReceive>
 8006130:	e040      	b.n	80061b4 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	899b      	ldrh	r3, [r3, #12]
 8006136:	461a      	mov	r2, r3
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	429a      	cmp	r2, r3
 800613e:	d11c      	bne.n	800617a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006148:	4293      	cmp	r3, r2
 800614a:	d316      	bcc.n	800617a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006156:	429a      	cmp	r2, r3
 8006158:	d20f      	bcs.n	800617a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800615a:	2200      	movs	r2, #0
 800615c:	2100      	movs	r1, #0
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f001 f8a4 	bl	80072ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800616c:	2300      	movs	r3, #0
 800616e:	2200      	movs	r2, #0
 8006170:	2100      	movs	r1, #0
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f001 fcaa 	bl	8007acc <USBD_LL_PrepareReceive>
 8006178:	e01c      	b.n	80061b4 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b03      	cmp	r3, #3
 8006184:	d10f      	bne.n	80061a6 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d009      	beq.n	80061a6 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80061a6:	2180      	movs	r1, #128	@ 0x80
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f001 fbe5 	bl	8007978 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f001 f8b1 	bl	8007316 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d03a      	beq.n	8006234 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f7ff fe30 	bl	8005e24 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80061cc:	e032      	b.n	8006234 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80061ce:	7afb      	ldrb	r3, [r7, #11]
 80061d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	4619      	mov	r1, r3
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 f986 	bl	80064ea <USBD_CoreFindEP>
 80061de:	4603      	mov	r3, r0
 80061e0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80061e2:	7dfb      	ldrb	r3, [r7, #23]
 80061e4:	2bff      	cmp	r3, #255	@ 0xff
 80061e6:	d025      	beq.n	8006234 <USBD_LL_DataInStage+0x16c>
 80061e8:	7dfb      	ldrb	r3, [r7, #23]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d122      	bne.n	8006234 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b03      	cmp	r3, #3
 80061f8:	d11c      	bne.n	8006234 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80061fa:	7dfa      	ldrb	r2, [r7, #23]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	32ae      	adds	r2, #174	@ 0xae
 8006200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d014      	beq.n	8006234 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800620a:	7dfa      	ldrb	r2, [r7, #23]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006212:	7dfa      	ldrb	r2, [r7, #23]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	32ae      	adds	r2, #174	@ 0xae
 8006218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	7afa      	ldrb	r2, [r7, #11]
 8006220:	4611      	mov	r1, r2
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	4798      	blx	r3
 8006226:	4603      	mov	r3, r0
 8006228:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800622a:	7dbb      	ldrb	r3, [r7, #22]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8006230:	7dbb      	ldrb	r3, [r7, #22]
 8006232:	e000      	b.n	8006236 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b084      	sub	sp, #16
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006276:	2b00      	cmp	r3, #0
 8006278:	d014      	beq.n	80062a4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00e      	beq.n	80062a4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	6852      	ldr	r2, [r2, #4]
 8006292:	b2d2      	uxtb	r2, r2
 8006294:	4611      	mov	r1, r2
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	4798      	blx	r3
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80062a0:	2303      	movs	r3, #3
 80062a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062a4:	2340      	movs	r3, #64	@ 0x40
 80062a6:	2200      	movs	r2, #0
 80062a8:	2100      	movs	r1, #0
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f001 fb1f 	bl	80078ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2240      	movs	r2, #64	@ 0x40
 80062bc:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80062c0:	2340      	movs	r3, #64	@ 0x40
 80062c2:	2200      	movs	r2, #0
 80062c4:	2180      	movs	r1, #128	@ 0x80
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f001 fb11 	bl	80078ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2240      	movs	r2, #64	@ 0x40
 80062d8:	841a      	strh	r2, [r3, #32]

  return ret;
 80062da:	7bfb      	ldrb	r3, [r7, #15]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	460b      	mov	r3, r1
 80062ee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	78fa      	ldrb	r2, [r7, #3]
 80062f4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b04      	cmp	r3, #4
 8006316:	d006      	beq.n	8006326 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800631e:	b2da      	uxtb	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2204      	movs	r2, #4
 800632a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b04      	cmp	r3, #4
 800634e:	d106      	bne.n	800635e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006356:	b2da      	uxtb	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b03      	cmp	r3, #3
 800637e:	d110      	bne.n	80063a2 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00b      	beq.n	80063a2 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d005      	beq.n	80063a2 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80063a2:	2300      	movs	r3, #0
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	460b      	mov	r3, r1
 80063b6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	32ae      	adds	r2, #174	@ 0xae
 80063c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e01c      	b.n	8006408 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b03      	cmp	r3, #3
 80063d8:	d115      	bne.n	8006406 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	32ae      	adds	r2, #174	@ 0xae
 80063e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00b      	beq.n	8006406 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	32ae      	adds	r2, #174	@ 0xae
 80063f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	78fa      	ldrb	r2, [r7, #3]
 8006400:	4611      	mov	r1, r2
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3708      	adds	r7, #8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	460b      	mov	r3, r1
 800641a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	32ae      	adds	r2, #174	@ 0xae
 8006426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800642e:	2303      	movs	r3, #3
 8006430:	e01c      	b.n	800646c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b03      	cmp	r3, #3
 800643c:	d115      	bne.n	800646a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	32ae      	adds	r2, #174	@ 0xae
 8006448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800644c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00b      	beq.n	800646a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	32ae      	adds	r2, #174	@ 0xae
 800645c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006462:	78fa      	ldrb	r2, [r7, #3]
 8006464:	4611      	mov	r1, r2
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	4618      	mov	r0, r3
 800646e:	3708      	adds	r7, #8
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b084      	sub	sp, #16
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006492:	2300      	movs	r3, #0
 8006494:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00e      	beq.n	80064c6 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	6852      	ldr	r2, [r2, #4]
 80064b4:	b2d2      	uxtb	r2, r2
 80064b6:	4611      	mov	r1, r2
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	4798      	blx	r3
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80064c2:	2303      	movs	r3, #3
 80064c4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80064c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	460b      	mov	r3, r1
 80064da:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80064dc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80064de:	4618      	mov	r0, r3
 80064e0:	370c      	adds	r7, #12
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b083      	sub	sp, #12
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	460b      	mov	r3, r1
 80064f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80064f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	370c      	adds	r7, #12
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	460b      	mov	r3, r1
 800650e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006518:	2300      	movs	r3, #0
 800651a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	885b      	ldrh	r3, [r3, #2]
 8006520:	b29b      	uxth	r3, r3
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	7812      	ldrb	r2, [r2, #0]
 8006526:	4293      	cmp	r3, r2
 8006528:	d91f      	bls.n	800656a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006530:	e013      	b.n	800655a <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006532:	f107 030a 	add.w	r3, r7, #10
 8006536:	4619      	mov	r1, r3
 8006538:	6978      	ldr	r0, [r7, #20]
 800653a:	f000 f81b 	bl	8006574 <USBD_GetNextDesc>
 800653e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	785b      	ldrb	r3, [r3, #1]
 8006544:	2b05      	cmp	r3, #5
 8006546:	d108      	bne.n	800655a <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	789b      	ldrb	r3, [r3, #2]
 8006550:	78fa      	ldrb	r2, [r7, #3]
 8006552:	429a      	cmp	r2, r3
 8006554:	d008      	beq.n	8006568 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006556:	2300      	movs	r3, #0
 8006558:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	885b      	ldrh	r3, [r3, #2]
 800655e:	b29a      	uxth	r2, r3
 8006560:	897b      	ldrh	r3, [r7, #10]
 8006562:	429a      	cmp	r2, r3
 8006564:	d8e5      	bhi.n	8006532 <USBD_GetEpDesc+0x2e>
 8006566:	e000      	b.n	800656a <USBD_GetEpDesc+0x66>
          break;
 8006568:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800656a:	693b      	ldr	r3, [r7, #16]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3718      	adds	r7, #24
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	7812      	ldrb	r2, [r2, #0]
 800658a:	4413      	add	r3, r2
 800658c:	b29a      	uxth	r2, r3
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	461a      	mov	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4413      	add	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800659e:	68fb      	ldr	r3, [r7, #12]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3714      	adds	r7, #20
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b087      	sub	sp, #28
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	3301      	adds	r3, #1
 80065c2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80065ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80065ce:	021b      	lsls	r3, r3, #8
 80065d0:	b21a      	sxth	r2, r3
 80065d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	b21b      	sxth	r3, r3
 80065da:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80065dc:	89fb      	ldrh	r3, [r7, #14]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	371c      	adds	r7, #28
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
	...

080065ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006602:	2b40      	cmp	r3, #64	@ 0x40
 8006604:	d005      	beq.n	8006612 <USBD_StdDevReq+0x26>
 8006606:	2b40      	cmp	r3, #64	@ 0x40
 8006608:	d857      	bhi.n	80066ba <USBD_StdDevReq+0xce>
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00f      	beq.n	800662e <USBD_StdDevReq+0x42>
 800660e:	2b20      	cmp	r3, #32
 8006610:	d153      	bne.n	80066ba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	32ae      	adds	r2, #174	@ 0xae
 800661c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	6839      	ldr	r1, [r7, #0]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	4798      	blx	r3
 8006628:	4603      	mov	r3, r0
 800662a:	73fb      	strb	r3, [r7, #15]
      break;
 800662c:	e04a      	b.n	80066c4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	785b      	ldrb	r3, [r3, #1]
 8006632:	2b09      	cmp	r3, #9
 8006634:	d83b      	bhi.n	80066ae <USBD_StdDevReq+0xc2>
 8006636:	a201      	add	r2, pc, #4	@ (adr r2, 800663c <USBD_StdDevReq+0x50>)
 8006638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663c:	08006691 	.word	0x08006691
 8006640:	080066a5 	.word	0x080066a5
 8006644:	080066af 	.word	0x080066af
 8006648:	0800669b 	.word	0x0800669b
 800664c:	080066af 	.word	0x080066af
 8006650:	0800666f 	.word	0x0800666f
 8006654:	08006665 	.word	0x08006665
 8006658:	080066af 	.word	0x080066af
 800665c:	08006687 	.word	0x08006687
 8006660:	08006679 	.word	0x08006679
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006664:	6839      	ldr	r1, [r7, #0]
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fa3e 	bl	8006ae8 <USBD_GetDescriptor>
          break;
 800666c:	e024      	b.n	80066b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800666e:	6839      	ldr	r1, [r7, #0]
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fba3 	bl	8006dbc <USBD_SetAddress>
          break;
 8006676:	e01f      	b.n	80066b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006678:	6839      	ldr	r1, [r7, #0]
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fbe2 	bl	8006e44 <USBD_SetConfig>
 8006680:	4603      	mov	r3, r0
 8006682:	73fb      	strb	r3, [r7, #15]
          break;
 8006684:	e018      	b.n	80066b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006686:	6839      	ldr	r1, [r7, #0]
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fc85 	bl	8006f98 <USBD_GetConfig>
          break;
 800668e:	e013      	b.n	80066b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006690:	6839      	ldr	r1, [r7, #0]
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fcb6 	bl	8007004 <USBD_GetStatus>
          break;
 8006698:	e00e      	b.n	80066b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800669a:	6839      	ldr	r1, [r7, #0]
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fce5 	bl	800706c <USBD_SetFeature>
          break;
 80066a2:	e009      	b.n	80066b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80066a4:	6839      	ldr	r1, [r7, #0]
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fd09 	bl	80070be <USBD_ClrFeature>
          break;
 80066ac:	e004      	b.n	80066b8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80066ae:	6839      	ldr	r1, [r7, #0]
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 fd60 	bl	8007176 <USBD_CtlError>
          break;
 80066b6:	bf00      	nop
      }
      break;
 80066b8:	e004      	b.n	80066c4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80066ba:	6839      	ldr	r1, [r7, #0]
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fd5a 	bl	8007176 <USBD_CtlError>
      break;
 80066c2:	bf00      	nop
  }

  return ret;
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop

080066d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80066da:	2300      	movs	r3, #0
 80066dc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80066e6:	2b40      	cmp	r3, #64	@ 0x40
 80066e8:	d005      	beq.n	80066f6 <USBD_StdItfReq+0x26>
 80066ea:	2b40      	cmp	r3, #64	@ 0x40
 80066ec:	d852      	bhi.n	8006794 <USBD_StdItfReq+0xc4>
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <USBD_StdItfReq+0x26>
 80066f2:	2b20      	cmp	r3, #32
 80066f4:	d14e      	bne.n	8006794 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	3b01      	subs	r3, #1
 8006700:	2b02      	cmp	r3, #2
 8006702:	d840      	bhi.n	8006786 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	889b      	ldrh	r3, [r3, #4]
 8006708:	b2db      	uxtb	r3, r3
 800670a:	2b01      	cmp	r3, #1
 800670c:	d836      	bhi.n	800677c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	889b      	ldrh	r3, [r3, #4]
 8006712:	b2db      	uxtb	r3, r3
 8006714:	4619      	mov	r1, r3
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f7ff feda 	bl	80064d0 <USBD_CoreFindIF>
 800671c:	4603      	mov	r3, r0
 800671e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006720:	7bbb      	ldrb	r3, [r7, #14]
 8006722:	2bff      	cmp	r3, #255	@ 0xff
 8006724:	d01d      	beq.n	8006762 <USBD_StdItfReq+0x92>
 8006726:	7bbb      	ldrb	r3, [r7, #14]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d11a      	bne.n	8006762 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800672c:	7bba      	ldrb	r2, [r7, #14]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	32ae      	adds	r2, #174	@ 0xae
 8006732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00f      	beq.n	800675c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800673c:	7bba      	ldrb	r2, [r7, #14]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006744:	7bba      	ldrb	r2, [r7, #14]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	32ae      	adds	r2, #174	@ 0xae
 800674a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	6839      	ldr	r1, [r7, #0]
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	4798      	blx	r3
 8006756:	4603      	mov	r3, r0
 8006758:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800675a:	e004      	b.n	8006766 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800675c:	2303      	movs	r3, #3
 800675e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006760:	e001      	b.n	8006766 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006762:	2303      	movs	r3, #3
 8006764:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	88db      	ldrh	r3, [r3, #6]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d110      	bne.n	8006790 <USBD_StdItfReq+0xc0>
 800676e:	7bfb      	ldrb	r3, [r7, #15]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10d      	bne.n	8006790 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 fdbb 	bl	80072f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800677a:	e009      	b.n	8006790 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800677c:	6839      	ldr	r1, [r7, #0]
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fcf9 	bl	8007176 <USBD_CtlError>
          break;
 8006784:	e004      	b.n	8006790 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006786:	6839      	ldr	r1, [r7, #0]
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fcf4 	bl	8007176 <USBD_CtlError>
          break;
 800678e:	e000      	b.n	8006792 <USBD_StdItfReq+0xc2>
          break;
 8006790:	bf00      	nop
      }
      break;
 8006792:	e004      	b.n	800679e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006794:	6839      	ldr	r1, [r7, #0]
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fced 	bl	8007176 <USBD_CtlError>
      break;
 800679c:	bf00      	nop
  }

  return ret;
 800679e:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	889b      	ldrh	r3, [r3, #4]
 80067ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80067c4:	2b40      	cmp	r3, #64	@ 0x40
 80067c6:	d007      	beq.n	80067d8 <USBD_StdEPReq+0x30>
 80067c8:	2b40      	cmp	r3, #64	@ 0x40
 80067ca:	f200 8181 	bhi.w	8006ad0 <USBD_StdEPReq+0x328>
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d02a      	beq.n	8006828 <USBD_StdEPReq+0x80>
 80067d2:	2b20      	cmp	r3, #32
 80067d4:	f040 817c 	bne.w	8006ad0 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80067d8:	7bbb      	ldrb	r3, [r7, #14]
 80067da:	4619      	mov	r1, r3
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f7ff fe84 	bl	80064ea <USBD_CoreFindEP>
 80067e2:	4603      	mov	r3, r0
 80067e4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067e6:	7b7b      	ldrb	r3, [r7, #13]
 80067e8:	2bff      	cmp	r3, #255	@ 0xff
 80067ea:	f000 8176 	beq.w	8006ada <USBD_StdEPReq+0x332>
 80067ee:	7b7b      	ldrb	r3, [r7, #13]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f040 8172 	bne.w	8006ada <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80067f6:	7b7a      	ldrb	r2, [r7, #13]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80067fe:	7b7a      	ldrb	r2, [r7, #13]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	32ae      	adds	r2, #174	@ 0xae
 8006804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 8165 	beq.w	8006ada <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006810:	7b7a      	ldrb	r2, [r7, #13]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	32ae      	adds	r2, #174	@ 0xae
 8006816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	6839      	ldr	r1, [r7, #0]
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	4798      	blx	r3
 8006822:	4603      	mov	r3, r0
 8006824:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006826:	e158      	b.n	8006ada <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	785b      	ldrb	r3, [r3, #1]
 800682c:	2b03      	cmp	r3, #3
 800682e:	d008      	beq.n	8006842 <USBD_StdEPReq+0x9a>
 8006830:	2b03      	cmp	r3, #3
 8006832:	f300 8147 	bgt.w	8006ac4 <USBD_StdEPReq+0x31c>
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 809b 	beq.w	8006972 <USBD_StdEPReq+0x1ca>
 800683c:	2b01      	cmp	r3, #1
 800683e:	d03c      	beq.n	80068ba <USBD_StdEPReq+0x112>
 8006840:	e140      	b.n	8006ac4 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d002      	beq.n	8006854 <USBD_StdEPReq+0xac>
 800684e:	2b03      	cmp	r3, #3
 8006850:	d016      	beq.n	8006880 <USBD_StdEPReq+0xd8>
 8006852:	e02c      	b.n	80068ae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006854:	7bbb      	ldrb	r3, [r7, #14]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00d      	beq.n	8006876 <USBD_StdEPReq+0xce>
 800685a:	7bbb      	ldrb	r3, [r7, #14]
 800685c:	2b80      	cmp	r3, #128	@ 0x80
 800685e:	d00a      	beq.n	8006876 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006860:	7bbb      	ldrb	r3, [r7, #14]
 8006862:	4619      	mov	r1, r3
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f001 f887 	bl	8007978 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800686a:	2180      	movs	r1, #128	@ 0x80
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f001 f883 	bl	8007978 <USBD_LL_StallEP>
 8006872:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006874:	e020      	b.n	80068b8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006876:	6839      	ldr	r1, [r7, #0]
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fc7c 	bl	8007176 <USBD_CtlError>
              break;
 800687e:	e01b      	b.n	80068b8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	885b      	ldrh	r3, [r3, #2]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10e      	bne.n	80068a6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006888:	7bbb      	ldrb	r3, [r7, #14]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00b      	beq.n	80068a6 <USBD_StdEPReq+0xfe>
 800688e:	7bbb      	ldrb	r3, [r7, #14]
 8006890:	2b80      	cmp	r3, #128	@ 0x80
 8006892:	d008      	beq.n	80068a6 <USBD_StdEPReq+0xfe>
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	88db      	ldrh	r3, [r3, #6]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d104      	bne.n	80068a6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800689c:	7bbb      	ldrb	r3, [r7, #14]
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f001 f869 	bl	8007978 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fd22 	bl	80072f0 <USBD_CtlSendStatus>

              break;
 80068ac:	e004      	b.n	80068b8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80068ae:	6839      	ldr	r1, [r7, #0]
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fc60 	bl	8007176 <USBD_CtlError>
              break;
 80068b6:	bf00      	nop
          }
          break;
 80068b8:	e109      	b.n	8006ace <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	d002      	beq.n	80068cc <USBD_StdEPReq+0x124>
 80068c6:	2b03      	cmp	r3, #3
 80068c8:	d016      	beq.n	80068f8 <USBD_StdEPReq+0x150>
 80068ca:	e04b      	b.n	8006964 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068cc:	7bbb      	ldrb	r3, [r7, #14]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00d      	beq.n	80068ee <USBD_StdEPReq+0x146>
 80068d2:	7bbb      	ldrb	r3, [r7, #14]
 80068d4:	2b80      	cmp	r3, #128	@ 0x80
 80068d6:	d00a      	beq.n	80068ee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80068d8:	7bbb      	ldrb	r3, [r7, #14]
 80068da:	4619      	mov	r1, r3
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f001 f84b 	bl	8007978 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80068e2:	2180      	movs	r1, #128	@ 0x80
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f001 f847 	bl	8007978 <USBD_LL_StallEP>
 80068ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068ec:	e040      	b.n	8006970 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80068ee:	6839      	ldr	r1, [r7, #0]
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fc40 	bl	8007176 <USBD_CtlError>
              break;
 80068f6:	e03b      	b.n	8006970 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	885b      	ldrh	r3, [r3, #2]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d136      	bne.n	800696e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006900:	7bbb      	ldrb	r3, [r7, #14]
 8006902:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006906:	2b00      	cmp	r3, #0
 8006908:	d004      	beq.n	8006914 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800690a:	7bbb      	ldrb	r3, [r7, #14]
 800690c:	4619      	mov	r1, r3
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f001 f851 	bl	80079b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fceb 	bl	80072f0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800691a:	7bbb      	ldrb	r3, [r7, #14]
 800691c:	4619      	mov	r1, r3
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7ff fde3 	bl	80064ea <USBD_CoreFindEP>
 8006924:	4603      	mov	r3, r0
 8006926:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006928:	7b7b      	ldrb	r3, [r7, #13]
 800692a:	2bff      	cmp	r3, #255	@ 0xff
 800692c:	d01f      	beq.n	800696e <USBD_StdEPReq+0x1c6>
 800692e:	7b7b      	ldrb	r3, [r7, #13]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d11c      	bne.n	800696e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006934:	7b7a      	ldrb	r2, [r7, #13]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800693c:	7b7a      	ldrb	r2, [r7, #13]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	32ae      	adds	r2, #174	@ 0xae
 8006942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d010      	beq.n	800696e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800694c:	7b7a      	ldrb	r2, [r7, #13]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	32ae      	adds	r2, #174	@ 0xae
 8006952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	6839      	ldr	r1, [r7, #0]
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	4798      	blx	r3
 800695e:	4603      	mov	r3, r0
 8006960:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006962:	e004      	b.n	800696e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006964:	6839      	ldr	r1, [r7, #0]
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fc05 	bl	8007176 <USBD_CtlError>
              break;
 800696c:	e000      	b.n	8006970 <USBD_StdEPReq+0x1c8>
              break;
 800696e:	bf00      	nop
          }
          break;
 8006970:	e0ad      	b.n	8006ace <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b02      	cmp	r3, #2
 800697c:	d002      	beq.n	8006984 <USBD_StdEPReq+0x1dc>
 800697e:	2b03      	cmp	r3, #3
 8006980:	d033      	beq.n	80069ea <USBD_StdEPReq+0x242>
 8006982:	e099      	b.n	8006ab8 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006984:	7bbb      	ldrb	r3, [r7, #14]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d007      	beq.n	800699a <USBD_StdEPReq+0x1f2>
 800698a:	7bbb      	ldrb	r3, [r7, #14]
 800698c:	2b80      	cmp	r3, #128	@ 0x80
 800698e:	d004      	beq.n	800699a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006990:	6839      	ldr	r1, [r7, #0]
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fbef 	bl	8007176 <USBD_CtlError>
                break;
 8006998:	e093      	b.n	8006ac2 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800699a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	da0b      	bge.n	80069ba <USBD_StdEPReq+0x212>
 80069a2:	7bbb      	ldrb	r3, [r7, #14]
 80069a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80069a8:	4613      	mov	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	4413      	add	r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	3310      	adds	r3, #16
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	4413      	add	r3, r2
 80069b6:	3304      	adds	r3, #4
 80069b8:	e00b      	b.n	80069d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80069ba:	7bbb      	ldrb	r3, [r7, #14]
 80069bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069c0:	4613      	mov	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	4413      	add	r3, r2
 80069d0:	3304      	adds	r3, #4
 80069d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2200      	movs	r2, #0
 80069d8:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	330e      	adds	r3, #14
 80069de:	2202      	movs	r2, #2
 80069e0:	4619      	mov	r1, r3
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fc44 	bl	8007270 <USBD_CtlSendData>
              break;
 80069e8:	e06b      	b.n	8006ac2 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80069ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	da11      	bge.n	8006a16 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80069f2:	7bbb      	ldrb	r3, [r7, #14]
 80069f4:	f003 020f 	and.w	r2, r3, #15
 80069f8:	6879      	ldr	r1, [r7, #4]
 80069fa:	4613      	mov	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4413      	add	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	440b      	add	r3, r1
 8006a04:	3323      	adds	r3, #35	@ 0x23
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d117      	bne.n	8006a3c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8006a0c:	6839      	ldr	r1, [r7, #0]
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fbb1 	bl	8007176 <USBD_CtlError>
                  break;
 8006a14:	e055      	b.n	8006ac2 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006a16:	7bbb      	ldrb	r3, [r7, #14]
 8006a18:	f003 020f 	and.w	r2, r3, #15
 8006a1c:	6879      	ldr	r1, [r7, #4]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	440b      	add	r3, r1
 8006a28:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d104      	bne.n	8006a3c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fb9e 	bl	8007176 <USBD_CtlError>
                  break;
 8006a3a:	e042      	b.n	8006ac2 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	da0b      	bge.n	8006a5c <USBD_StdEPReq+0x2b4>
 8006a44:	7bbb      	ldrb	r3, [r7, #14]
 8006a46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4413      	add	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	3310      	adds	r3, #16
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	4413      	add	r3, r2
 8006a58:	3304      	adds	r3, #4
 8006a5a:	e00b      	b.n	8006a74 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a5c:	7bbb      	ldrb	r3, [r7, #14]
 8006a5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a62:	4613      	mov	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4413      	add	r3, r2
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	4413      	add	r3, r2
 8006a72:	3304      	adds	r3, #4
 8006a74:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006a76:	7bbb      	ldrb	r3, [r7, #14]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d002      	beq.n	8006a82 <USBD_StdEPReq+0x2da>
 8006a7c:	7bbb      	ldrb	r3, [r7, #14]
 8006a7e:	2b80      	cmp	r3, #128	@ 0x80
 8006a80:	d103      	bne.n	8006a8a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	2200      	movs	r2, #0
 8006a86:	739a      	strb	r2, [r3, #14]
 8006a88:	e00e      	b.n	8006aa8 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006a8a:	7bbb      	ldrb	r3, [r7, #14]
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 ffb0 	bl	80079f4 <USBD_LL_IsStallEP>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d003      	beq.n	8006aa2 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	739a      	strb	r2, [r3, #14]
 8006aa0:	e002      	b.n	8006aa8 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	330e      	adds	r3, #14
 8006aac:	2202      	movs	r2, #2
 8006aae:	4619      	mov	r1, r3
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 fbdd 	bl	8007270 <USBD_CtlSendData>
              break;
 8006ab6:	e004      	b.n	8006ac2 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8006ab8:	6839      	ldr	r1, [r7, #0]
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fb5b 	bl	8007176 <USBD_CtlError>
              break;
 8006ac0:	bf00      	nop
          }
          break;
 8006ac2:	e004      	b.n	8006ace <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8006ac4:	6839      	ldr	r1, [r7, #0]
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fb55 	bl	8007176 <USBD_CtlError>
          break;
 8006acc:	bf00      	nop
      }
      break;
 8006ace:	e005      	b.n	8006adc <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 fb4f 	bl	8007176 <USBD_CtlError>
      break;
 8006ad8:	e000      	b.n	8006adc <USBD_StdEPReq+0x334>
      break;
 8006ada:	bf00      	nop
  }

  return ret;
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
	...

08006ae8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	885b      	ldrh	r3, [r3, #2]
 8006b02:	0a1b      	lsrs	r3, r3, #8
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	3b01      	subs	r3, #1
 8006b08:	2b06      	cmp	r3, #6
 8006b0a:	f200 8128 	bhi.w	8006d5e <USBD_GetDescriptor+0x276>
 8006b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8006b14 <USBD_GetDescriptor+0x2c>)
 8006b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b14:	08006b31 	.word	0x08006b31
 8006b18:	08006b49 	.word	0x08006b49
 8006b1c:	08006b89 	.word	0x08006b89
 8006b20:	08006d5f 	.word	0x08006d5f
 8006b24:	08006d5f 	.word	0x08006d5f
 8006b28:	08006cff 	.word	0x08006cff
 8006b2c:	08006d2b 	.word	0x08006d2b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	7c12      	ldrb	r2, [r2, #16]
 8006b3c:	f107 0108 	add.w	r1, r7, #8
 8006b40:	4610      	mov	r0, r2
 8006b42:	4798      	blx	r3
 8006b44:	60f8      	str	r0, [r7, #12]
      break;
 8006b46:	e112      	b.n	8006d6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	7c1b      	ldrb	r3, [r3, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10d      	bne.n	8006b6c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b58:	f107 0208 	add.w	r2, r7, #8
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	4798      	blx	r3
 8006b60:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	3301      	adds	r3, #1
 8006b66:	2202      	movs	r2, #2
 8006b68:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006b6a:	e100      	b.n	8006d6e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b74:	f107 0208 	add.w	r2, r7, #8
 8006b78:	4610      	mov	r0, r2
 8006b7a:	4798      	blx	r3
 8006b7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3301      	adds	r3, #1
 8006b82:	2202      	movs	r2, #2
 8006b84:	701a      	strb	r2, [r3, #0]
      break;
 8006b86:	e0f2      	b.n	8006d6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	885b      	ldrh	r3, [r3, #2]
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b05      	cmp	r3, #5
 8006b90:	f200 80ac 	bhi.w	8006cec <USBD_GetDescriptor+0x204>
 8006b94:	a201      	add	r2, pc, #4	@ (adr r2, 8006b9c <USBD_GetDescriptor+0xb4>)
 8006b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b9a:	bf00      	nop
 8006b9c:	08006bb5 	.word	0x08006bb5
 8006ba0:	08006be9 	.word	0x08006be9
 8006ba4:	08006c1d 	.word	0x08006c1d
 8006ba8:	08006c51 	.word	0x08006c51
 8006bac:	08006c85 	.word	0x08006c85
 8006bb0:	08006cb9 	.word	0x08006cb9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00b      	beq.n	8006bd8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	7c12      	ldrb	r2, [r2, #16]
 8006bcc:	f107 0108 	add.w	r1, r7, #8
 8006bd0:	4610      	mov	r0, r2
 8006bd2:	4798      	blx	r3
 8006bd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bd6:	e091      	b.n	8006cfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bd8:	6839      	ldr	r1, [r7, #0]
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 facb 	bl	8007176 <USBD_CtlError>
            err++;
 8006be0:	7afb      	ldrb	r3, [r7, #11]
 8006be2:	3301      	adds	r3, #1
 8006be4:	72fb      	strb	r3, [r7, #11]
          break;
 8006be6:	e089      	b.n	8006cfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00b      	beq.n	8006c0c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	7c12      	ldrb	r2, [r2, #16]
 8006c00:	f107 0108 	add.w	r1, r7, #8
 8006c04:	4610      	mov	r0, r2
 8006c06:	4798      	blx	r3
 8006c08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c0a:	e077      	b.n	8006cfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c0c:	6839      	ldr	r1, [r7, #0]
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fab1 	bl	8007176 <USBD_CtlError>
            err++;
 8006c14:	7afb      	ldrb	r3, [r7, #11]
 8006c16:	3301      	adds	r3, #1
 8006c18:	72fb      	strb	r3, [r7, #11]
          break;
 8006c1a:	e06f      	b.n	8006cfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00b      	beq.n	8006c40 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	7c12      	ldrb	r2, [r2, #16]
 8006c34:	f107 0108 	add.w	r1, r7, #8
 8006c38:	4610      	mov	r0, r2
 8006c3a:	4798      	blx	r3
 8006c3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c3e:	e05d      	b.n	8006cfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fa97 	bl	8007176 <USBD_CtlError>
            err++;
 8006c48:	7afb      	ldrb	r3, [r7, #11]
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c4e:	e055      	b.n	8006cfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00b      	beq.n	8006c74 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	7c12      	ldrb	r2, [r2, #16]
 8006c68:	f107 0108 	add.w	r1, r7, #8
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	4798      	blx	r3
 8006c70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c72:	e043      	b.n	8006cfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fa7d 	bl	8007176 <USBD_CtlError>
            err++;
 8006c7c:	7afb      	ldrb	r3, [r7, #11]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	72fb      	strb	r3, [r7, #11]
          break;
 8006c82:	e03b      	b.n	8006cfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00b      	beq.n	8006ca8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	7c12      	ldrb	r2, [r2, #16]
 8006c9c:	f107 0108 	add.w	r1, r7, #8
 8006ca0:	4610      	mov	r0, r2
 8006ca2:	4798      	blx	r3
 8006ca4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ca6:	e029      	b.n	8006cfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ca8:	6839      	ldr	r1, [r7, #0]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fa63 	bl	8007176 <USBD_CtlError>
            err++;
 8006cb0:	7afb      	ldrb	r3, [r7, #11]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	72fb      	strb	r3, [r7, #11]
          break;
 8006cb6:	e021      	b.n	8006cfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00b      	beq.n	8006cdc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	7c12      	ldrb	r2, [r2, #16]
 8006cd0:	f107 0108 	add.w	r1, r7, #8
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	4798      	blx	r3
 8006cd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cda:	e00f      	b.n	8006cfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cdc:	6839      	ldr	r1, [r7, #0]
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fa49 	bl	8007176 <USBD_CtlError>
            err++;
 8006ce4:	7afb      	ldrb	r3, [r7, #11]
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	72fb      	strb	r3, [r7, #11]
          break;
 8006cea:	e007      	b.n	8006cfc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006cec:	6839      	ldr	r1, [r7, #0]
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 fa41 	bl	8007176 <USBD_CtlError>
          err++;
 8006cf4:	7afb      	ldrb	r3, [r7, #11]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006cfa:	bf00      	nop
      }
      break;
 8006cfc:	e037      	b.n	8006d6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	7c1b      	ldrb	r3, [r3, #16]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d109      	bne.n	8006d1a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d0e:	f107 0208 	add.w	r2, r7, #8
 8006d12:	4610      	mov	r0, r2
 8006d14:	4798      	blx	r3
 8006d16:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d18:	e029      	b.n	8006d6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d1a:	6839      	ldr	r1, [r7, #0]
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 fa2a 	bl	8007176 <USBD_CtlError>
        err++;
 8006d22:	7afb      	ldrb	r3, [r7, #11]
 8006d24:	3301      	adds	r3, #1
 8006d26:	72fb      	strb	r3, [r7, #11]
      break;
 8006d28:	e021      	b.n	8006d6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	7c1b      	ldrb	r3, [r3, #16]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10d      	bne.n	8006d4e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d3a:	f107 0208 	add.w	r2, r7, #8
 8006d3e:	4610      	mov	r0, r2
 8006d40:	4798      	blx	r3
 8006d42:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	3301      	adds	r3, #1
 8006d48:	2207      	movs	r2, #7
 8006d4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d4c:	e00f      	b.n	8006d6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d4e:	6839      	ldr	r1, [r7, #0]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fa10 	bl	8007176 <USBD_CtlError>
        err++;
 8006d56:	7afb      	ldrb	r3, [r7, #11]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	72fb      	strb	r3, [r7, #11]
      break;
 8006d5c:	e007      	b.n	8006d6e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fa08 	bl	8007176 <USBD_CtlError>
      err++;
 8006d66:	7afb      	ldrb	r3, [r7, #11]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	72fb      	strb	r3, [r7, #11]
      break;
 8006d6c:	bf00      	nop
  }

  if (err != 0U)
 8006d6e:	7afb      	ldrb	r3, [r7, #11]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d11e      	bne.n	8006db2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	88db      	ldrh	r3, [r3, #6]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d016      	beq.n	8006daa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006d7c:	893b      	ldrh	r3, [r7, #8]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00e      	beq.n	8006da0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	88da      	ldrh	r2, [r3, #6]
 8006d86:	893b      	ldrh	r3, [r7, #8]
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	bf28      	it	cs
 8006d8c:	4613      	movcs	r3, r2
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d92:	893b      	ldrh	r3, [r7, #8]
 8006d94:	461a      	mov	r2, r3
 8006d96:	68f9      	ldr	r1, [r7, #12]
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fa69 	bl	8007270 <USBD_CtlSendData>
 8006d9e:	e009      	b.n	8006db4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006da0:	6839      	ldr	r1, [r7, #0]
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f9e7 	bl	8007176 <USBD_CtlError>
 8006da8:	e004      	b.n	8006db4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 faa0 	bl	80072f0 <USBD_CtlSendStatus>
 8006db0:	e000      	b.n	8006db4 <USBD_GetDescriptor+0x2cc>
    return;
 8006db2:	bf00      	nop
  }
}
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop

08006dbc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	889b      	ldrh	r3, [r3, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d131      	bne.n	8006e32 <USBD_SetAddress+0x76>
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	88db      	ldrh	r3, [r3, #6]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d12d      	bne.n	8006e32 <USBD_SetAddress+0x76>
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	885b      	ldrh	r3, [r3, #2]
 8006dda:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ddc:	d829      	bhi.n	8006e32 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	885b      	ldrh	r3, [r3, #2]
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006de8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b03      	cmp	r3, #3
 8006df4:	d104      	bne.n	8006e00 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 f9bc 	bl	8007176 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dfe:	e01d      	b.n	8006e3c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	7bfa      	ldrb	r2, [r7, #15]
 8006e04:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fe1d 	bl	8007a4c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fa6c 	bl	80072f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d004      	beq.n	8006e28 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2202      	movs	r2, #2
 8006e22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e26:	e009      	b.n	8006e3c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e30:	e004      	b.n	8006e3c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006e32:	6839      	ldr	r1, [r7, #0]
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f99e 	bl	8007176 <USBD_CtlError>
  }
}
 8006e3a:	bf00      	nop
 8006e3c:	bf00      	nop
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	885b      	ldrh	r3, [r3, #2]
 8006e56:	b2da      	uxtb	r2, r3
 8006e58:	4b4e      	ldr	r3, [pc, #312]	@ (8006f94 <USBD_SetConfig+0x150>)
 8006e5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e5c:	4b4d      	ldr	r3, [pc, #308]	@ (8006f94 <USBD_SetConfig+0x150>)
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d905      	bls.n	8006e70 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f985 	bl	8007176 <USBD_CtlError>
    return USBD_FAIL;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e08c      	b.n	8006f8a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d002      	beq.n	8006e82 <USBD_SetConfig+0x3e>
 8006e7c:	2b03      	cmp	r3, #3
 8006e7e:	d029      	beq.n	8006ed4 <USBD_SetConfig+0x90>
 8006e80:	e075      	b.n	8006f6e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006e82:	4b44      	ldr	r3, [pc, #272]	@ (8006f94 <USBD_SetConfig+0x150>)
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d020      	beq.n	8006ecc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006e8a:	4b42      	ldr	r3, [pc, #264]	@ (8006f94 <USBD_SetConfig+0x150>)
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e94:	4b3f      	ldr	r3, [pc, #252]	@ (8006f94 <USBD_SetConfig+0x150>)
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	4619      	mov	r1, r3
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7fe ffcd 	bl	8005e3a <USBD_SetClassConfig>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d008      	beq.n	8006ebc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f962 	bl	8007176 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2202      	movs	r2, #2
 8006eb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006eba:	e065      	b.n	8006f88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 fa17 	bl	80072f0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2203      	movs	r2, #3
 8006ec6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006eca:	e05d      	b.n	8006f88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fa0f 	bl	80072f0 <USBD_CtlSendStatus>
      break;
 8006ed2:	e059      	b.n	8006f88 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006ed4:	4b2f      	ldr	r3, [pc, #188]	@ (8006f94 <USBD_SetConfig+0x150>)
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d112      	bne.n	8006f02 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2202      	movs	r2, #2
 8006ee0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8006f94 <USBD_SetConfig+0x150>)
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	461a      	mov	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006eee:	4b29      	ldr	r3, [pc, #164]	@ (8006f94 <USBD_SetConfig+0x150>)
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f7fe ffbc 	bl	8005e72 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f9f8 	bl	80072f0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f00:	e042      	b.n	8006f88 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006f02:	4b24      	ldr	r3, [pc, #144]	@ (8006f94 <USBD_SetConfig+0x150>)
 8006f04:	781b      	ldrb	r3, [r3, #0]
 8006f06:	461a      	mov	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d02a      	beq.n	8006f66 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	4619      	mov	r1, r3
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7fe ffaa 	bl	8005e72 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8006f94 <USBD_SetConfig+0x150>)
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	461a      	mov	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f28:	4b1a      	ldr	r3, [pc, #104]	@ (8006f94 <USBD_SetConfig+0x150>)
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7fe ff83 	bl	8005e3a <USBD_SetClassConfig>
 8006f34:	4603      	mov	r3, r0
 8006f36:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00f      	beq.n	8006f5e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006f3e:	6839      	ldr	r1, [r7, #0]
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f918 	bl	8007176 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7fe ff8f 	bl	8005e72 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2202      	movs	r2, #2
 8006f58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006f5c:	e014      	b.n	8006f88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f9c6 	bl	80072f0 <USBD_CtlSendStatus>
      break;
 8006f64:	e010      	b.n	8006f88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f9c2 	bl	80072f0 <USBD_CtlSendStatus>
      break;
 8006f6c:	e00c      	b.n	8006f88 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006f6e:	6839      	ldr	r1, [r7, #0]
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 f900 	bl	8007176 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f76:	4b07      	ldr	r3, [pc, #28]	@ (8006f94 <USBD_SetConfig+0x150>)
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7fe ff78 	bl	8005e72 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006f82:	2303      	movs	r3, #3
 8006f84:	73fb      	strb	r3, [r7, #15]
      break;
 8006f86:	bf00      	nop
  }

  return ret;
 8006f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	200001f0 	.word	0x200001f0

08006f98 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	88db      	ldrh	r3, [r3, #6]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d004      	beq.n	8006fb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 f8e2 	bl	8007176 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006fb2:	e023      	b.n	8006ffc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	dc02      	bgt.n	8006fc6 <USBD_GetConfig+0x2e>
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	dc03      	bgt.n	8006fcc <USBD_GetConfig+0x34>
 8006fc4:	e015      	b.n	8006ff2 <USBD_GetConfig+0x5a>
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d00b      	beq.n	8006fe2 <USBD_GetConfig+0x4a>
 8006fca:	e012      	b.n	8006ff2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	3308      	adds	r3, #8
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	4619      	mov	r1, r3
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 f948 	bl	8007270 <USBD_CtlSendData>
        break;
 8006fe0:	e00c      	b.n	8006ffc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	3304      	adds	r3, #4
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	4619      	mov	r1, r3
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f940 	bl	8007270 <USBD_CtlSendData>
        break;
 8006ff0:	e004      	b.n	8006ffc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006ff2:	6839      	ldr	r1, [r7, #0]
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f8be 	bl	8007176 <USBD_CtlError>
        break;
 8006ffa:	bf00      	nop
}
 8006ffc:	bf00      	nop
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007014:	b2db      	uxtb	r3, r3
 8007016:	3b01      	subs	r3, #1
 8007018:	2b02      	cmp	r3, #2
 800701a:	d81e      	bhi.n	800705a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	88db      	ldrh	r3, [r3, #6]
 8007020:	2b02      	cmp	r3, #2
 8007022:	d004      	beq.n	800702e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007024:	6839      	ldr	r1, [r7, #0]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f8a5 	bl	8007176 <USBD_CtlError>
        break;
 800702c:	e01a      	b.n	8007064 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800703a:	2b00      	cmp	r3, #0
 800703c:	d005      	beq.n	800704a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	f043 0202 	orr.w	r2, r3, #2
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	330c      	adds	r3, #12
 800704e:	2202      	movs	r2, #2
 8007050:	4619      	mov	r1, r3
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f90c 	bl	8007270 <USBD_CtlSendData>
      break;
 8007058:	e004      	b.n	8007064 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 f88a 	bl	8007176 <USBD_CtlError>
      break;
 8007062:	bf00      	nop
  }
}
 8007064:	bf00      	nop
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	885b      	ldrh	r3, [r3, #2]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d107      	bne.n	800708e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f932 	bl	80072f0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800708c:	e013      	b.n	80070b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	885b      	ldrh	r3, [r3, #2]
 8007092:	2b02      	cmp	r3, #2
 8007094:	d10b      	bne.n	80070ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	889b      	ldrh	r3, [r3, #4]
 800709a:	0a1b      	lsrs	r3, r3, #8
 800709c:	b29b      	uxth	r3, r3
 800709e:	b2da      	uxtb	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f922 	bl	80072f0 <USBD_CtlSendStatus>
}
 80070ac:	e003      	b.n	80070b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 f860 	bl	8007176 <USBD_CtlError>
}
 80070b6:	bf00      	nop
 80070b8:	3708      	adds	r7, #8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b082      	sub	sp, #8
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
 80070c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	3b01      	subs	r3, #1
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d80b      	bhi.n	80070ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	885b      	ldrh	r3, [r3, #2]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d10c      	bne.n	80070f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f902 	bl	80072f0 <USBD_CtlSendStatus>
      }
      break;
 80070ec:	e004      	b.n	80070f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80070ee:	6839      	ldr	r1, [r7, #0]
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f840 	bl	8007176 <USBD_CtlError>
      break;
 80070f6:	e000      	b.n	80070fa <USBD_ClrFeature+0x3c>
      break;
 80070f8:	bf00      	nop
  }
}
 80070fa:	bf00      	nop
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b084      	sub	sp, #16
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	781a      	ldrb	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	3301      	adds	r3, #1
 800711c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	781a      	ldrb	r2, [r3, #0]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	3301      	adds	r3, #1
 800712a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f7ff fa3d 	bl	80065ac <SWAPBYTE>
 8007132:	4603      	mov	r3, r0
 8007134:	461a      	mov	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	3301      	adds	r3, #1
 800713e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	3301      	adds	r3, #1
 8007144:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f7ff fa30 	bl	80065ac <SWAPBYTE>
 800714c:	4603      	mov	r3, r0
 800714e:	461a      	mov	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	3301      	adds	r3, #1
 8007158:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	3301      	adds	r3, #1
 800715e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f7ff fa23 	bl	80065ac <SWAPBYTE>
 8007166:	4603      	mov	r3, r0
 8007168:	461a      	mov	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	80da      	strh	r2, [r3, #6]
}
 800716e:	bf00      	nop
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}

08007176 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b082      	sub	sp, #8
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
 800717e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007180:	2180      	movs	r1, #128	@ 0x80
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fbf8 	bl	8007978 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007188:	2100      	movs	r1, #0
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 fbf4 	bl	8007978 <USBD_LL_StallEP>
}
 8007190:	bf00      	nop
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80071a4:	2300      	movs	r3, #0
 80071a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d042      	beq.n	8007234 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80071b2:	6938      	ldr	r0, [r7, #16]
 80071b4:	f000 f842 	bl	800723c <USBD_GetLen>
 80071b8:	4603      	mov	r3, r0
 80071ba:	3301      	adds	r3, #1
 80071bc:	005b      	lsls	r3, r3, #1
 80071be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071c2:	d808      	bhi.n	80071d6 <USBD_GetString+0x3e>
 80071c4:	6938      	ldr	r0, [r7, #16]
 80071c6:	f000 f839 	bl	800723c <USBD_GetLen>
 80071ca:	4603      	mov	r3, r0
 80071cc:	3301      	adds	r3, #1
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	005b      	lsls	r3, r3, #1
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	e001      	b.n	80071da <USBD_GetString+0x42>
 80071d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80071de:	7dfb      	ldrb	r3, [r7, #23]
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	4413      	add	r3, r2
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	7812      	ldrb	r2, [r2, #0]
 80071e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
 80071ec:	3301      	adds	r3, #1
 80071ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80071f0:	7dfb      	ldrb	r3, [r7, #23]
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	4413      	add	r3, r2
 80071f6:	2203      	movs	r2, #3
 80071f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80071fa:	7dfb      	ldrb	r3, [r7, #23]
 80071fc:	3301      	adds	r3, #1
 80071fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007200:	e013      	b.n	800722a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007202:	7dfb      	ldrb	r3, [r7, #23]
 8007204:	68ba      	ldr	r2, [r7, #8]
 8007206:	4413      	add	r3, r2
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	7812      	ldrb	r2, [r2, #0]
 800720c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	3301      	adds	r3, #1
 8007212:	613b      	str	r3, [r7, #16]
    idx++;
 8007214:	7dfb      	ldrb	r3, [r7, #23]
 8007216:	3301      	adds	r3, #1
 8007218:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800721a:	7dfb      	ldrb	r3, [r7, #23]
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	4413      	add	r3, r2
 8007220:	2200      	movs	r2, #0
 8007222:	701a      	strb	r2, [r3, #0]
    idx++;
 8007224:	7dfb      	ldrb	r3, [r7, #23]
 8007226:	3301      	adds	r3, #1
 8007228:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1e7      	bne.n	8007202 <USBD_GetString+0x6a>
 8007232:	e000      	b.n	8007236 <USBD_GetString+0x9e>
    return;
 8007234:	bf00      	nop
  }
}
 8007236:	3718      	adds	r7, #24
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007244:	2300      	movs	r3, #0
 8007246:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800724c:	e005      	b.n	800725a <USBD_GetLen+0x1e>
  {
    len++;
 800724e:	7bfb      	ldrb	r3, [r7, #15]
 8007250:	3301      	adds	r3, #1
 8007252:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	3301      	adds	r3, #1
 8007258:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d1f5      	bne.n	800724e <USBD_GetLen+0x12>
  }

  return len;
 8007262:	7bfb      	ldrb	r3, [r7, #15]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2202      	movs	r2, #2
 8007280:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	2100      	movs	r1, #0
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f000 fbf4 	bl	8007a8a <USBD_LL_Transmit>

  return USBD_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	2100      	movs	r1, #0
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 fbe3 	bl	8007a8a <USBD_LL_Transmit>

  return USBD_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}

080072ce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b084      	sub	sp, #16
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	60f8      	str	r0, [r7, #12]
 80072d6:	60b9      	str	r1, [r7, #8]
 80072d8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	2100      	movs	r1, #0
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 fbf3 	bl	8007acc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2204      	movs	r2, #4
 80072fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007300:	2300      	movs	r3, #0
 8007302:	2200      	movs	r2, #0
 8007304:	2100      	movs	r1, #0
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fbbf 	bl	8007a8a <USBD_LL_Transmit>

  return USBD_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b082      	sub	sp, #8
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2205      	movs	r2, #5
 8007322:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007326:	2300      	movs	r3, #0
 8007328:	2200      	movs	r2, #0
 800732a:	2100      	movs	r1, #0
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fbcd 	bl	8007acc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	3708      	adds	r7, #8
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007340:	2200      	movs	r2, #0
 8007342:	490e      	ldr	r1, [pc, #56]	@ (800737c <MX_USB_DEVICE_Init+0x40>)
 8007344:	480e      	ldr	r0, [pc, #56]	@ (8007380 <MX_USB_DEVICE_Init+0x44>)
 8007346:	f7fe fcfb 	bl	8005d40 <USBD_Init>
 800734a:	4603      	mov	r3, r0
 800734c:	2b00      	cmp	r3, #0
 800734e:	d001      	beq.n	8007354 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007350:	f7f9 fbe8 	bl	8000b24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007354:	490b      	ldr	r1, [pc, #44]	@ (8007384 <MX_USB_DEVICE_Init+0x48>)
 8007356:	480a      	ldr	r0, [pc, #40]	@ (8007380 <MX_USB_DEVICE_Init+0x44>)
 8007358:	f7fe fd22 	bl	8005da0 <USBD_RegisterClass>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d001      	beq.n	8007366 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007362:	f7f9 fbdf 	bl	8000b24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007366:	4806      	ldr	r0, [pc, #24]	@ (8007380 <MX_USB_DEVICE_Init+0x44>)
 8007368:	f7fe fd50 	bl	8005e0c <USBD_Start>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d001      	beq.n	8007376 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007372:	f7f9 fbd7 	bl	8000b24 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007376:	bf00      	nop
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	200000cc 	.word	0x200000cc
 8007380:	200001f4 	.word	0x200001f4
 8007384:	2000000c 	.word	0x2000000c

08007388 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	4603      	mov	r3, r0
 8007390:	6039      	str	r1, [r7, #0]
 8007392:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	2212      	movs	r2, #18
 8007398:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800739a:	4b03      	ldr	r3, [pc, #12]	@ (80073a8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800739c:	4618      	mov	r0, r3
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	200000e8 	.word	0x200000e8

080073ac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	4603      	mov	r3, r0
 80073b4:	6039      	str	r1, [r7, #0]
 80073b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	2204      	movs	r2, #4
 80073bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80073be:	4b03      	ldr	r3, [pc, #12]	@ (80073cc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	200000fc 	.word	0x200000fc

080073d0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	4603      	mov	r3, r0
 80073d8:	6039      	str	r1, [r7, #0]
 80073da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073dc:	79fb      	ldrb	r3, [r7, #7]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d105      	bne.n	80073ee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	4907      	ldr	r1, [pc, #28]	@ (8007404 <USBD_FS_ProductStrDescriptor+0x34>)
 80073e6:	4808      	ldr	r0, [pc, #32]	@ (8007408 <USBD_FS_ProductStrDescriptor+0x38>)
 80073e8:	f7ff fed6 	bl	8007198 <USBD_GetString>
 80073ec:	e004      	b.n	80073f8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	4904      	ldr	r1, [pc, #16]	@ (8007404 <USBD_FS_ProductStrDescriptor+0x34>)
 80073f2:	4805      	ldr	r0, [pc, #20]	@ (8007408 <USBD_FS_ProductStrDescriptor+0x38>)
 80073f4:	f7ff fed0 	bl	8007198 <USBD_GetString>
  }
  return USBD_StrDesc;
 80073f8:	4b02      	ldr	r3, [pc, #8]	@ (8007404 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	200004d0 	.word	0x200004d0
 8007408:	08007c08 	.word	0x08007c08

0800740c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	4603      	mov	r3, r0
 8007414:	6039      	str	r1, [r7, #0]
 8007416:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007418:	683a      	ldr	r2, [r7, #0]
 800741a:	4904      	ldr	r1, [pc, #16]	@ (800742c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800741c:	4804      	ldr	r0, [pc, #16]	@ (8007430 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800741e:	f7ff febb 	bl	8007198 <USBD_GetString>
  return USBD_StrDesc;
 8007422:	4b02      	ldr	r3, [pc, #8]	@ (800742c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007424:	4618      	mov	r0, r3
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	200004d0 	.word	0x200004d0
 8007430:	08007c14 	.word	0x08007c14

08007434 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	4603      	mov	r3, r0
 800743c:	6039      	str	r1, [r7, #0]
 800743e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	221a      	movs	r2, #26
 8007444:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007446:	f000 f843 	bl	80074d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800744a:	4b02      	ldr	r3, [pc, #8]	@ (8007454 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800744c:	4618      	mov	r0, r3
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	20000100 	.word	0x20000100

08007458 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	4603      	mov	r3, r0
 8007460:	6039      	str	r1, [r7, #0]
 8007462:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007464:	79fb      	ldrb	r3, [r7, #7]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d105      	bne.n	8007476 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	4907      	ldr	r1, [pc, #28]	@ (800748c <USBD_FS_ConfigStrDescriptor+0x34>)
 800746e:	4808      	ldr	r0, [pc, #32]	@ (8007490 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007470:	f7ff fe92 	bl	8007198 <USBD_GetString>
 8007474:	e004      	b.n	8007480 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	4904      	ldr	r1, [pc, #16]	@ (800748c <USBD_FS_ConfigStrDescriptor+0x34>)
 800747a:	4805      	ldr	r0, [pc, #20]	@ (8007490 <USBD_FS_ConfigStrDescriptor+0x38>)
 800747c:	f7ff fe8c 	bl	8007198 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007480:	4b02      	ldr	r3, [pc, #8]	@ (800748c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007482:	4618      	mov	r0, r3
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	200004d0 	.word	0x200004d0
 8007490:	08007c1c 	.word	0x08007c1c

08007494 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	4603      	mov	r3, r0
 800749c:	6039      	str	r1, [r7, #0]
 800749e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80074a0:	79fb      	ldrb	r3, [r7, #7]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d105      	bne.n	80074b2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074a6:	683a      	ldr	r2, [r7, #0]
 80074a8:	4907      	ldr	r1, [pc, #28]	@ (80074c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074aa:	4808      	ldr	r0, [pc, #32]	@ (80074cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074ac:	f7ff fe74 	bl	8007198 <USBD_GetString>
 80074b0:	e004      	b.n	80074bc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	4904      	ldr	r1, [pc, #16]	@ (80074c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80074b6:	4805      	ldr	r0, [pc, #20]	@ (80074cc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80074b8:	f7ff fe6e 	bl	8007198 <USBD_GetString>
  }
  return USBD_StrDesc;
 80074bc:	4b02      	ldr	r3, [pc, #8]	@ (80074c8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	200004d0 	.word	0x200004d0
 80074cc:	08007c28 	.word	0x08007c28

080074d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80074d6:	4b0f      	ldr	r3, [pc, #60]	@ (8007514 <Get_SerialNum+0x44>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80074dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007518 <Get_SerialNum+0x48>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80074e2:	4b0e      	ldr	r3, [pc, #56]	@ (800751c <Get_SerialNum+0x4c>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4413      	add	r3, r2
 80074ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d009      	beq.n	800750a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80074f6:	2208      	movs	r2, #8
 80074f8:	4909      	ldr	r1, [pc, #36]	@ (8007520 <Get_SerialNum+0x50>)
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f000 f814 	bl	8007528 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007500:	2204      	movs	r2, #4
 8007502:	4908      	ldr	r1, [pc, #32]	@ (8007524 <Get_SerialNum+0x54>)
 8007504:	68b8      	ldr	r0, [r7, #8]
 8007506:	f000 f80f 	bl	8007528 <IntToUnicode>
  }
}
 800750a:	bf00      	nop
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	1fff7a10 	.word	0x1fff7a10
 8007518:	1fff7a14 	.word	0x1fff7a14
 800751c:	1fff7a18 	.word	0x1fff7a18
 8007520:	20000102 	.word	0x20000102
 8007524:	20000112 	.word	0x20000112

08007528 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007528:	b480      	push	{r7}
 800752a:	b087      	sub	sp, #28
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	4613      	mov	r3, r2
 8007534:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007536:	2300      	movs	r3, #0
 8007538:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800753a:	2300      	movs	r3, #0
 800753c:	75fb      	strb	r3, [r7, #23]
 800753e:	e027      	b.n	8007590 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	0f1b      	lsrs	r3, r3, #28
 8007544:	2b09      	cmp	r3, #9
 8007546:	d80b      	bhi.n	8007560 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	0f1b      	lsrs	r3, r3, #28
 800754c:	b2da      	uxtb	r2, r3
 800754e:	7dfb      	ldrb	r3, [r7, #23]
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	4619      	mov	r1, r3
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	440b      	add	r3, r1
 8007558:	3230      	adds	r2, #48	@ 0x30
 800755a:	b2d2      	uxtb	r2, r2
 800755c:	701a      	strb	r2, [r3, #0]
 800755e:	e00a      	b.n	8007576 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	0f1b      	lsrs	r3, r3, #28
 8007564:	b2da      	uxtb	r2, r3
 8007566:	7dfb      	ldrb	r3, [r7, #23]
 8007568:	005b      	lsls	r3, r3, #1
 800756a:	4619      	mov	r1, r3
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	440b      	add	r3, r1
 8007570:	3237      	adds	r2, #55	@ 0x37
 8007572:	b2d2      	uxtb	r2, r2
 8007574:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	011b      	lsls	r3, r3, #4
 800757a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800757c:	7dfb      	ldrb	r3, [r7, #23]
 800757e:	005b      	lsls	r3, r3, #1
 8007580:	3301      	adds	r3, #1
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	4413      	add	r3, r2
 8007586:	2200      	movs	r2, #0
 8007588:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800758a:	7dfb      	ldrb	r3, [r7, #23]
 800758c:	3301      	adds	r3, #1
 800758e:	75fb      	strb	r3, [r7, #23]
 8007590:	7dfa      	ldrb	r2, [r7, #23]
 8007592:	79fb      	ldrb	r3, [r7, #7]
 8007594:	429a      	cmp	r2, r3
 8007596:	d3d3      	bcc.n	8007540 <IntToUnicode+0x18>
  }
}
 8007598:	bf00      	nop
 800759a:	bf00      	nop
 800759c:	371c      	adds	r7, #28
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
	...

080075a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b08a      	sub	sp, #40	@ 0x28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075b0:	f107 0314 	add.w	r3, r7, #20
 80075b4:	2200      	movs	r2, #0
 80075b6:	601a      	str	r2, [r3, #0]
 80075b8:	605a      	str	r2, [r3, #4]
 80075ba:	609a      	str	r2, [r3, #8]
 80075bc:	60da      	str	r2, [r3, #12]
 80075be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075c8:	d13a      	bne.n	8007640 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075ca:	2300      	movs	r3, #0
 80075cc:	613b      	str	r3, [r7, #16]
 80075ce:	4b1e      	ldr	r3, [pc, #120]	@ (8007648 <HAL_PCD_MspInit+0xa0>)
 80075d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075d2:	4a1d      	ldr	r2, [pc, #116]	@ (8007648 <HAL_PCD_MspInit+0xa0>)
 80075d4:	f043 0301 	orr.w	r3, r3, #1
 80075d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80075da:	4b1b      	ldr	r3, [pc, #108]	@ (8007648 <HAL_PCD_MspInit+0xa0>)
 80075dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	613b      	str	r3, [r7, #16]
 80075e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80075e6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80075ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075ec:	2302      	movs	r3, #2
 80075ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075f0:	2300      	movs	r3, #0
 80075f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075f4:	2303      	movs	r3, #3
 80075f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80075f8:	230a      	movs	r3, #10
 80075fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075fc:	f107 0314 	add.w	r3, r7, #20
 8007600:	4619      	mov	r1, r3
 8007602:	4812      	ldr	r0, [pc, #72]	@ (800764c <HAL_PCD_MspInit+0xa4>)
 8007604:	f7fa fdee 	bl	80021e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007608:	4b0f      	ldr	r3, [pc, #60]	@ (8007648 <HAL_PCD_MspInit+0xa0>)
 800760a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800760c:	4a0e      	ldr	r2, [pc, #56]	@ (8007648 <HAL_PCD_MspInit+0xa0>)
 800760e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007612:	6353      	str	r3, [r2, #52]	@ 0x34
 8007614:	2300      	movs	r3, #0
 8007616:	60fb      	str	r3, [r7, #12]
 8007618:	4b0b      	ldr	r3, [pc, #44]	@ (8007648 <HAL_PCD_MspInit+0xa0>)
 800761a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800761c:	4a0a      	ldr	r2, [pc, #40]	@ (8007648 <HAL_PCD_MspInit+0xa0>)
 800761e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007622:	6453      	str	r3, [r2, #68]	@ 0x44
 8007624:	4b08      	ldr	r3, [pc, #32]	@ (8007648 <HAL_PCD_MspInit+0xa0>)
 8007626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007628:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800762c:	60fb      	str	r3, [r7, #12]
 800762e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007630:	2200      	movs	r2, #0
 8007632:	2100      	movs	r1, #0
 8007634:	2043      	movs	r0, #67	@ 0x43
 8007636:	f7fa fa2e 	bl	8001a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800763a:	2043      	movs	r0, #67	@ 0x43
 800763c:	f7fa fa47 	bl	8001ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007640:	bf00      	nop
 8007642:	3728      	adds	r7, #40	@ 0x28
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	40023800 	.word	0x40023800
 800764c:	40020000 	.word	0x40020000

08007650 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007664:	4619      	mov	r1, r3
 8007666:	4610      	mov	r0, r2
 8007668:	f7fe fc1d 	bl	8005ea6 <USBD_LL_SetupStage>
}
 800766c:	bf00      	nop
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	460b      	mov	r3, r1
 800767e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007686:	78fa      	ldrb	r2, [r7, #3]
 8007688:	6879      	ldr	r1, [r7, #4]
 800768a:	4613      	mov	r3, r2
 800768c:	00db      	lsls	r3, r3, #3
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	440b      	add	r3, r1
 8007694:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	78fb      	ldrb	r3, [r7, #3]
 800769c:	4619      	mov	r1, r3
 800769e:	f7fe fc57 	bl	8005f50 <USBD_LL_DataOutStage>
}
 80076a2:	bf00      	nop
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b082      	sub	sp, #8
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	460b      	mov	r3, r1
 80076b4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80076bc:	78fa      	ldrb	r2, [r7, #3]
 80076be:	6879      	ldr	r1, [r7, #4]
 80076c0:	4613      	mov	r3, r2
 80076c2:	00db      	lsls	r3, r3, #3
 80076c4:	4413      	add	r3, r2
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	440b      	add	r3, r1
 80076ca:	3320      	adds	r3, #32
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	78fb      	ldrb	r3, [r7, #3]
 80076d0:	4619      	mov	r1, r3
 80076d2:	f7fe fcf9 	bl	80060c8 <USBD_LL_DataInStage>
}
 80076d6:	bf00      	nop
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b082      	sub	sp, #8
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7fe fe3d 	bl	800636c <USBD_LL_SOF>
}
 80076f2:	bf00      	nop
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b084      	sub	sp, #16
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007702:	2301      	movs	r3, #1
 8007704:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	79db      	ldrb	r3, [r3, #7]
 800770a:	2b02      	cmp	r3, #2
 800770c:	d001      	beq.n	8007712 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800770e:	f7f9 fa09 	bl	8000b24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007718:	7bfa      	ldrb	r2, [r7, #15]
 800771a:	4611      	mov	r1, r2
 800771c:	4618      	mov	r0, r3
 800771e:	f7fe fde1 	bl	80062e4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007728:	4618      	mov	r0, r3
 800772a:	f7fe fd88 	bl	800623e <USBD_LL_Reset>
}
 800772e:	bf00      	nop
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007746:	4618      	mov	r0, r3
 8007748:	f7fe fddc 	bl	8006304 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	687a      	ldr	r2, [r7, #4]
 8007758:	6812      	ldr	r2, [r2, #0]
 800775a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800775e:	f043 0301 	orr.w	r3, r3, #1
 8007762:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	7adb      	ldrb	r3, [r3, #11]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d005      	beq.n	8007778 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800776c:	4b04      	ldr	r3, [pc, #16]	@ (8007780 <HAL_PCD_SuspendCallback+0x48>)
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	4a03      	ldr	r2, [pc, #12]	@ (8007780 <HAL_PCD_SuspendCallback+0x48>)
 8007772:	f043 0306 	orr.w	r3, r3, #6
 8007776:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007778:	bf00      	nop
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	e000ed00 	.word	0xe000ed00

08007784 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007792:	4618      	mov	r0, r3
 8007794:	f7fe fdd2 	bl	800633c <USBD_LL_Resume>
}
 8007798:	bf00      	nop
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	460b      	mov	r3, r1
 80077aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80077b2:	78fa      	ldrb	r2, [r7, #3]
 80077b4:	4611      	mov	r1, r2
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fe fe2a 	bl	8006410 <USBD_LL_IsoOUTIncomplete>
}
 80077bc:	bf00      	nop
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	460b      	mov	r3, r1
 80077ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80077d6:	78fa      	ldrb	r2, [r7, #3]
 80077d8:	4611      	mov	r1, r2
 80077da:	4618      	mov	r0, r3
 80077dc:	f7fe fde6 	bl	80063ac <USBD_LL_IsoINIncomplete>
}
 80077e0:	bf00      	nop
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fe fe3c 	bl	8006474 <USBD_LL_DevConnected>
}
 80077fc:	bf00      	nop
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007812:	4618      	mov	r0, r3
 8007814:	f7fe fe39 	bl	800648a <USBD_LL_DevDisconnected>
}
 8007818:	bf00      	nop
 800781a:	3708      	adds	r7, #8
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b082      	sub	sp, #8
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d13c      	bne.n	80078aa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007830:	4a20      	ldr	r2, [pc, #128]	@ (80078b4 <USBD_LL_Init+0x94>)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a1e      	ldr	r2, [pc, #120]	@ (80078b4 <USBD_LL_Init+0x94>)
 800783c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007840:	4b1c      	ldr	r3, [pc, #112]	@ (80078b4 <USBD_LL_Init+0x94>)
 8007842:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007846:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007848:	4b1a      	ldr	r3, [pc, #104]	@ (80078b4 <USBD_LL_Init+0x94>)
 800784a:	2204      	movs	r2, #4
 800784c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800784e:	4b19      	ldr	r3, [pc, #100]	@ (80078b4 <USBD_LL_Init+0x94>)
 8007850:	2202      	movs	r2, #2
 8007852:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007854:	4b17      	ldr	r3, [pc, #92]	@ (80078b4 <USBD_LL_Init+0x94>)
 8007856:	2200      	movs	r2, #0
 8007858:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800785a:	4b16      	ldr	r3, [pc, #88]	@ (80078b4 <USBD_LL_Init+0x94>)
 800785c:	2202      	movs	r2, #2
 800785e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007860:	4b14      	ldr	r3, [pc, #80]	@ (80078b4 <USBD_LL_Init+0x94>)
 8007862:	2200      	movs	r2, #0
 8007864:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007866:	4b13      	ldr	r3, [pc, #76]	@ (80078b4 <USBD_LL_Init+0x94>)
 8007868:	2200      	movs	r2, #0
 800786a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800786c:	4b11      	ldr	r3, [pc, #68]	@ (80078b4 <USBD_LL_Init+0x94>)
 800786e:	2200      	movs	r2, #0
 8007870:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007872:	4b10      	ldr	r3, [pc, #64]	@ (80078b4 <USBD_LL_Init+0x94>)
 8007874:	2200      	movs	r2, #0
 8007876:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007878:	4b0e      	ldr	r3, [pc, #56]	@ (80078b4 <USBD_LL_Init+0x94>)
 800787a:	2200      	movs	r2, #0
 800787c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800787e:	480d      	ldr	r0, [pc, #52]	@ (80078b4 <USBD_LL_Init+0x94>)
 8007880:	f7fa fe4c 	bl	800251c <HAL_PCD_Init>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d001      	beq.n	800788e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800788a:	f7f9 f94b 	bl	8000b24 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800788e:	2180      	movs	r1, #128	@ 0x80
 8007890:	4808      	ldr	r0, [pc, #32]	@ (80078b4 <USBD_LL_Init+0x94>)
 8007892:	f7fc f860 	bl	8003956 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007896:	2240      	movs	r2, #64	@ 0x40
 8007898:	2100      	movs	r1, #0
 800789a:	4806      	ldr	r0, [pc, #24]	@ (80078b4 <USBD_LL_Init+0x94>)
 800789c:	f7fc f814 	bl	80038c8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80078a0:	2280      	movs	r2, #128	@ 0x80
 80078a2:	2101      	movs	r1, #1
 80078a4:	4803      	ldr	r0, [pc, #12]	@ (80078b4 <USBD_LL_Init+0x94>)
 80078a6:	f7fc f80f 	bl	80038c8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3708      	adds	r7, #8
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	200006d0 	.word	0x200006d0

080078b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078c0:	2300      	movs	r3, #0
 80078c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078c4:	2300      	movs	r3, #0
 80078c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7fa ff33 	bl	800273a <HAL_PCD_Start>
 80078d4:	4603      	mov	r3, r0
 80078d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 f930 	bl	8007b40 <USBD_Get_USB_Status>
 80078e0:	4603      	mov	r3, r0
 80078e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b084      	sub	sp, #16
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	4608      	mov	r0, r1
 80078f8:	4611      	mov	r1, r2
 80078fa:	461a      	mov	r2, r3
 80078fc:	4603      	mov	r3, r0
 80078fe:	70fb      	strb	r3, [r7, #3]
 8007900:	460b      	mov	r3, r1
 8007902:	70bb      	strb	r3, [r7, #2]
 8007904:	4613      	mov	r3, r2
 8007906:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800790c:	2300      	movs	r3, #0
 800790e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007916:	78bb      	ldrb	r3, [r7, #2]
 8007918:	883a      	ldrh	r2, [r7, #0]
 800791a:	78f9      	ldrb	r1, [r7, #3]
 800791c:	f7fb fc07 	bl	800312e <HAL_PCD_EP_Open>
 8007920:	4603      	mov	r3, r0
 8007922:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007924:	7bfb      	ldrb	r3, [r7, #15]
 8007926:	4618      	mov	r0, r3
 8007928:	f000 f90a 	bl	8007b40 <USBD_Get_USB_Status>
 800792c:	4603      	mov	r3, r0
 800792e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007930:	7bbb      	ldrb	r3, [r7, #14]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b084      	sub	sp, #16
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	460b      	mov	r3, r1
 8007944:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007946:	2300      	movs	r3, #0
 8007948:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007954:	78fa      	ldrb	r2, [r7, #3]
 8007956:	4611      	mov	r1, r2
 8007958:	4618      	mov	r0, r3
 800795a:	f7fb fc52 	bl	8003202 <HAL_PCD_EP_Close>
 800795e:	4603      	mov	r3, r0
 8007960:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007962:	7bfb      	ldrb	r3, [r7, #15]
 8007964:	4618      	mov	r0, r3
 8007966:	f000 f8eb 	bl	8007b40 <USBD_Get_USB_Status>
 800796a:	4603      	mov	r3, r0
 800796c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800796e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	460b      	mov	r3, r1
 8007982:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007988:	2300      	movs	r3, #0
 800798a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007992:	78fa      	ldrb	r2, [r7, #3]
 8007994:	4611      	mov	r1, r2
 8007996:	4618      	mov	r0, r3
 8007998:	f7fb fcf2 	bl	8003380 <HAL_PCD_EP_SetStall>
 800799c:	4603      	mov	r3, r0
 800799e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 f8cc 	bl	8007b40 <USBD_Get_USB_Status>
 80079a8:	4603      	mov	r3, r0
 80079aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b084      	sub	sp, #16
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	460b      	mov	r3, r1
 80079c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079c2:	2300      	movs	r3, #0
 80079c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079c6:	2300      	movs	r3, #0
 80079c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80079d0:	78fa      	ldrb	r2, [r7, #3]
 80079d2:	4611      	mov	r1, r2
 80079d4:	4618      	mov	r0, r3
 80079d6:	f7fb fd36 	bl	8003446 <HAL_PCD_EP_ClrStall>
 80079da:	4603      	mov	r3, r0
 80079dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079de:	7bfb      	ldrb	r3, [r7, #15]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f000 f8ad 	bl	8007b40 <USBD_Get_USB_Status>
 80079e6:	4603      	mov	r3, r0
 80079e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	460b      	mov	r3, r1
 80079fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	da0b      	bge.n	8007a28 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007a10:	78fb      	ldrb	r3, [r7, #3]
 8007a12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a16:	68f9      	ldr	r1, [r7, #12]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	00db      	lsls	r3, r3, #3
 8007a1c:	4413      	add	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	440b      	add	r3, r1
 8007a22:	3316      	adds	r3, #22
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	e00b      	b.n	8007a40 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a28:	78fb      	ldrb	r3, [r7, #3]
 8007a2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a2e:	68f9      	ldr	r1, [r7, #12]
 8007a30:	4613      	mov	r3, r2
 8007a32:	00db      	lsls	r3, r3, #3
 8007a34:	4413      	add	r3, r2
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	440b      	add	r3, r1
 8007a3a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007a3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3714      	adds	r7, #20
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	460b      	mov	r3, r1
 8007a56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a66:	78fa      	ldrb	r2, [r7, #3]
 8007a68:	4611      	mov	r1, r2
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fb fb3b 	bl	80030e6 <HAL_PCD_SetAddress>
 8007a70:	4603      	mov	r3, r0
 8007a72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 f862 	bl	8007b40 <USBD_Get_USB_Status>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a80:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b086      	sub	sp, #24
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	60f8      	str	r0, [r7, #12]
 8007a92:	607a      	str	r2, [r7, #4]
 8007a94:	603b      	str	r3, [r7, #0]
 8007a96:	460b      	mov	r3, r1
 8007a98:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007aa8:	7af9      	ldrb	r1, [r7, #11]
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	f7fb fc2d 	bl	800330c <HAL_PCD_EP_Transmit>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ab6:	7dfb      	ldrb	r3, [r7, #23]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 f841 	bl	8007b40 <USBD_Get_USB_Status>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ac2:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3718      	adds	r7, #24
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	607a      	str	r2, [r7, #4]
 8007ad6:	603b      	str	r3, [r7, #0]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007adc:	2300      	movs	r3, #0
 8007ade:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007aea:	7af9      	ldrb	r1, [r7, #11]
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	f7fb fbd1 	bl	8003296 <HAL_PCD_EP_Receive>
 8007af4:	4603      	mov	r3, r0
 8007af6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007af8:	7dfb      	ldrb	r3, [r7, #23]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 f820 	bl	8007b40 <USBD_Get_USB_Status>
 8007b00:	4603      	mov	r3, r0
 8007b02:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b04:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3718      	adds	r7, #24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
	...

08007b10 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007b18:	4b03      	ldr	r3, [pc, #12]	@ (8007b28 <USBD_static_malloc+0x18>)
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	20000bb4 	.word	0x20000bb4

08007b2c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]

}
 8007b34:	bf00      	nop
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	4603      	mov	r3, r0
 8007b48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007b4e:	79fb      	ldrb	r3, [r7, #7]
 8007b50:	2b03      	cmp	r3, #3
 8007b52:	d817      	bhi.n	8007b84 <USBD_Get_USB_Status+0x44>
 8007b54:	a201      	add	r2, pc, #4	@ (adr r2, 8007b5c <USBD_Get_USB_Status+0x1c>)
 8007b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5a:	bf00      	nop
 8007b5c:	08007b6d 	.word	0x08007b6d
 8007b60:	08007b73 	.word	0x08007b73
 8007b64:	08007b79 	.word	0x08007b79
 8007b68:	08007b7f 	.word	0x08007b7f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	73fb      	strb	r3, [r7, #15]
    break;
 8007b70:	e00b      	b.n	8007b8a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b72:	2303      	movs	r3, #3
 8007b74:	73fb      	strb	r3, [r7, #15]
    break;
 8007b76:	e008      	b.n	8007b8a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b7c:	e005      	b.n	8007b8a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	73fb      	strb	r3, [r7, #15]
    break;
 8007b82:	e002      	b.n	8007b8a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007b84:	2303      	movs	r3, #3
 8007b86:	73fb      	strb	r3, [r7, #15]
    break;
 8007b88:	bf00      	nop
  }
  return usb_status;
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3714      	adds	r7, #20
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <memset>:
 8007b98:	4402      	add	r2, r0
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d100      	bne.n	8007ba2 <memset+0xa>
 8007ba0:	4770      	bx	lr
 8007ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8007ba6:	e7f9      	b.n	8007b9c <memset+0x4>

08007ba8 <__libc_init_array>:
 8007ba8:	b570      	push	{r4, r5, r6, lr}
 8007baa:	4d0d      	ldr	r5, [pc, #52]	@ (8007be0 <__libc_init_array+0x38>)
 8007bac:	4c0d      	ldr	r4, [pc, #52]	@ (8007be4 <__libc_init_array+0x3c>)
 8007bae:	1b64      	subs	r4, r4, r5
 8007bb0:	10a4      	asrs	r4, r4, #2
 8007bb2:	2600      	movs	r6, #0
 8007bb4:	42a6      	cmp	r6, r4
 8007bb6:	d109      	bne.n	8007bcc <__libc_init_array+0x24>
 8007bb8:	4d0b      	ldr	r5, [pc, #44]	@ (8007be8 <__libc_init_array+0x40>)
 8007bba:	4c0c      	ldr	r4, [pc, #48]	@ (8007bec <__libc_init_array+0x44>)
 8007bbc:	f000 f818 	bl	8007bf0 <_init>
 8007bc0:	1b64      	subs	r4, r4, r5
 8007bc2:	10a4      	asrs	r4, r4, #2
 8007bc4:	2600      	movs	r6, #0
 8007bc6:	42a6      	cmp	r6, r4
 8007bc8:	d105      	bne.n	8007bd6 <__libc_init_array+0x2e>
 8007bca:	bd70      	pop	{r4, r5, r6, pc}
 8007bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bd0:	4798      	blx	r3
 8007bd2:	3601      	adds	r6, #1
 8007bd4:	e7ee      	b.n	8007bb4 <__libc_init_array+0xc>
 8007bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bda:	4798      	blx	r3
 8007bdc:	3601      	adds	r6, #1
 8007bde:	e7f2      	b.n	8007bc6 <__libc_init_array+0x1e>
 8007be0:	08007c58 	.word	0x08007c58
 8007be4:	08007c58 	.word	0x08007c58
 8007be8:	08007c58 	.word	0x08007c58
 8007bec:	08007c5c 	.word	0x08007c5c

08007bf0 <_init>:
 8007bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf2:	bf00      	nop
 8007bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bf6:	bc08      	pop	{r3}
 8007bf8:	469e      	mov	lr, r3
 8007bfa:	4770      	bx	lr

08007bfc <_fini>:
 8007bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bfe:	bf00      	nop
 8007c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c02:	bc08      	pop	{r3}
 8007c04:	469e      	mov	lr, r3
 8007c06:	4770      	bx	lr
